apply plugin: 'java'

archivesBaseName = 'crate-aws'
group = 'io.crate'
description = 'Crate.IO AWS Plugin'

configurations {
    all*.exclude group: 'org.elasticsearch'
}

dependencies {
    compile project(':es')
    compile project(':core')
    compile project(':sql')

    compile 'com.amazonaws:aws-java-sdk-ec2:1.10.12'
    compile 'com.amazonaws:aws-java-sdk-s3:1.10.12'

    testCompile project(':testing')
}

test {
    testLogging.exceptionFormat = 'full'
}


sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            include '**/*.Plugin'
        }
    }
    test {
        java {
            srcDir 'src/test/java'
        }
    }
}

task copyPluginSource << {
    if (!file('src/main/java/org/elasticsearch').exists()) {
        copy {
            from '../es/upstream/plugins/cloud-aws/src/main/java'
            into 'src/main/java'
        }
    }
    if (!file('src/test/java').exists()) {
        copy {
            from '../es/upstream/plugins/cloud-aws/src/test/java'
            into 'src/test/java'
        }
    }
}

task deletePluginSource(type: Delete) {
    delete "src/main/java"
    delete "src/test/java"
}

task writePropertiesFile (dependsOn: ['getVersion']) << {

    def file = new File("${buildDir}/plugin-descriptor.properties");
    if (file.isFile()){
        file.delete();
    }
    if(!file.isFile()){
        file.createNewFile();
    }

    ant.propertyfile(file:file.path, comment:'Plugin Descriptor') {
        ant.entry(key:'name', value:project.archivesBaseName)
        ant.entry(key:'description', value:project.description)
        ant.entry(key:'version', value:project.version)
        ant.entry(key:'jvm', value:true)
        ant.entry(key:'classname', value:'io.crate.plugin.aws.CrateAwsPlugin')
        ant.entry(key:'elasticsearch.version', value:'2.1.2')
        ant.entry(key:'java.version', value:JavaVersion.current())
    }
}

processResources.dependsOn writePropertiesFile

compileJava {
    dependsOn copyPluginSource
}

// get version and set it on the project, so it gets appended to the jar name
task getVersion(dependsOn: [':core:getVersion']) {
    doFirst {
        project.version = project(':core').getVersion.version
    }
}

jar {
    doLast {
        manifest {
            attributes("Implementation-Title": "Crate.IO AWS Plugin", "Implementation-Version": project.version)
        }
    }
}
jar.dependsOn(getVersion, writePropertiesFile)
