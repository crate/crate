import java.time.ZoneOffset;
import java.time.ZonedDateTime;

dependencies {
    // same dependencies as in es/upstream/server/build.gradle

    compile project(':es:es-core')
    compile project(':es:es-secure-sm')
    compile project(':es:es-x-content')
    compileOnly project(':es:es-plugin-classloader')
    testRuntime project(':es:es-plugin-classloader')

    // lucene
    compile "org.apache.lucene:lucene-core:${versions.lucene}"
    compile "org.apache.lucene:lucene-analyzers-common:${versions.lucene}"
    compile "org.apache.lucene:lucene-backward-codecs:${versions.lucene}"
    compile "org.apache.lucene:lucene-grouping:${versions.lucene}"
    compile "org.apache.lucene:lucene-highlighter:${versions.lucene}"
    compile "org.apache.lucene:lucene-join:${versions.lucene}"
    compile "org.apache.lucene:lucene-memory:${versions.lucene}"
    compile "org.apache.lucene:lucene-misc:${versions.lucene}"
    compile "org.apache.lucene:lucene-queries:${versions.lucene}"
    compile "org.apache.lucene:lucene-queryparser:${versions.lucene}"
    compile "org.apache.lucene:lucene-sandbox:${versions.lucene}"
    compile "org.apache.lucene:lucene-spatial:${versions.lucene}"
    compile "org.apache.lucene:lucene-spatial-extras:${versions.lucene}"
    compile "org.apache.lucene:lucene-spatial3d:${versions.lucene}"
    compile "org.apache.lucene:lucene-suggest:${versions.lucene}"

    compile "org.elasticsearch:securesm:1.1"

    // utilities
    compile("org.elasticsearch:elasticsearch-cli:${versions.elasticsearch}") {
        exclude group: 'org.elasticsearch', module: 'elasticsearch-core'
    }
    compile "com.carrotsearch:hppc:${versions.carrotsearch_hppc}"

    // time handling
    compile "joda-time:joda-time:${versions.jodatime}"

    // percentiles aggregation
    compile "com.tdunning:t-digest:3.2"
    // percentil ranks aggregation
    compile "org.hdrhistogram:HdrHistogram:2.1.9"

    // lucene spatial
    compile "org.locationtech.spatial4j:spatial4j:${versions.spatial4j}"
    compile "org.locationtech.jts:jts-core:${versions.jts}"

    // logging
    compile "org.apache.logging.log4j:log4j-api:${versions.log4j2}"
    compile "org.apache.logging.log4j:log4j-core:${versions.log4j2}"
    // to bridge dependencies that are still on Log4j 1 to Log4j 2
    compile "org.apache.logging.log4j:log4j-1.2-api:${versions.log4j2}"

    compile "net.java.dev.jna:jna:${versions.jna}"
}

// Build.java in ES sources will read those properties
jar {
    manifest {
        attributes(
            "Change": "git rev-parse HEAD".execute([], new File("es/upstream")).in.text.trim(),
            "Build-Date": ZonedDateTime.now(ZoneOffset.UTC),
            "X-Compile-Elasticsearch-Snapshot": false
        )
    }
}

def moduleDir = file('../upstream/server')

sourceSets {
    main {
        java {
            srcDir "$moduleDir/src/main/java"
        }
        resources {
            srcDir "$moduleDir/src/main/resources"
        }
    }
}

idea {
    module {
        contentRoot = file("$moduleDir/src/main")
        excludeDirs += file('build')
    }
}
