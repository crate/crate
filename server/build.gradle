/*
 * Licensed to Crate.io GmbH ("Crate") under one or more contributor
 * license agreements.  See the NOTICE file distributed with this work for
 * additional information regarding copyright ownership.  Crate licenses
 * this file to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.  You may
 * obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * However, if you have executed another commercial license agreement
 * with Crate these terms will supersede the license and you may use the
 * software solely pursuant to the terms of the relevant commercial agreement.
 */

apply plugin: 'java-library'
apply plugin: 'java-test-fixtures'
apply from: "$rootDir/gradle/javaModule.gradle"

ext.antlr = [
    source : "src/main/antlr",
    output : "src/main/java/io/crate/signatures/antlr",
    package: 'io.crate.signatures.antlr'
]

configurations {
    antlr4
}

archivesBaseName = 'crate-server'

idea.module.testSourceDirs += sourceSets.testFixtures.java.srcDirs

// .pcks12 isn't picked up with eclipse by default and `+=` is a lie.
// If only `.pcks12` is added, none of the other extensions are picked up.
sourceSets.test.resources.includes += [
    '**/*.pcks12',
    '**/*.jks',
    '**/*.properties',
    '**/*.zip',
    '**/*.json',
    '**/*.gz',
    '**/*.csv',
    '**/*.ext',
    '**/*.yml',
    '**/*.binary'
]

dependencies {
    api project(':libs:dex')
    api project(':libs:es-x-content')
    api project(':libs:shared')
    api project(':libs:cli')
    api project(':libs:guice')
    api project(':libs:sql-parser')
    implementation project(':libs:pgwire')

    api "org.apache.logging.log4j:log4j-api:${versions.log4j2}"
    api "org.apache.logging.log4j:log4j-core:${versions.log4j2}"

    api "io.netty:netty-buffer:${versions.netty4}"
    api "io.netty:netty-codec-http:${versions.netty4}"

    antlr4 "org.antlr:antlr4:${versions.antlr}"
    implementation "org.antlr:antlr4-runtime:${versions.antlr}"
    implementation "io.netty:netty-codec:${versions.netty4}"
    implementation "io.netty:netty-common:${versions.netty4}"
    implementation "io.netty:netty-handler:${versions.netty4}"
    implementation "io.netty:netty-resolver:${versions.netty4}"
    implementation "io.netty:netty-transport-native-epoll:${versions.netty4}:linux-x86_64"
    implementation "io.netty:netty-transport:${versions.netty4}"

    api "org.apache.lucene:lucene-core:${versions.lucene}"
    implementation "org.apache.lucene:lucene-analysis-common:${versions.lucene}"
    implementation "org.apache.lucene:lucene-backward-codecs:${versions.lucene}"
    implementation "org.apache.lucene:lucene-grouping:${versions.lucene}"
    implementation "org.apache.lucene:lucene-join:${versions.lucene}"
    implementation "org.apache.lucene:lucene-misc:${versions.lucene}"
    implementation "org.apache.lucene:lucene-queries:${versions.lucene}"
    implementation "org.apache.lucene:lucene-sandbox:${versions.lucene}"
    implementation "org.apache.lucene:lucene-spatial-extras:${versions.lucene}"
    implementation "org.apache.lucene:lucene-spatial3d:${versions.lucene}"
    implementation "org.apache.lucene:lucene-suggest:${versions.lucene}"
    // lucene spatial
    implementation "org.locationtech.spatial4j:spatial4j:${versions.spatial4j}"
    implementation "org.locationtech.jts:jts-core:${versions.jts}"

    implementation "net.java.dev.jna:jna:${versions.jna}"

    implementation "com.tdunning:t-digest:${versions.tdigest}"
    implementation "org.hdrhistogram:HdrHistogram:${versions.hdrhistogram}"
    implementation "com.carrotsearch:hppc:${versions.carrotsearch_hppc}"

    implementation ("com.github.ben-manes.caffeine:caffeine:${versions.caffeine}") {
        exclude group: 'org.checkerframework', module: 'checker-qual'
        exclude group: 'com.google.errorprone', module: 'error_prone_annotations'
    }

    implementation "org.jetbrains:annotations:${versions.annotations}"

    implementation "joda-time:joda-time:${versions.jodatime}"
    implementation "com.amazonaws:aws-java-sdk-s3:${versions.aws}"
    implementation "org.apache.commons:commons-math3:${versions.commonsmath}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${versions.jackson}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:${versions.jackson}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}"
    // Needed by aws-java-sdk-s3 in Java 9
    runtimeOnly "javax.xml.bind:jaxb-api:${versions.jaxb_api}"

    testImplementation "com.carrotsearch.randomizedtesting:randomizedtesting-runner:${versions.randomizedrunner}"

    testRuntimeOnly "org.apache.lucene:lucene-codecs:${versions.lucene}"
    testImplementation "com.pholser:junit-quickcheck-core:${versions.quickcheck}"
    testImplementation "com.pholser:junit-quickcheck-generators:${versions.quickcheck}"
    testImplementation "org.skyscreamer:jsonassert:${versions.jsonassert}"
    testImplementation "org.assertj:assertj-core:${versions.assertj}"
    testFixturesImplementation "org.assertj:assertj-core:${versions.assertj}"
    testImplementation "junit:junit:${versions.junit}"
    testFixturesApi "org.junit.jupiter:junit-jupiter:${versions.junit5}"
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine") {
        because 'allows JUnit 3 and JUnit 4 tests to run'
    }

    // Required to use SelfSignedCertificate from netty
    testRuntimeOnly "org.bouncycastle:bcpkix-jdk15on:${versions.bouncycastle}"

    testFixturesApi(testFixtures(project(':libs:dex')))
    testFixturesApi "org.apache.lucene:lucene-test-framework:${versions.lucene}"
    testFixturesApi "org.hamcrest:hamcrest:${versions.hamcrest}"
    testFixturesApi "org.mockito:mockito-core:${versions.mockito}"
    testFixturesApi "org.postgresql:postgresql:${versions.jdbc}"
    testFixturesImplementation "org.jetbrains:annotations:${versions.annotations}"
    testFixturesImplementation "joda-time:joda-time:${versions.jodatime}"
    testFixturesImplementation "com.carrotsearch:hppc:${versions.carrotsearch_hppc}"
    testFixturesImplementation "org.locationtech.spatial4j:spatial4j:${versions.spatial4j}"
    testFixturesImplementation "org.apache.lucene:lucene-analysis-common:${versions.lucene}"
    testFixturesImplementation project(':libs:pgwire')
}

task getVersion(dependsOn: 'classes', type: JavaExec) {
    def stdout = new ByteArrayOutputStream()
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.elasticsearch.Version'
    standardOutput = stdout

    doLast {
        def versionOutput = stdout.toString().trim().split(" ")[1].replace(',', '').trim()
        ext.shortVersion = versionOutput.replace("-SNAPSHOT", "")
        ext.version = versionOutput
        ext.gitTag = "git describe".execute().text.trim()

        ext.buildDate = new Date().format('yyyyMMddHHmm')
        ext.buildShortHash = "git rev-parse --short HEAD".execute().text.trim()
        if (gradle.taskGraph.hasTask(':app:release') || gradle.taskGraph.hasTask(':app:releaseZip')) {
            assert gitTag == version, "Version mismatch gitTag: " + gitTag + " does not match crate version: " + version
        } else {

            if (gradle.taskGraph.hasTask(':app:nightly')) {
                ext.version = version.replace('-SNAPSHOT', '') + "-" + ext.buildDate + "-" + ext.buildShortHash
            } else if (!gradle.taskGraph.hasTask(':app:uploadArchives')) {
                ext.version = version + "-" + ext.buildShortHash
            }
        }

        logger.quiet("gitTag:         " + gitTag)
        logger.quiet("version:        " + version)
        logger.quiet("shortVersion:   " + shortVersion)
        logger.quiet("buildDate:      " + buildDate)
        logger.quiet("buildShortHash: " + buildShortHash)
    }
}

task antlrOutputDir {
    doLast {
        mkdir(antlr.output)
    }
}

task generateGrammarSource(dependsOn: antlrOutputDir, type: JavaExec) {
    inputs.files(fileTree(antlr.source))
    outputs.dir file(antlr.output)

    def grammars = fileTree(antlr.source).include('**/*.g4')

    mainClass = 'org.antlr.v4.Tool'
    classpath = configurations.antlr4
    args = [
        "-o", "${antlr.output}",
        "-visitor",
        "-no-listener",
        "-package", antlr.package,
        grammars.files
    ].flatten()
}

tasks.withType(JavaCompile) {
    it.dependsOn('generateGrammarSource')
}

test {
    outputs.dir("$projectDir/data")
    jacoco.excludes = ["*Test*"]
}
