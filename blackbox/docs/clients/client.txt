============
Client Usage
============

.. highlight:: java

Connect to a Database
=====================

The ``CrateClient`` class is used to connect to a Crate database. It requires
one or more hosts as arguments. Note that the Java client talks to Crate via the
transport port ``4300``.

Since Crate is a clustered database it is recommended to specify all the hosts
of the cluster. This way if a server is unavailable the host is skipped and the
request is automatically routed to the next server::


    import io.crate.client.CrateClient;

    CrateClient client = new CrateClient(
        "host1.example.com:4300",
        "host2.example.com:4300"
    );


Executing Queries
=================

In order to execute queries a ``cursor`` has to be retrieved from the client::

    CursorProperties properties = CursorProperties.builder()
        .setDefaultSchema("doc")
        .setFetchSize(100)
        .build();
    Cursor cursor = client.cursor(properties); // properties are optional

This cursor can then be used to execute a SQL statement::

    ActionFuture<SQLResponse> respFuture = cursor.execute("select * from t");

This operation will execute asynchronous and return a ``Future`` as result. In
order to get the actual response ``actionGet`` or ``get`` has to be called on
the future::

    SQLResponse response = respFuture.actionGet();

``actionGet`` will block until the result is available.

The number of rows that are returned as part of the ``SQLResponse`` is limited
by the ``fetchSize``.

If more rows are required the ``cursor`` can be used to fetch more data::

    ActionFuture<FetchResult> fetchResultFuture = cursor.fetchNextBatch();


Non-blocking
------------

To avoid blocking all methods that return a ``Future`` have a second variant
that takes an ``ActionListener`` as additional argument. This
``ActionListener`` acts as a callback which will be called once the result is
ready::

    cursor.execute("select name from sys.cluster", new ActionListener<SQLResponse>() {
        @Override
        public void onResponse(SQLResponse sqlResponse) {
            System.out.println(sqlResponse);
        }

        @Override
        public void onFailure(Throwable e) {
        }
    });


SQLRequest Class
================

The ``SQLRequest`` is the object that is sent to the Crate server. It contains
the SQL statement and optional additional arguments or settings.

The ``sql(String statement)`` and ``sql(String statement,
ActionListener<SQLResponse>)`` methods mentioned before are shortcuts for two
additional ``sql`` methods:

 - ``sql(SQLRequest statement) -> ActionFuture<SQLResponse>``
 - ``sql(SQLRequest statement, ActionListener<SQLResponse>) -> void``


Creating a ``SQLRequest`` directly without using the shortcut methods has the
advantage that additional features can be used. These features are described
below.


.. note::

    Most of the methods and properties described here are also applicable to
    the SQLBulkRequest class described further below.

Arguments and Parameter Substitution
------------------------------------

Instead of `inlining` values in the SQL statement it is possible to use
placeholders within the statement and provide the values separately.

This feature should always be used to prevent `SQL Injection`_, and benefit
from improved performance.

Here is an example that shows how to use it::

    SQLRequest request = new SQLRequest(
        "select * from sys.nodes where name = ?", new Object[] { "node1" });
    client.sql(request).actionGet();


Default Schema
--------------

In case the schema name isn't set explicitly in the statement Crate will
default to ``doc``. In order to overwrite that default it is possible to set
the default schema name on the ``SQLRequest``::

    SQLRequest request = new SQLRequest("select * from t");
    request.setDefaultSchema("custom_schema");

This will then return the results from ``custom_schema.t`` instead of
``doc.t``.

Request Column Data Types
-------------------------

By default the ``SQLResponse`` won't contain the data types of the result
columns. To retrieve them a flag can be set on the ``SQLRequest``::

    SQLRequest request = new SQLRequest("SELECT name FROM sys.nodes");
    request.includeTypesOnResponse(true);


SQLResponse Class
=================

The ``SQLResponse`` represents the result of a SQL statement.

It contains the following properties:

=============== ===============================================================
Property        Description
=============== ===============================================================
``cols()``      Return the column names as ``String[]``
``colTypes()``  Return the types of the columns as ``DataType[]``. The types
                are only available if the ``SQLRequest`` explicitly requested
                the types.
``duration()``  Return the time it took on the server to process the statement
                in ms as ``float``.
``rowCount()``  Return the number of rows that the response contains as
                ``long``. Might be ``-1`` if it is unknown.
``rows()``      Return the rows as ``Object[][]``
=============== ===============================================================


Data Type Mapping
=================

The data type of columns in the ``SQLResponse`` or ``SQLBulkResponse`` are Crate
data types and map with the following native Java types.

========== =========
Crate Type Java Type
========== =========
string     String
short      Short
integer    Integer
long       Long
float      Float
double     Double
byte       Byte
boolean    Boolean
array      Array
object     Map
ip         String
timestamp  Double
geo_point  Double[2]
geo_shape  Map
========== =========

The mapping also works the other way round for parameter substitution.


.. _java_client_bulk:

Bulk Operations
===============

Using the SQLBulkRequest class allows to specify and issue bulk operations which
are executed as single calls on the back-end. It can be compared to `prepared
statement`_.

A bulk operation can be expressed simply as an SQL statement. Supported
statements are:

 - Insert

 - Update

 - Delete

In order to issue a bulk operation, the SQLBulkRequest class can be used
together with the ``bulkSql()`` method.

It accepts a two dimensional array (``bulkArgs`` of type Object[][]). The first
dimension consolidates all records to a bulk. The second dimension represents
one record and needs to match the specified parameters of a statement.

The following example describes how to issue an insert bulk operation and
insert three records at once::

    String stmt = "INSERT INTO foo (id, name) VALUES (?, ?)";
    Object[][] bulkArgs = new Object[][] {
        {1, "I am Batman!"},
        {2, "Deadpool"},
        {3, "Nancy Callahan"}
    };

    SQLBulkRequest request = new SQLBulkRequest(stmt, bulkArgs);
    client.bulkSql(request).actionGet();

.. note::

    When using bulk operations **all operations are executed** no matter what.
    It does not matter whether one single operation fails or all succeed.

The response is an instance of ``SQLBulkResponse``.
It contains the column names (using ``sqlBulkResponse.cols()``) and column data
types (using ``sqlBulkResponse.columnTypes()``) and an Array of ``Result``
instances which contain a ``rowCount`` per single bulk operation.

If a bulk operation failed, the attribute ``errorMessage`` is not null.

The insert operation above would contain three ``Result`` instances with the
following data::

    "{rowCount=1, errorMessage=null}"


.. _`SQL Injection`: http://en.wikipedia.org/wiki/SQL_injection

.. _prepared statement: http://en.wikipedia.org/wiki/Prepared_statement
