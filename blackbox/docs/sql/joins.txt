.. highlight:: psql
.. _sql_joins:

Joins
=====

Cross Joins
-----------

Referencing two tables results in a ``CROSS JOIN``.
The result is computed by creating every possible combination
(`Cartesian Product`_) of their rows (``t1 * t2 * t3 * tn``) and then applying
the given query operation on it (``WHERE`` clause, ``SELECT`` list, ``ORDER BY``
clause, ...)::

    cr> select articles.name as article, colors.name as color, price
    ... from articles cross join colors
    ... where price > 5000.0
    ... order by price, color, article;
    +------------------------------+---------------+----------+
    | article                      | color         |    price |
    +------------------------------+---------------+----------+
    | Infinite Improbability Drive | Antique White | 19999.99 |
    | Infinite Improbability Drive | Gold          | 19999.99 |
    | Infinite Improbability Drive | Midnight Blue | 19999.99 |
    | Infinite Improbability Drive | Olive Drab    | 19999.99 |
    | Starship Titanic             | Antique White | 50000.0  |
    | Starship Titanic             | Gold          | 50000.0  |
    | Starship Titanic             | Midnight Blue | 50000.0  |
    | Starship Titanic             | Olive Drab    | 50000.0  |
    +------------------------------+---------------+----------+
    SELECT 8 rows in set (... sec)

Cross Joins can be done explicitly using the ``CROSS JOIN`` statement as shown
in the example above, or implicitly by just specifying two or more tables in
the ``FROM`` list::

    cr> select articles.name as article, colors.name as color, price
    ... from articles, colors
    ... where price > 5000.0
    ... order by price, color, article;
    +------------------------------+---------------+----------+
    | article                      | color         |    price |
    +------------------------------+---------------+----------+
    | Infinite Improbability Drive | Antique White | 19999.99 |
    | Infinite Improbability Drive | Gold          | 19999.99 |
    | Infinite Improbability Drive | Midnight Blue | 19999.99 |
    | Infinite Improbability Drive | Olive Drab    | 19999.99 |
    | Starship Titanic             | Antique White | 50000.0  |
    | Starship Titanic             | Gold          | 50000.0  |
    | Starship Titanic             | Midnight Blue | 50000.0  |
    | Starship Titanic             | Olive Drab    | 50000.0  |
    +------------------------------+---------------+----------+
    SELECT 8 rows in set (... sec)

Inner Joins
-----------

Inner Joins require each record of one table to have matching records on
the other table::

    cr> select s.id, s.table_name, t.number_of_shards
    ... from sys.shards s, information_schema.tables t
    ... where s.table_name = t.table_name
    ... and s.table_name = 'employees'
    ... order by s.id;
    +------+--------------+--------------------+
    | s.id | s.table_name | t.number_of_shards |
    +------+--------------+--------------------+
    |    0 | employees    |                  5 |
    |    1 | employees    |                  5 |
    |    2 | employees    |                  5 |
    |    3 | employees    |                  5 |
    |    4 | employees    |                  5 |
    +------+--------------+--------------------+
    SELECT 5 rows in set (... sec)

Join Conditions
...............

Crate supports all operators and scalar functions as join conditions in the
``WHERE`` clause.

Example with ``within`` scalar function::

    cr> select photos.name, countries.name
    ... from countries, photos
    ... where within(location, geo)
    ... order by countries.name, photos.name;
    +--------------+----------------+
    | photos.name  | countries.name |
    +--------------+----------------+
    | Eiffel Tower | France         |
    | Berlin Wall  | Germany        |
    +--------------+----------------+
    SELECT 2 rows in set (... sec)

.. note::

    :ref:`predicates` are **not** supported as join conditions.

However, there are no specific optimisations for certain join conditions such
as ``=`` (equals) yet. The JOIN operation is implemented as a generic nested loop
that invokes the operation on every record of the left table with every record
of the right table. However, these filters are applied in a distributed way for
each shard of the used tables.

Limitations
...........

 - Joining more than 2 tables can result in execution plans which perform
   poorly as there is no query optimizer in place yet.

 - The ORDER BY clause must not contain expressions which involve multiple
   relations. ``ORDER BY t1.x + t2.x`` won't work, but ``ORDER BY t1.x, t2.x``
   is allowed.


.. _`nightly builds`: https://cdn.crate.io/downloads/releases/nightly/
.. _`Cartesian Product`: https://en.wikipedia.org/wiki/Cartesian_product
.. _`Crate.IO blog`: https://crate.io/blog/
