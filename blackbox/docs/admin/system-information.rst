.. highlight:: psql
.. _system-information:

==================
System Information
==================

CrateDB provides the ``sys`` schema which contains virtual tables. These tables
are read-only and can be queried to get statistical real-time information about
the cluster, its nodes and their shards:

.. rubric:: Table of Contents

.. contents::
   :local:

.. _sys-cluster:

Cluster
=======

Basic information about the CrateDB cluster can be retrieved from the
``sys.cluster`` table:

+------------------+---------------------------------+-------------+
| Name             | Description                     | Return Type |
+==================+=================================+=============+
| ``id``           | A unique ID generated by the    | ``TEXT``    |
|                  | system.                         |             |
+------------------+---------------------------------+-------------+
| ``license``      | The current CrateDB license     | ``OBJECT``  |
|                  | information.                    |             |
+------------------+---------------------------------+-------------+
| ``name``         | The cluster name.               | ``TEXT``    |
+------------------+---------------------------------+-------------+
| ``master_node``  | Node ID of the node which       | ``TEXT``    |
|                  | currently operates as master    |             |
+------------------+---------------------------------+-------------+
| ``settings``     | The cluster settings.           | ``OBJECT``  |
+------------------+---------------------------------+-------------+

.. Hidden: reset settings

    cr> reset GLOBAL stats.enabled, stats.jobs_log_size, stats.operations_log_size;
    RESET OK, 1 row affected (... sec)

The result has at most 1 row::

  cr> select name from sys.cluster;
  +-----------------+
  | name            |
  +-----------------+
  | Testing-CrateDB |
  +-----------------+
  SELECT 1 row in set (... sec)

.. _sys-cluster-license:

Cluster License
---------------

The ``sys.cluster.license`` expression returns information about the currently
registered license.

``license``
-----------

+----------------------------+-----------------------------------------+------------------------------+
| Column Name                | Description                             | Return Type                  |
+============================+=========================================+==============================+
| ``license``                | The current CrateDB license information | ``OBJECT``                   |
|                            |  or NULL on CrateDB CE.                 |                              |
+----------------------------+-----------------------------------------+------------------------------+
| ``license['expiry_date']`` | The :ref:`date-time-types` on which     | ``TIMESTAMP WITH TIME ZONE`` |
|                            | the license expires.                    |                              |
+----------------------------+-----------------------------------------+------------------------------+
| ``license['issued_to']``   | The organisation for which the license  | ``TEXT``                     |
|                            | is issued.                              |                              |
+----------------------------+-----------------------------------------+------------------------------+
| ``license['max_nodes']``   | The maximum number of nodes the license | ``INTEGER``                  |
|                            | is valid for.                           |                              |
+----------------------------+-----------------------------------------+------------------------------+

.. _sys-cluster-settings:

Cluster Settings
----------------

The ``sys.cluster.settings`` expression returns information about the currently
applied cluster settings.

::

    cr> select settings from sys.cluster;
    +-----------------------------------------------------------------------------------------------------------------------------------...-+
    | settings                                                                                                                              |
    +-----------------------------------------------------------------------------------------------------------------------------------...-+
    | {"bulk": {...}, "cluster": {...}, "discovery": {...}, "gateway": {...}, "indices": {...}, "logger": [], "stats": {...}, "udc": {...}} |
    +-----------------------------------------------------------------------------------------------------------------------------------...-+
    SELECT 1 row in set (... sec)

::

    cr> select column_name, data_type from information_schema.columns
    ... where column_name like 'settings%'
    ... and table_name = 'cluster';
    +-----------------------------------------------------------------------------------+------------------+
    | column_name                                                                       | data_type        |
    +-----------------------------------------------------------------------------------+------------------+
    | settings                                                                          | object           |
    | settings['bulk']                                                                  | object           |
    | settings['bulk']['request_timeout']                                               | text             |
    | settings['cluster']                                                               | object           |
    | settings['cluster']['graceful_stop']                                              | object           |
    | settings['cluster']['graceful_stop']['force']                                     | boolean          |
    | settings['cluster']['graceful_stop']['min_availability']                          | text             |
    | settings['cluster']['graceful_stop']['timeout']                                   | text             |
    | settings['cluster']['info']                                                       | object           |
    | settings['cluster']['info']['update']                                             | object           |
    | settings['cluster']['info']['update']['interval']                                 | text             |
    | settings['cluster']['routing']                                                    | object           |
    | settings['cluster']['routing']['allocation']                                      | object           |
    | settings['cluster']['routing']['allocation']['allow_rebalance']                   | text             |
    | settings['cluster']['routing']['allocation']['balance']                           | object           |
    | settings['cluster']['routing']['allocation']['balance']['index']                  | real             |
    | settings['cluster']['routing']['allocation']['balance']['shard']                  | real             |
    | settings['cluster']['routing']['allocation']['balance']['threshold']              | real             |
    | settings['cluster']['routing']['allocation']['cluster_concurrent_rebalance']      | integer          |
    | settings['cluster']['routing']['allocation']['disk']                              | object           |
    | settings['cluster']['routing']['allocation']['disk']['threshold_enabled']         | boolean          |
    | settings['cluster']['routing']['allocation']['disk']['watermark']                 | object           |
    | settings['cluster']['routing']['allocation']['disk']['watermark']['flood_stage']  | text             |
    | settings['cluster']['routing']['allocation']['disk']['watermark']['high']         | text             |
    | settings['cluster']['routing']['allocation']['disk']['watermark']['low']          | text             |
    | settings['cluster']['routing']['allocation']['enable']                            | text             |
    | settings['cluster']['routing']['allocation']['exclude']                           | object           |
    | settings['cluster']['routing']['allocation']['exclude']['_host']                  | text             |
    | settings['cluster']['routing']['allocation']['exclude']['_id']                    | text             |
    | settings['cluster']['routing']['allocation']['exclude']['_ip']                    | text             |
    | settings['cluster']['routing']['allocation']['exclude']['_name']                  | text             |
    | settings['cluster']['routing']['allocation']['include']                           | object           |
    | settings['cluster']['routing']['allocation']['include']['_host']                  | text             |
    | settings['cluster']['routing']['allocation']['include']['_id']                    | text             |
    | settings['cluster']['routing']['allocation']['include']['_ip']                    | text             |
    | settings['cluster']['routing']['allocation']['include']['_name']                  | text             |
    | settings['cluster']['routing']['allocation']['node_concurrent_recoveries']        | integer          |
    | settings['cluster']['routing']['allocation']['node_initial_primaries_recoveries'] | integer          |
    | settings['cluster']['routing']['allocation']['require']                           | object           |
    | settings['cluster']['routing']['allocation']['require']['_host']                  | text             |
    | settings['cluster']['routing']['allocation']['require']['_id']                    | text             |
    | settings['cluster']['routing']['allocation']['require']['_ip']                    | text             |
    | settings['cluster']['routing']['allocation']['require']['_name']                  | text             |
    | settings['cluster']['routing']['rebalance']                                       | object           |
    | settings['cluster']['routing']['rebalance']['enable']                             | text             |
    | settings['discovery']                                                             | object           |
    | settings['discovery']['zen']                                                      | object           |
    | settings['discovery']['zen']['publish_timeout']                                   | text             |
    | settings['gateway']                                                               | object           |
    | settings['gateway']['expected_nodes']                                             | integer          |
    | settings['gateway']['recover_after_nodes']                                        | integer          |
    | settings['gateway']['recover_after_time']                                         | text             |
    | settings['indices']                                                               | object           |
    | settings['indices']['breaker']                                                    | object           |
    | settings['indices']['breaker']['fielddata']                                       | object           |
    | settings['indices']['breaker']['fielddata']['limit']                              | text             |
    | settings['indices']['breaker']['fielddata']['overhead']                           | double precision |
    | settings['indices']['breaker']['query']                                           | object           |
    | settings['indices']['breaker']['query']['limit']                                  | text             |
    | settings['indices']['breaker']['query']['overhead']                               | double precision |
    | settings['indices']['breaker']['request']                                         | object           |
    | settings['indices']['breaker']['request']['limit']                                | text             |
    | settings['indices']['breaker']['request']['overhead']                             | double precision |
    | settings['indices']['recovery']                                                   | object           |
    | settings['indices']['recovery']['internal_action_long_timeout']                   | text             |
    | settings['indices']['recovery']['internal_action_timeout']                        | text             |
    | settings['indices']['recovery']['max_bytes_per_sec']                              | text             |
    | settings['indices']['recovery']['recovery_activity_timeout']                      | text             |
    | settings['indices']['recovery']['retry_delay_network']                            | text             |
    | settings['indices']['recovery']['retry_delay_state_sync']                         | text             |
    | settings['logger']                                                                | object_array     |
    | settings['logger']['level']                                                       | text             |
    | settings['logger']['name']                                                        | text             |
    | settings['stats']                                                                 | object           |
    | settings['stats']['breaker']                                                      | object           |
    | settings['stats']['breaker']['log']                                               | object           |
    | settings['stats']['breaker']['log']['jobs']                                       | object           |
    | settings['stats']['breaker']['log']['jobs']['limit']                              | text             |
    | settings['stats']['breaker']['log']['jobs']['overhead']                           | double precision |
    | settings['stats']['breaker']['log']['operations']                                 | object           |
    | settings['stats']['breaker']['log']['operations']['limit']                        | text             |
    | settings['stats']['breaker']['log']['operations']['overhead']                     | double precision |
    | settings['stats']['enabled']                                                      | boolean          |
    | settings['stats']['jobs_log_expiration']                                          | text             |
    | settings['stats']['jobs_log_filter']                                              | text             |
    | settings['stats']['jobs_log_persistent_filter']                                   | text             |
    | settings['stats']['jobs_log_size']                                                | integer          |
    | settings['stats']['operations_log_expiration']                                    | text             |
    | settings['stats']['operations_log_size']                                          | integer          |
    | settings['stats']['service']                                                      | object           |
    | settings['stats']['service']['interval']                                          | text             |
    | settings['udc']                                                                   | object           |
    | settings['udc']['enabled']                                                        | boolean          |
    | settings['udc']['initial_delay']                                                  | text             |
    | settings['udc']['interval']                                                       | text             |
    | settings['udc']['url']                                                            | text             |
    +-----------------------------------------------------------------------------------+------------------+
    SELECT ... rows in set (... sec)

For further details, see the :ref:`Cluster Settings <conf-cluster-settings>`
configuration section.

.. _sys-nodes:

Nodes
=====

To get information about the nodes query for ``sys.nodes``.

This table can be queried for one, multiple or all nodes within a cluster.

The table schema is as follows:

``id``
------

+-------------+---------------------------------------------+-------------+
| Column Name | Description                                 | Return Type |
+=============+=============================================+=============+
| ``id``      | A unique ID within the cluster generated by | ``TEXT``    |
|             | the system.                                 |             |
+-------------+---------------------------------------------+-------------+

``name``
--------

+-------------+-------------------------------------------------+-------------+
| Column Name | Description                                     | Return Type |
+=============+=================================================+=============+
| ``name``    | The node name within a cluster. The system will | ``TEXT``    |
|             | choose a random name. You can specify the node  |             |
|             | name via your own custom `configuration`_.      |             |
+-------------+-------------------------------------------------+-------------+

``hostname``
------------

+--------------+-------------------------------------------------+-------------+
| Column Name  | Description                                     | Return Type |
+==============+=================================================+=============+
| ``hostname`` | The specified host name of the machine the node | ``TEXT``    |
|              | is running on.                                  |             |
+--------------+-------------------------------------------------+-------------+

``rest_url``
------------

+--------------+-----------------------------------------------------+-------------+
| Column Name  | Description                                         | Return Type |
+==============+=====================================================+=============+
| ``rest_url`` | Full http(s) address where the REST API of the node | ``TEXT``    |
|              | is exposed, including schema, hostname (or IP)      |             |
|              | and port.                                           |             |
+--------------+-----------------------------------------------------+-------------+

``port``
--------

+-----------------------+-------------------------------------------------+-------------+
| Column Name           | Description                                     | Return Type |
+=======================+=================================================+=============+
| ``port``              | The specified ports for both HTTP and binary    | ``OBJECT``  |
|                       | transport interfaces. You can specify the ports |             |
|                       | via your own custom `configuration`_.           |             |
+-----------------------+-------------------------------------------------+-------------+
| ``port['http']``      | CrateDB's HTTP port.                            | ``INTEGER`` |
+-----------------------+-------------------------------------------------+-------------+
| ``port['transport']`` | CrateDB's binary transport port.                | ``INTEGER`` |
+-----------------------+-------------------------------------------------+-------------+
| ``port['psql']``      | The PostgreSQL wire protocol port.              | ``INTEGER`` |
+-----------------------+-------------------------------------------------+-------------+

``load``
--------

+-----------------------------+------------------------------------------+-----------------------+
| Column Name                 | Description                              | Return Type           |
+=============================+==========================================+=======================+
| ``load``                    | System load statistics                   | ``OBJECT``            |
+-----------------------------+------------------------------------------+-----------------------+
| ``load['1']``               | Average load over the last 1 minute.     | ``DOUBLE PRECISION``  |
+-----------------------------+------------------------------------------+-----------------------+
| ``load['5']``               | Average load over the last 5 minutes.    | ``DOUBLE PRECISION``  |
+-----------------------------+------------------------------------------+-----------------------+
| ``load['15']``              | Average load over the last 15 minutes.   | ``DOUBLE PRECISION``  |
+-----------------------------+------------------------------------------+-----------------------+
| ``load['probe_timestamp']`` | Unix timestamp at the time of collection | ``BIGINT``            |
|                             | of the load probe.                       |                       |
+-----------------------------+------------------------------------------+-----------------------+


``mem``
-------

+----------------------------+-------------------------------------------------+--------------+
| Column Name                | Description                                     | Return Type  |
+============================+=================================================+==============+
| ``mem``                    | Memory utilization statistics of the host.      | ``OBJECT``   |
+----------------------------+-------------------------------------------------+--------------+
| ``mem['used']``            | Currently used memory in bytes.                 | ``BIGINT``   |
+----------------------------+-------------------------------------------------+--------------+
| ``mem['used_percent']``    | Currently used memory in percent of total.      | ``SMALLINT`` |
+----------------------------+-------------------------------------------------+--------------+
| ``mem['free']``            | Currently available memory in bytes.            | ``BIGINT``   |
+----------------------------+-------------------------------------------------+--------------+
| ``mem['free_percent']``    | Currently available memory in percent of total. | ``SMALLINT`` |
+----------------------------+-------------------------------------------------+--------------+
| ``mem['probe_timestamp']`` | Unix timestamp at the time of collection        | ``BIGINT``   |
|                            | of the memory probe.                            |              |
+----------------------------+-------------------------------------------------+--------------+

``heap``
--------

+-----------------------------+------------------------------------------------+-------------+
| Column Name                 | Description                                    | Return Type |
+=============================+================================================+=============+
| ``heap``                    | Heap memory utilization statistics.            | ``OBJECT``  |
+-----------------------------+------------------------------------------------+-------------+
| ``heap['used']``            | Currently used heap memory in bytes.           | ``BIGINT``  |
+-----------------------------+------------------------------------------------+-------------+
| ``heap['max']``             | Maximum available heap memory. You can specify | ``BIGINT``  |
|                             | the max heap memory CrateDB should use in the  |             |
|                             | `configuration`_.                              |             |
+-----------------------------+------------------------------------------------+-------------+
| ``heap['free']``            | Currently available heap memory in bytes.      | ``BIGINT``  |
+-----------------------------+------------------------------------------------+-------------+
| ``heap['probe_timestamp']`` | Unix timestamp at the time of collection       | ``BIGINT``  |
|                             | of the heap probe.                             |             |
+-----------------------------+------------------------------------------------+-------------+

.. _sys-versions:

``version``
-----------

+----------------------------------------------------+---------------------------------------------------+-------------+
| Column Name                                        | Description                                       | Return Type |
+====================================================+===================================================+=============+
| ``version``                                        | CrateDB version information.                      | ``OBJECT``  |
+----------------------------------------------------+---------------------------------------------------+-------------+
| ``version['number']``                              | Version string in format ``"major.minor.hotfix"`` | ``TEXT``    |
+----------------------------------------------------+---------------------------------------------------+-------------+
| ``version['build_hash']``                          | SHA hash of the Github commit which               | ``TEXT``    |
|                                                    | this build was built from.                        |             |
+----------------------------------------------------+---------------------------------------------------+-------------+
| ``version['build_snapshot']``                      | Indicates whether this build is a snapshot build. | ``BOOLEAN`` |
+----------------------------------------------------+---------------------------------------------------+-------------+
| ``version['minimum_index_compatibility_version']`` | Indicates the minimum compatible index version    | ``TEXT``    |
|                                                    | which is supported.                               |             |
+----------------------------------------------------+---------------------------------------------------+-------------+
| ``version['minimum_wire_compatibility_version']``  | Indicates the minimum compatible wire protocol    | ``TEXT``    |
|                                                    | version which is supported.                       |             |
+----------------------------------------------------+---------------------------------------------------+-------------+

``cluster_state_version``
-------------------------

+--------------------------------+-----------------------------------------------+-------------+
| Column Name                    | Description                                   | Return Type |
+================================+===============================================+=============+
| ``cluster_state_version``      | The current version of the cluster state. The | ``BIGINT``  |
|                                | cluster state is an immutable structure and   |             |
|                                | that is recreated when a change is published. |             |
+--------------------------------+-----------------------------------------------+-------------+

``fs``
------

+----------------------------------+------------------------------------------------+-------------+
| Column Name                      | Description                                    | Return Type |
+==================================+================================================+=============+
| ``fs``                           | Utilization statistics about the file system.  | ``OBJECT``  |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['total']``                  | Aggregated usage statistic of all disks on the | ``OBJECT``  |
|                                  | host.                                          |             |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['total']['size']``          | Total size of all disks in bytes.              | ``BIGINT``  |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['total']['used']``          | Total used space of all disks in bytes.        | ``BIGINT``  |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['total']['available']``     | Total available space of all disks in bytes.   | ``BIGINT``  |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['total']['reads']``         | Total number of reads on all disks.            | ``BIGINT``  |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['total']['bytes_read']``    | Total size of reads on all disks in bytes.     | ``BIGINT``  |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['total']['writes']``        | Total number of writes on all disks.           | ``BIGINT``  |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['total']['bytes_written']`` | Total size of writes on all disks in bytes.    | ``BIGINT``  |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['disks']``                  | Usage statistics of individual disks on the    | ``ARRAY``   |
|                                  | host.                                          |             |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['disks']['dev']``           | Device name                                    | ``TEXT``    |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['disks']['size']``          | Total size of the disk in bytes.               | ``BIGINT``  |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['disks']['used']``          | Used space of the disk in bytes.               | ``BIGINT``  |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['disks']['available']``     | Available space of the disk in bytes.          | ``BIGINT``  |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['disks']['reads']``         | Number of reads on the disk.                   | ``BIGINT``  |
|                                  |                                                |             |
|                                  | DEPRECATED: always returns -1                  |             |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['disks']['bytes_read']``    | Total size of reads on the disk in bytes.      | ``BIGINT``  |
|                                  |                                                |             |
|                                  | DEPRECATED: always returns -1                  |             |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['disks']['writes']``        | Number of writes on the disk.                  | ``BIGINT``  |
|                                  |                                                |             |
|                                  | DEPRECATED: always returns -1                  |             |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['disks']['bytes_written']`` | Total size of writes on the disk in bytes.     | ``BIGINT``  |
|                                  |                                                |             |
|                                  | DEPRECATED: always returns -1                  |             |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['data']``                   | Information about data paths used by the node. | ``ARRAY``   |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['data']['dev']``            | Device name                                    | ``TEXT``    |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['data']['path']``           | File path where the data of the node resides.  | ``TEXT``    |
+----------------------------------+------------------------------------------------+-------------+

``thread_pools``
----------------

+-------------------------------+------------------------------------------------+-------------+
| Column Name                   | Description                                    | Return Type |
+===============================+================================================+=============+
| ``thread_pools``              | Usage statistics of Java thread pools.         | ``ARRAY``   |
+-------------------------------+------------------------------------------------+-------------+
| ``thread_pools['name']``      | Name of the pool.                              | ``TEXT``    |
+-------------------------------+------------------------------------------------+-------------+
| ``thread_pools['active']``    | Number of currently running thread in the      | ``INTEGER`` |
|                               | thread pool.                                   |             |
+-------------------------------+------------------------------------------------+-------------+
| ``thread_pools['rejected']``  | Total number of rejected threads in the thread | ``BIGINT``  |
|                               | pool.                                          |             |
+-------------------------------+------------------------------------------------+-------------+
| ``thread_pools['largest']``   | Largest number of threads that have ever       | ``INTEGER`` |
|                               | simultaniously been in the pool.               |             |
+-------------------------------+------------------------------------------------+-------------+
| ``thread_pools['completed']`` | Total number of completed thread in teh thread | ``BIGINT``  |
|                               | pool.                                          |             |
+-------------------------------+------------------------------------------------+-------------+
| ``thread_pools['threads']``   | Size of the thread pool.                       | ``INTEGER`` |
+-------------------------------+------------------------------------------------+-------------+
| ``thread_pools['queue']``     | Number of thread currently in the queue.       | ``INTEGER`` |
+-------------------------------+------------------------------------------------+-------------+

``os``
------

+-------------------------------------------------+------------------------------------------------------+--------------+
| Column Name                                     | Description                                          | Return Type  |
+=================================================+======================================================+==============+
| ``os``                                          | Operating system stats                               | ``OBJECT``   |
+-------------------------------------------------+------------------------------------------------------+--------------+
| ``os['uptime']``                                | System uptime in milliseconds                        | ``BIGINT``   |
|                                                 |                                                      |              |
|                                                 | Requires allowing system calls on Windows and macOS. |              |
|                                                 | See notes in :ref:`os_uptime_limitations`.           |              |
+-------------------------------------------------+------------------------------------------------------+--------------+
| ``os['timestamp']``                             | UNIX timestamp in millisecond resolution             | ``BIGINT``   |
+-------------------------------------------------+------------------------------------------------------+--------------+
| ``os['cpu']``                                   | Information about CPU utilization                    | ``OBJECT``   |
+-------------------------------------------------+------------------------------------------------------+--------------+
| ``os['cpu']['used']``                           | System CPU usage as percentage                       | ``SMALLINT`` |
+-------------------------------------------------+------------------------------------------------------+--------------+
| ``os['cpu']['system']``                         | CPU time used by the system                          | ``SMALLINT`` |
|                                                 |                                                      |              |
|                                                 | DEPRECATED: always returns -1                        |              |
+-------------------------------------------------+------------------------------------------------------+--------------+
| ``os['cpu']['user']``                           | CPU time used by applications                        | ``SMALLINT`` |
|                                                 |                                                      |              |
|                                                 | DEPRECATED: always returns -1                        |              |
+-------------------------------------------------+------------------------------------------------------+--------------+
| ``os['cpu']['idle']``                           | Idle CPU time                                        | ``SMALLINT`` |
|                                                 |                                                      |              |
|                                                 | DEPRECATED: always returns -1                        |              |
+-------------------------------------------------+------------------------------------------------------+--------------+
| ``os['cpu']['stolen']``                         | The amount of CPU 'stolen' from this virtual         | ``SMALLINT`` |
|                                                 | machine by the hypervisor for other tasks.           |              |
|                                                 |                                                      |              |
|                                                 | DEPRECATED: always returns -1                        |              |
+-------------------------------------------------+------------------------------------------------------+--------------+
| ``os['probe_timestamp']``                       | Unix timestamp at the time of collection             | ``BIGINT``   |
|                                                 | of the OS probe.                                     |              |
+-------------------------------------------------+------------------------------------------------------+--------------+
| ``os['cgroup']``                                | Information about Cgroups **(Linux only)**           | ``OBJECT``   |
+-------------------------------------------------+------------------------------------------------------+--------------+
| ``os['cgroup']['cpuacct']``                     | Information about CPU accounting                     | ``OBJECT``   |
+-------------------------------------------------+------------------------------------------------------+--------------+
| ``os['cgroup']['cpuacct']['control_group']``    | The path to the cpu accounting cgroup                | ``TEXT``     |
+-------------------------------------------------+------------------------------------------------------+--------------+
| ``os['cgroup']['cpuacct']['usage_nanos']``      | The total CPU time (in nanoseconds) consumed by      | ``BIGINT``   |
|                                                 | all tasks in this cgroup.                            |              |
+-------------------------------------------------+------------------------------------------------------+--------------+
| ``os['cgroup']['cpu']``                         | Information about the CPU subsystem                  | ``OBJECT``   |
+-------------------------------------------------+------------------------------------------------------+--------------+
| ``os['cgroup']['cpu']['control_group']``        | The path to the cpu cgroup                           | ``TEXT``     |
+-------------------------------------------------+------------------------------------------------------+--------------+
| ``os['cgroup']['cpu']['cfs_period_micros']``    | The period of time (in microseconds) the cgroup      | ``BIGINT``   |
|                                                 | access to the CPU gets reallocated.                  |              |
+-------------------------------------------------+------------------------------------------------------+--------------+
| ``os['cgroup']['cpu']['cfs_quota_micros']``     | The total amount of time (in microseconds) for which | ``BIGINT``   |
|                                                 | all tasks in the cgroup can run during one period    |              |
|                                                 | (cfs_period_micros).                                 |              |
+-------------------------------------------------+------------------------------------------------------+--------------+
| ``os['cgroup']['cpu']['num_elapsed_periods']``  | The nr. of period intervals (cfs_period_micros) that | ``BIGINT``   |
|                                                 | have elapsed.                                        |              |
+-------------------------------------------------+------------------------------------------------------+--------------+
| ``os['cgroup']['cpu']['num_times_throttled']``  | The nr. of times tasks in the cgroup have been       | ``BIGINT``   |
|                                                 | throttled.                                           |              |
+-------------------------------------------------+------------------------------------------------------+--------------+
| ``os['cgroup']['cpu']['time_throttled_nanos']`` | The total time (in nanoseconds) for which tasks in   | ``BIGINT``   |
|                                                 | the cgroup have been throttled.                      |              |
+-------------------------------------------------+------------------------------------------------------+--------------+
| ``os['cgroup']['mem']``                         | Information about memory resources used by tasks in  | ``OBJECT``   |
|                                                 | a cgroup.                                            |              |
+-------------------------------------------------+------------------------------------------------------+--------------+
| ``os['cgroup']['mem']['control_group']``        | The path to the memory cgroup                        | ``TEXT``     |
+-------------------------------------------------+------------------------------------------------------+--------------+
| ``os['cgroup']['mem']['usage_bytes']``          | The total current memory usage by processes in       | ``TEXT``     |
|                                                 | the cgroup.                                          |              |
+-------------------------------------------------+------------------------------------------------------+--------------+
| ``os['cgroup']['mem']['limit_bytes']``          | The max. amount of user memory in the cgroup.        | ``TEXT``     |
+-------------------------------------------------+------------------------------------------------------+--------------+

The cpu information values are cached for 1s. They might differ from the actual
values at query time. Use the probe timestamp to get the time of collection.
When analyzing the cpu usage over time, always use ``os['probe_timestamp']`` to
calculate the time difference between 2 probes.

.. _os_cgroup_limitations:

Cgroup Limitations
..................

.. NOTE::

    Cgroup metrics only work if the stats are available from
    ``/sys/fs/cgroup/cpu`` and ``/sys/fs/cgroup/cpuacct``.

.. _os_uptime_limitations:

Uptime Limitations
..................

.. NOTE::

    os['uptime'] required a system call when running CrateDB on Windows or
    macOS, however, system calls are not permitted by default. If you require
    this metric you need to allow system calls by setting ``bootstrap.seccomp``
    to ``false``. This setting must be set in the crate.yml or via command line
    argument and cannot be changed at runtime.

``os_info``
-----------

+-------------------------------------+----------------------------------------------+-------------+
| Column Name                         | Description                                  | Return Type |
+=====================================+==============================================+=============+
| ``os_info``                         | Operating system information                 | ``OBJECT``  |
+-------------------------------------+----------------------------------------------+-------------+
| ``os_info['available_processors']`` | Number of processors that are available in   | ``INTEGER`` |
|                                     | the JVM. This is usually equal to the number |             |
|                                     | of cores of the CPU.                         |             |
+-------------------------------------+----------------------------------------------+-------------+
| ``os_info['name']``                 | Name of the operating system (ex: Linux,     | ``TEXT``    |
|                                     | Windows, macOS)                              |             |
+-------------------------------------+----------------------------------------------+-------------+
| ``os_info['arch']``                 | Name of the JVM architecture (ex: amd64,     | ``TEXT``    |
|                                     | x86)                                         |             |
+-------------------------------------+----------------------------------------------+-------------+
| ``os_info['version']``              | Version of the operating system              | ``TEXT``    |
+-------------------------------------+----------------------------------------------+-------------+
| ``os_info['jvm']``                  | Information about the JVM (Java Virtual      | ``OBJECT``  |
|                                     | Machine)                                     |             |
+-------------------------------------+----------------------------------------------+-------------+
| ``os_info['jvm']['version']``       | The JVM version                              | ``TEXT``    |
+-------------------------------------+----------------------------------------------+-------------+
| ``os_info['jvm']['vm_name']``       | The name of the JVM (eg. OpenJDK,            | ``TEXT``    |
|                                     | Java Hotspot(TM) )                           |             |
+-------------------------------------+----------------------------------------------+-------------+
| ``os_info['jvm']['vm_vendor']``     | The vendor name of the JVM                   | ``TEXT``    |
+-------------------------------------+----------------------------------------------+-------------+
| ``os_info['jvm']['vm_version']``    | The version of the JVM                       | ``TEXT``    |
+-------------------------------------+----------------------------------------------+-------------+

``network``
-----------

Network statistics are deprecated in CrateDB 2.3 and may completely be removed
in subsequent versions. All ``BIGINT`` columns always return ``0``.

+--------------------------------------------------------+--------------------------------------------------------------------------------------------+-------------+
| Column Name                                            | Description                                                                                | Return Type |
+========================================================+============================================================================================+=============+
| ``network``                                            | Statistics about network activity on the host.                                             | ``OBJECT``  |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+-------------+
| ``network['probe_timestamp']``                         | Unix timestamp at the time of collection of the network probe.                             | ``BIGINT``  |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+-------------+
| ``network['tcp']``                                     | TCP network activity on the host.                                                          | ``OBJECT``  |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+-------------+
| ``network['tcp']['connections']``                      | Information about TCP network connections.                                                 | ``OBJECT``  |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+-------------+
| ``network['tpc']['connections']['initiated']``         | Total number of initiated TCP connections.                                                 | ``BIGINT``  |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+-------------+
| ``network['tpc']['connections']['accepted']``          | Total number of accepted TCP connections.                                                  | ``BIGINT``  |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+-------------+
| ``network['tpc']['connections']['curr_established']``  | Total number of currently established TCP connections.                                     | ``BIGINT``  |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+-------------+
| ``network['tcp']['connections']['dropped']``           | Total number of dropped TCP connections.                                                   | ``BIGINT``  |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+-------------+
| ``network['tcp']['connections']['embryonic_dropped']`` | Total number of TCP connections that have been dropped before they were accepted.          | ``BIGINT``  |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+-------------+
| ``network['tcp']['packets']``                          | Information about TCP packets.                                                             | ``OBJECT``  |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+-------------+
| ``network['tpc']['packets']['sent']``                  | Total number of TCP packets sent.                                                          | ``BIGINT``  |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+-------------+
| ``network['tcp']['packets']['received']``              | Total number of TCP packets received.                                                      | ``BIGINT``  |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+-------------+
| ``network['tpc']['packets']['retransmitted']``         | Total number of TCP packets retransmitted due to an error.                                 | ``BIGINT``  |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+-------------+
| ``network['tcp']['packets']['errors_received']``       | Total number of TCP packets that contained checksum errors, had a bad offset, were dropped | ``BIGINT``  |
|                                                        | because of a lack of memory or were too short.                                             |             |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+-------------+
| ``network['tcp']]['packets']['rst_sent']``             | Total number of RST packets sent due to left unread                                        | ``BIGINT``  |
|                                                        | data in queue when socket is closed.                                                       |             |
|                                                        | See `tools.ietf.org <https://tools.ietf.org/html/rfc2525#page-50>`_.                       |             |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+-------------+

``connections``
---------------

+-------------------------------------+-------------------+-------------------+
| Column Name                         | Description       | Return Type       |
+=====================================+===================+===================+
| ``http``                            | Number of         | ``OBJECT``        |
|                                     | connections       |                   |
|                                     | established via   |                   |
|                                     | HTTP              |                   |
+-------------------------------------+-------------------+-------------------+
| ``http['open']``                    | The currently     | ``BIGINT``        |
|                                     | open connections  |                   |
|                                     | established via   |                   |
|                                     | HTTP              |                   |
+-------------------------------------+-------------------+-------------------+
| ``http['total']``                   | The total number  | ``BIGINT``        |
|                                     | of connections    |                   |
|                                     | that have been    |                   |
|                                     | established via   |                   |
|                                     | HTTP over the     |                   |
|                                     | life time of a    |                   |
|                                     | CrateDB node      |                   |
+-------------------------------------+-------------------+-------------------+
| ``psql``                            | Number of         | ``OBJECT``        |
|                                     | connections       |                   |
|                                     | established via   |                   |
|                                     | Postgres protocol |                   |
+-------------------------------------+-------------------+-------------------+
| ``psql['open']``                    | The currently     | ``BIGINT``        |
|                                     | open connections  |                   |
|                                     | established via   |                   |
|                                     | Postgres protocol |                   |
+-------------------------------------+-------------------+-------------------+
| ``psql['total']``                   | The total number  | ``BIGINT``        |
|                                     | of connections    |                   |
|                                     | that have been    |                   |
|                                     | established via   |                   |
|                                     | Postgres protocol |                   |
|                                     | over the life     |                   |
|                                     | time of a CrateDB |                   |
|                                     | node              |                   |
+-------------------------------------+-------------------+-------------------+
| ``transport``                       | Number of         | ``OBJECT``        |
|                                     | connections       |                   |
|                                     | established via   |                   |
|                                     | Transport         |                   |
|                                     | protocol          |                   |
+-------------------------------------+-------------------+-------------------+
| ``transport['open']``               | The currently     | ``BIGINT``        |
|                                     | open connections  |                   |
|                                     | established via   |                   |
|                                     | Transport         |                   |
|                                     | protocol          |                   |
+-------------------------------------+-------------------+-------------------+


``process``
-----------

+------------------------------------------+------------------------------------------------+--------------+
| Column Name                              | Description                                    | Return Type  |
+==========================================+================================================+==============+
| ``process``                              | Statistics about the CrateDB process.          | ``OBJECT``   |
+------------------------------------------+------------------------------------------------+--------------+
| ``process['open_file_descriptors']``     | Number of currently open file descriptors used | ``BIGINT``   |
|                                          | by the CrateDB process.                        |              |
+------------------------------------------+------------------------------------------------+--------------+
| ``process['max_open_file_descriptors']`` | The maximum number of open file descriptors    | ``BIGINT``   |
|                                          | CrateDB can use.                               |              |
+------------------------------------------+------------------------------------------------+--------------+
| ``process['probe_timestamp']``           | The system UNIX timestamp at the moment of     | ``BIGINT``   |
|                                          | the probe collection.                          |              |
+------------------------------------------+------------------------------------------------+--------------+
| ``process['cpu']``                       | Information about the CPU usage of the CrateDB | ``OBJECT``   |
|                                          | process.                                       |              |
+------------------------------------------+------------------------------------------------+--------------+
| ``process['cpu']['percent']``            | The CPU usage of the CrateDB JVM process given | ``SMALLINT`` |
|                                          | in percent.                                    |              |
+------------------------------------------+------------------------------------------------+--------------+
| ``process['cpu']['user']``               | The process CPU user time in milliseconds.     | ``BIGINT``   |
|                                          |                                                |              |
|                                          | DEPRECATED: always returns -1                  |              |
+------------------------------------------+------------------------------------------------+--------------+
| ``process['cpu']['system']``             | The process CPU kernel time in milliseconds.   | ``BIGINT``   |
|                                          |                                                |              |
|                                          | DEPRECATED: always returns -1                  |              |
+------------------------------------------+------------------------------------------------+--------------+

The cpu information values are cached for 1s. They might differ from the actual
values at query time. Use the probe timestamp to get the time of the collect.
When analyzing the cpu usage over time, always use
``process['probe_timestamp']`` to calculate the time difference between 2
probes.

.. NOTE::

    If one of the queried nodes is not responding within three seconds it
    returns ``null`` every column except ``id`` and ``name``. This behaviour
    could be used to detect hanging nodes.

.. _sys-node-checks:

Node Checks
===========

The table ``sys.node_checks`` exposes a list of internal node checks and
results of their validation.

The table schema is the following:

+------------------+----------------------------------+--------------+
| Column Name      | Description                      | Return Type  |
+==================+==================================+==============+
| ``id``           | The unique check ID.             | ``INTEGER``  |
+------------------+----------------------------------+--------------+
| ``node_id``      | The unique node ID.              | ``TEXT``     |
+------------------+----------------------------------+--------------+
| ``severity``     | The level of severity.           | ``INTEGER``  |
|                  | The higher the value of the      |              |
|                  | field the higher severity.       |              |
+------------------+----------------------------------+--------------+
| ``description``  | The description message for the  | ``TEXT``     |
|                  | setting check.                   |              |
+------------------+----------------------------------+--------------+
| ``passed``       | The flag determines whether the  | ``BOOLEAN``  |
|                  | check for the setting has passed.|              |
+------------------+----------------------------------+--------------+
| ``acknowledged`` | The flag determines whether the  | ``BOOLEAN``  |
|                  | check for this setting has been  |              |
|                  | acknowledged by the user in      |              |
|                  | order to ignored the value of    |              |
|                  | ``passed`` column. This column   |              |
|                  | can be *updated*.                |              |
+------------------+----------------------------------+--------------+

Example query::

  cr> select id, node_id, description from sys.node_checks order by id, node_id;
  +----+---------...-+--------------------------------------------------------------...-+
  | id | node_id     | description                                                      |
  +----+---------...-+--------------------------------------------------------------...-+
  |  1 | ...         | The value of the cluster setting 'gateway.expected_nodes' mus... |
  |  2 | ...         | The value of the cluster setting 'gateway.recover_after_nodes... |
  |  3 | ...         | If any of the "expected nodes" recovery settings are set, the... |
  |  5 | ...         | The high disk watermark is exceeded on the node. The cluster ... |
  |  6 | ...         | The low disk watermark is exceeded on the node. The cluster w... |
  |  7 | ...         | The flood stage disk watermark is exceeded on the node. Table... |
  |  8 | ...         | The JVM version with which CrateDB is running should be >= 11... |
  +----+---------...-+--------------------------------------------------------------...-+
  SELECT 7 rows in set (... sec)

.. _sys-node-checks-ack:

Acknowledge Failed Checks
-------------------------

It is possible to acknowledge every check by updating the ``acknowledged``
column. By doing this, specially CrateDB's built-in Admin-UI won't complain
anymore about failing checks.

Imagine we've added a new node to our cluster, but as the
:ref:`gateway.expected_nodes <gateway.expected_nodes>` column can only
be set via config-file or command-line argument, the check for this setting
will not pass on the already running nodes until the config-file or
command-line argument on these nodes is updated and the nodes are restarted
(which is not what we want on a healthy well running cluster).

In order to make the Admin-UI accept a failing check (so the checks label goes
green again), we must acknowledge this check by updating it's ``acknowledged``
flag::

  cr> update sys.node_checks set acknowledged = true where id = 1;
  UPDATE OK, 1 row affected (... sec)

.. CAUTION::

   Updates on this column are transient, so changed values are lost after the
   affected node is restarted.

Description of Checked Node Settings
------------------------------------

Recovery Expected Nodes
.......................

The check for the :ref:`gateway.expected_nodes <gateway.expected_nodes>`
setting checks that the number of nodes that should be waited for the immediate
cluster state recovery, must be equal to the maximum number of data and master
nodes in the cluster.

Recovery After Nodes
....................

The check for the :ref:`gateway.recover_after_nodes
<gateway.recover_after_nodes>` verifies that the number of started nodes before
the cluster starts must be greater than the half of the expected number of
nodes and equal/less than number of nodes in the cluster.

::

  (E / 2) < R <= E

where ``R`` is the number of recovery nodes, ``E`` is the number of expected
nodes.

Recovery After Time
...................

If :ref:`gateway.recover_after_nodes <gateway.recover_after_nodes>` is set,
then :ref:`gateway.recover_after_time <gateway.recover_after_time>` must not be
set to ``0s``, otherwise the ``gateway.recover_after_nodes`` setting wouldn't
have any effect.

.. _node_checks_watermark_high:

Routing Allocation Disk Watermark High
......................................

The check for the :ref:`cluster.routing.allocation.disk.watermark.high
<cluster.routing.allocation.disk.watermark.high>` setting verifies that the
high watermark is not exceeded on the current node. The usage of each disk for
configured CrateDB data paths is verified against the threshold setting. If one
or more verification fails the check is marked as not passed.


.. _node_checks_watermark_low:

Routing Allocation Disk Watermark Low
.....................................

The check for the :ref:`cluster.routing.allocation.disk.watermark.low
<cluster.routing.allocation.disk.watermark.low>` which controls the low
watermark for the node disk usage. The check verifies that the low watermark is
not exceeded on the current node. The verification is done against each disk
for configured CrateDB data paths. The check is not passed if the verification
for one or more disk fails.


JVM Version
...........


The check for the JVM version checks if CrateDB is running under Java 11 or
later. If not the check fails as we're dropping support for earlier versions in
future release. This is a low severity check that doesn't require immediate
action. But to be able to upgrade to future version the JVM should be upgraded
eventually.


.. _sys-shards:

Shards
======

The table ``sys.shards`` contains real-time statistics for all shards of all
(non-system) tables.

Table Schema
------------

+------------------------------------+----------------------------------------------------+-------------+
| Column Name                        | Description                                        | Return Type |
+====================================+====================================================+=============+
+------------------------------------+----------------------------------------------------+-------------+
| ``_node``                          | Information about the node the shard is located    | ``OBJECT``  |
|                                    | at.                                                |             |
|                                    |                                                    |             |
|                                    | Contains the same information as the ``sys.nodes`` |             |
|                                    | table.                                             |             |
+------------------------------------+----------------------------------------------------+-------------+
| ``blob_path``                      | Path to the directory which contains the blob      | ``TEXT``    |
|                                    | files of the shard, or null if the shard is not a  |             |
|                                    | blob shard.                                        |             |
+------------------------------------+----------------------------------------------------+-------------+
| ``id``                             | The shard ID.                                      | ``INTEGER`` |
|                                    |                                                    |             |
|                                    | This shard ID is managed by the managed by the     |             |
|                                    | system ranging from 0 and up to the specified      |             |
|                                    | number of shards of a table (by default the number |             |
|                                    | of shards is 5).                                   |             |
+------------------------------------+----------------------------------------------------+-------------+
| ``min_lucene_version``             | Shows the oldest lucene segment version used in    | ``TEXT``    |
|                                    | this shard.                                        |             |
+------------------------------------+----------------------------------------------------+-------------+
| ``num_docs``                       | The total amount of docs within a shard.           | ``BIGINT``  |
+------------------------------------+----------------------------------------------------+-------------+
| ``orphan_partition``               | True if the partition has NO table associated      | ``BOOLEAN`` |
|                                    | with. In rare situations the table is missing.     |             |
|                                    |                                                    |             |
|                                    | False on non-partitioned tables.                   |             |
+------------------------------------+----------------------------------------------------+-------------+
| ``partition_ident``                | The partition ident of a partitioned table.        | ``TEXT``    |
|                                    |                                                    |             |
|                                    | Empty string on non-partitioned tables.            |             |
+------------------------------------+----------------------------------------------------+-------------+
| ``path``                           | Path to the shard directory on the filesystem.     | ``TEXT``    |
|                                    |                                                    |             |
|                                    | This directory contains state and index files.     |             |
+------------------------------------+----------------------------------------------------+-------------+
| ``primary``                        | Describes if the shard is the primary shard.       | ``BOOLEAN`` |
+------------------------------------+----------------------------------------------------+-------------+
| ``recovery``                       | Represents recovery statistic of the particular    | ``OBJECT``  |
|                                    | shard.                                             |             |
|                                    |                                                    |             |
|                                    | Recovery is the process of moving a table shard to |             |
|                                    | a different node or loading it from disk, e.g.     |             |
|                                    | during node startup (local gateway recovery),      |             |
|                                    | replication, shard rebalancing or snapshot         |             |
|                                    | recovery.                                          |             |
+------------------------------------+----------------------------------------------------+-------------+
| ``recovery['files']``              | Shards recovery statistic in files.                | ``OBJECT``  |
+------------------------------------+----------------------------------------------------+-------------+
| ``recovery['files']['percent']``   | Percentage of files already recovered.             | ``REAL``    |
+------------------------------------+----------------------------------------------------+-------------+
| ``recovery['files']['recovered']`` | Number of actual files recovered in the shard.     | ``INTEGER`` |
|                                    | Includes both existing and reused files.           |             |
+------------------------------------+----------------------------------------------------+-------------+
| ``recovery['files']['reused']``    | Total number of files reused from a local copy     | ``INTEGER`` |
|                                    | while recovering the shard.                        |             |
+------------------------------------+----------------------------------------------------+-------------+
| ``recovery['files']['used']``      | Total number of files in the shard.                | ``INTEGER`` |
+------------------------------------+----------------------------------------------------+-------------+
| ``recovery['size']``               | Shards recovery statistic in bytes.                | ``OBJECT``  |
+------------------------------------+----------------------------------------------------+-------------+
| ``recovery['size']['percent']``    | Percentage of bytes already recovered.             | ``REAL``    |
+------------------------------------+----------------------------------------------------+-------------+
| ``recovery['size']['recovered']``  | Number of actual bytes recovered in the shard.     | ``BIGINT``  |
|                                    | Includes both existing and reused bytes.           |             |
+------------------------------------+----------------------------------------------------+-------------+
| ``recovery['size']['reused']``     | Number of bytes reused from a local copy           | ``BIGINT``  |
|                                    | while recovering the shard.                        |             |
+------------------------------------+----------------------------------------------------+-------------+
| ``recovery['size']['used']``       | Total number of bytes in the shard.                | ``BIGINT``  |
+------------------------------------+----------------------------------------------------+-------------+
| ``recovery['stage']``              | Recovery stage:                                    | ``TEXT``    |
|                                    |                                                    |             |
|                                    | * init: Recovery has not started                   |             |
|                                    | * index: Reading the Lucene index meta-data and    |             |
|                                    |   copying bytes from source to destination         |             |
|                                    | * start: Starting the engine,                      |             |
|                                    |   opening the index for use                        |             |
|                                    | * translog: Replaying transaction log              |             |
|                                    | * finalize: Cleanup                                |             |
|                                    | * done: Complete                                   |             |
+------------------------------------+----------------------------------------------------+-------------+
| ``recovery['total_time']``         | Returns elapsed time from the start of the shard   | ``BIGINT``  |
|                                    | recovery.                                          |             |
+------------------------------------+----------------------------------------------------+-------------+
| ``recovery['type']``               | Recovery type:                                     | ``TEXT``    |
|                                    |                                                    |             |
|                                    | * gateway                                          |             |
|                                    | * snapshot                                         |             |
|                                    | * replica                                          |             |
|                                    | * relocating                                       |             |
+------------------------------------+----------------------------------------------------+-------------+
| ``relocating_node``                | The node ID which the shard is getting relocated   | ``TEXT``    |
|                                    | to at the time.                                    |             |
+------------------------------------+----------------------------------------------------+-------------+
| ``routing_state``                  | The current state of a shard as defined by the     | ``TEXT``    |
|                                    | routing.                                           |             |
|                                    |                                                    |             |
|                                    | Possible states of the shard routing are:          |             |
|                                    |                                                    |             |
|                                    | * UNASSIGNED,                                      |             |
|                                    | * INITIALIZING                                     |             |
|                                    | * STARTED                                          |             |
|                                    | * RELOCATING                                       |             |
+------------------------------------+----------------------------------------------------+-------------+
| ``schema_name``                    | The schema name.                                   | ``TEXT``    |
|                                    |                                                    |             |
|                                    | This will be "blob" for shards of blob tables and  |             |
|                                    | "doc" for shards of common tables without a        |             |
|                                    | defined schema.                                    |             |
+------------------------------------+----------------------------------------------------+-------------+
| ``size``                           | Current size in bytes.                             | ``BIGINT``  |
|                                    |                                                    |             |
|                                    | This value is cached for max. 10 seconds to reduce |             |
|                                    | file system access.                                |             |
+------------------------------------+----------------------------------------------------+-------------+
| ``state``                          | The current state of the shard.                    | ``TEXT``    |
|                                    |                                                    |             |
|                                    | Possible states are:                               |             |
|                                    |                                                    |             |
|                                    | * CREATED                                          |             |
|                                    | * RECOVERING                                       |             |
|                                    | * POST_RECOVERY                                    |             |
|                                    | * STARTED                                          |             |
|                                    | * RELOCATED                                        |             |
|                                    | * CLOSED                                           |             |
|                                    | * INITIALIZING                                     |             |
|                                    | * UNASSIGNED                                       |             |
+------------------------------------+----------------------------------------------------+-------------+
| ``table_name``                     | The table name.                                    | ``TEXT``    |
+------------------------------------+----------------------------------------------------+-------------+

.. NOTE::

   The ``sys.shards`` table is subject to :ref:`shard_table_permissions`.


Example
-------

For example, you can query shards like this::

  cr> select schema_name as schema,
  ...   table_name as t,
  ...   id,
  ...   partition_ident as p_i,
  ...   num_docs as docs,
  ...   primary,
  ...   relocating_node as r_n,
  ...   routing_state as r_state,
  ...   state,
  ...   orphan_partition as o_p
  ... from sys.shards where table_name = 'locations' and id = 1;
  +--------+-----------+----+-----+------+---------+------+---------+---------+-------+
  | schema | t         | id | p_i | docs | primary | r_n  | r_state |  state  | o_p   |
  +--------+-----------+----+-----+------+---------+------+---------+---------+-------+
  | doc    | locations |  1 |     |    8 | TRUE    | NULL | STARTED | STARTED | FALSE |
  +--------+-----------+----+-----+------+---------+------+---------+---------+-------+
  SELECT 1 row in set (... sec)

.. _jobs_operations_logs:

Jobs, Operations, and Logs
==========================

To let you inspect the activities currently taking place in a cluster, CrateDB
provides system tables that let you track current cluster jobs and operations.
See :ref:`Jobs Table <sys-jobs>` and :ref:`Operations Table<sys-operations>`.

Jobs and operations that finished executing are additionally recorded in
memory. There are two retention policies available to control how many records
should be kept.

One option is to configure the maximum number of records which should be kept.
Once the configured table size is reached, the older log records are deleted as
newer records are added. This is configurable using :ref:`stats.jobs_log_size
<stats.jobs_log_size>` and :ref:`stats.operations_log_size
<stats.operations_log_size>`.

Another option is to configure an expiration time for the records. In this
case, the records in the logs tables are periodically cleared if they are older
than the expiry time. This behaviour is configurable using
:ref:`stats.jobs_log_expiration <stats.jobs_log_expiration>` and
:ref:`stats.operations_log_expiration <stats.operations_log_expiration>`.

In addition to these retention policies, there is a memory limit in place
preventing these tables from taking up too much memory. The amount of memory
that can be used to store the jobs can be configured using
:ref:`stats.breaker.log.jobs.limit <stats.breaker.log.jobs.limit>` and
:ref:`stats.breaker.log.operations.limit <stats.breaker.log.operations.limit>`.
If the memory limit is reached, an error message will be logged and the log
table will be cleared completely.

It is also possible to define a filter which must match for jobs to be recorded
after they finished executing. This can be useful to only record slow queries
or queries that failed due to an error. This filter can be configured using the
:ref:`stats.jobs_log_filer <stats.jobs_log_filter>` setting.

Furthermore, there is a second filter setting which also results in a log entry
in the regular CrateDB log file for all finished jobs that match this filter.
This can be configured using :ref:`stats.jobs_log_persistent_filter
<stats.jobs_log_persistent_filter>`. This could be used to create a persistent
slow query log.


.. _sys-jobs:

Jobs
----

The ``sys.jobs`` table is a constantly updated view of all jobs that are
currently being executed in the cluster.

Table Schema
............

+------------------+--------------------------------------------------+------------------------------+
| Column Name      | Description                                      |  Return Type                 |
+==================+==================================================+==============================+
| ``id``           | The job UUID.                                    | ``TEXT``                     |
|                  |                                                  |                              |
|                  | This job ID is generated by the sytem.           |                              |
+------------------+--------------------------------------------------+------------------------------+
| ``node``         | Information about the node that created the job. | ``OBJECT``                   |
+------------------+--------------------------------------------------+------------------------------+
| ``node['id']``   | The id of the node.                              | ``TEXT``                     |
+------------------+--------------------------------------------------+------------------------------+
| ``node['name']`` | The name of the node.                            | ``TEXT``                     |
+------------------+--------------------------------------------------+------------------------------+
| ``started``      | The point in time when the job started.          | ``TIMESTAMP WITH TIME ZONE`` |
+------------------+--------------------------------------------------+------------------------------+
| ``stmt``         | Shows the data query or manipulation statement   | ``TEXT``                     |
|                  | represented by this job.                         |                              |
+------------------+--------------------------------------------------+------------------------------+
| ``username``     | The user who is executing the statement.         | ``TEXT``                     |
+------------------+--------------------------------------------------+------------------------------+

The field ``username`` corresponds to the :ref:`SESSION_USER <session_user>`
that is performing the query::

    cr> select stmt, username, started from sys.jobs where stmt like 'sel% from %jobs%';
    +---------------------------------------------------------------------------------+----------+-...-----+
    | stmt                                                                            | username | started |
    +---------------------------------------------------------------------------------+----------+-...-----+
    | select stmt, username, started from sys.jobs where stmt like 'sel% from %jobs%' | crate    | ...     |
    +---------------------------------------------------------------------------------+----------+-...-----+
    SELECT 1 row in set (... sec)

.. NOTE::

    If the :ref:`enterprise edition <enterprise-features>` is disabled or the
    user management module is not available, the ``username`` is represented as
    ``crate``.

Every request that queries data or manipulates data is considered a "job" if it
is a valid query. Requests that are not valid queries (for example, a request
that tries to query a non-existent table) will not show up as jobs.

.. _sys-jobs-metrics:

Jobs Metrics
------------

The ``sys.jobs_metrics`` table provides an overview of the query latency in the
cluster. Jobs metrics are not persisted across node restarts.

The metrics are aggregated for each node and each unique classification of the
statements.

.. note::

  In order to reduce the memory requirements for these metrics, the times are
  statistically sampled and therefore may have slight inaccuracies.
  In addition, durations are only tracked up to 10 minutes. Statements taking
  longer than that are capped to 10 minutes.


``sys.jobs_metrics`` Table Schema
.................................

+------------------------------+----------------------------------------------------+----------------------+
| Column Name                  | Description                                        |  Return Type         |
+==============================+====================================================+======================+
| ``node``                     | An object containing the id and name of the node   | ``OBJECT``           |
|                              | on which the metrics have been sampled.            |                      |
+------------------------------+----------------------------------------------------+----------------------+
| ``classification``           | An object containing the statement classification. | ``OBJECT``           |
+------------------------------+----------------------------------------------------+----------------------+
| ``classification['type']``   | The general type of the statement. Types are:      | ``TEXT``             |
|                              | ``INSERT``, ``SELECT``, ``UPDATE``, ``DELETE``,    |                      |
|                              | ``COPY``, ``DDL``, and ``MANAGEMENT``.             |                      |
+------------------------------+----------------------------------------------------+----------------------+
| ``classification['labels']`` | Labels are only available for certain statement    | ``TEXT_ARRAY``       |
|                              | types that can be classified more accurately than  |                      |
|                              | just by their type.                                |                      |
+------------------------------+----------------------------------------------------+----------------------+
| ``total_count``              | Total number of queries executed                   | ``BIGINT``           |
+------------------------------+----------------------------------------------------+----------------------+
| ``failed_count``             | Total number of queries that failed to complete    | ``BIGINT``           |
|                              | successfully.                                      |                      |
+------------------------------+----------------------------------------------------+----------------------+
| ``sum_of_durations``         | Sum of durations in ms of all executed queries per | ``BIGINT``           |
|                              | statement type.                                    |                      |
+------------------------------+----------------------------------------------------+----------------------+
| ``stdev``                    | The standard deviation of the query latencies      | ``DOUBLE PRECISION`` |
+------------------------------+----------------------------------------------------+----------------------+
| ``mean``                     | The mean query latency in ms                       | ``DOUBLE PRECISION`` |
+------------------------------+----------------------------------------------------+----------------------+
| ``max``                      | The maximum query latency in ms                    | ``BIGINT``           |
+------------------------------+----------------------------------------------------+----------------------+
| ``min``                      | The minimum query latency in ms                    | ``BIGINT``           |
+------------------------------+----------------------------------------------------+----------------------+
| ``percentiles``              | An object containing different percentiles         | ``OBJECT``           |
+------------------------------+----------------------------------------------------+----------------------+

Classification
..............

Certain statement types (such as ``SELECT`` statements) have additional labels
in their classification. These labels are the names of the logical plan
operators that are involved in the query.

For example, the following ``UNION`` statement::

    SELECT name FROM t1 where id = 1
    UNION ALL
    SELECT name FROM t2 where id < 2

would result in the following labels:

* ``Union``` for the UNION ALL
* ``Get`` for the left SELECT
* ``Collect`` for the right SELECT

.. note::

    Labels may be subject to change as they only represent internal properties
    of the statement!

.. _sys-operations:

Operations
----------

The ``sys.operations`` table is a constantly updated view of all operations
that are currently being executed in the cluster::

    cr> select node['name'], job_id, name, used_bytes from sys.operations
    ... order by name limit 1;
    +--------------+--------...-+-----...-+------------+
    | node['name'] | job_id     | name    | used_bytes |
    +--------------+--------...-+-----...-+------------+
    | crate        | ...        | ...     | ...        |
    +--------------+--------...-+-----...-+------------+
    SELECT 1 row in set (... sec)

An operation is a node-specific sub-component of a job (for when a job involves
multi-node processing). Jobs that do not require multi-node processing will not
produce any operations.

Table Schema
............

+------------------+---------------------------------------------------+------------------------------+
| Column Name      | Description                                       |  Return Type                 |
+==================+===================================================+==============================+
| ``id``           | The operation UUID.                               | ``TEXT``                     |
|                  |                                                   |                              |
|                  | This operation ID is generated by the sytem.      |                              |
+------------------+---------------------------------------------------+------------------------------+
| ``job_id``       | The job id this operation belongs to.             | ``TEXT``                     |
+------------------+---------------------------------------------------+------------------------------+
| ``name``         | The name of the operation.                        | ``TEXT``                     |
+------------------+---------------------------------------------------+------------------------------+
| ``node``         | Information about the node that created the       | ``OBJECT``                   |
|                  | operation.                                        |                              |
+------------------+---------------------------------------------------+------------------------------+
| ``node['id']``   | The id of the node.                               | ``TEXT``                     |
+------------------+---------------------------------------------------+------------------------------+
| ``node['name']`` | The name of the node.                             | ``TEXT``                     |
+------------------+---------------------------------------------------+------------------------------+
| ``started``      | The point in time when the operation started.     | ``TIMESTAMP WITH TIME ZONE`` |
+------------------+---------------------------------------------------+------------------------------+
| ``used_bytes``   | Currently loaded amount of data by the operation. | ``BIGINT``                   |
+------------------+---------------------------------------------------+------------------------------+

.. NOTE::

    In some cases, operations are generated for internal CrateDB work that does
    not directly correspond to a user request. These entries do not have
    corresponding entries in ``sys.jobs``.

.. _sys-logs:

Logs
----

The :ref:`sys.jobs <sys-jobs>` and :ref:`sys.operations <sys-operations>` tables
have corresponding log tables: ``sys.jobs_log`` and ``sys.operations_log``.

``sys.jobs_log`` Table Schema
.............................

+------------------------------+---------------------------------------+------------------------------+
| Column Name                  | Description                           | Return Type                  |
+==============================+=======================================+==============================+
| ``id``                       | The job ID.                           | ``TEXT``                     |
+------------------------------+---------------------------------------+------------------------------+
| ``ended``                    | The point in time when the job        | ``TIMESTAMP WITH TIME ZONE`` |
|                              | finished.                             |                              |
+------------------------------+---------------------------------------+------------------------------+
| ``error``                    | If the job encountered an error,      | ``TEXT``                     |
|                              | this will hold the error message.     |                              |
+------------------------------+---------------------------------------+------------------------------+
| ``started``                  | The point in time when the job        | ``TIMESTAMP WITH TIME ZONE`` |
|                              | started.                              |                              |
+------------------------------+---------------------------------------+------------------------------+
| ``stmt``                     | Shows the data query or manipulation  | ``TEXT``                     |
|                              | statement executed by the job.        |                              |
+------------------------------+---------------------------------------+------------------------------+
| ``username``                 | The user who executed the statement.  | ``TEXT``                     |
+------------------------------+---------------------------------------+------------------------------+
| ``classification``           | An object containing the statement    | ``OBJECT``                   |
|                              | classification.                       |                              |
+------------------------------+---------------------------------------+------------------------------+
| ``classification['type']``   | The general type of the statement.    | ``TEXT``                     |
|                              | Types are: ``INSERT``, ``SELECT``,    |                              |
|                              | ``UPDATE``, ``DELETE``,``COPY``,      |                              |
|                              | ``DDL``, and ``MANAGEMENT``.          |                              |
+------------------------------+---------------------------------------+------------------------------+
| ``classification['labels']`` | Labels are only available for certain | ``TEXT_ARRAY``               |
|                              | statement types that can be           |                              |
|                              | classified  more accurately than just |                              |
|                              | by their type.                        |                              |
+------------------------------+---------------------------------------+------------------------------+


.. note::

  You can control which jobs are recorded using the :ref:`stats.jobs_log_filter
  <stats.jobs_log_filter>`


``sys.operations_log`` Table Schema
...................................

+----------------+--------------------------------------------------+------------------------------+
| Column Name    | Description                                      |  Return Type                 |
+================+==================================================+==============================+
| ``id``         | The operation ID.                                | ``TEXT``                     |
+----------------+--------------------------------------------------+------------------------------+
| ``job_id``     | The job id.                                      | ``TEXT``                     |
+----------------+--------------------------------------------------+------------------------------+
| ``ended``      | The point in time when the operation finished.   | ``TIMESTAMP WITH TIME ZONE`` |
+----------------+--------------------------------------------------+------------------------------+
| ``error``      | If the operation encountered an error, this will | ``TEXT``                     |
|                | hold the error message.                          |                              |
+----------------+--------------------------------------------------+------------------------------+
| ``name``       | The name of the operation.                       | ``TEXT``                     |
+----------------+--------------------------------------------------+------------------------------+
| ``started``    | The point in time when the operation started.    | ``TIMESTAMP WITH TIME ZONE`` |
+----------------+--------------------------------------------------+------------------------------+
| ``used_bytes`` | The amount of data loaded by the operation.      | ``BIGINT``                   |
+----------------+--------------------------------------------------+------------------------------+

After a job or operation finishes, the corresponding entry will be moved into
the corresponding log table::

    cr> select id, stmt, username, started, ended, error
    ... from sys.jobs_log order by ended desc limit 2;
    +-...+----------------------------------------------...-+----------+-...-----+-...---+-------+
    | id | stmt                                             | username | started | ended | error |
    +-...+----------------------------------------------...-+----------+-...-----+-...---+-------+
    | ...| select node['name'], ...                         | crate    | ...     | ...   |  NULL |
    | ...| select stmt, username, started from sys.jobs ... | crate    | ...     | ...   |  NULL |
    +-...+----------------------------------------------...-+----------+-...-----+-...---+-------+
    SELECT 2 rows in set (... sec)

Invalid queries are also logged in the ``sys.jobs_log`` table, i.e. queries
that never make it to the ``sys.jobs`` table because they could not be
executed.

The log tables are bound by a fixed size
(:ref:`stats.jobs_log_size <stats.jobs_log_size>`) or by an expiration time
(:ref:`stats.jobs_log_expiration <stats.jobs_log_expiration>`)

See :ref:`conf_collecting_stats` for information on how to configure logs.

.. CAUTION::

   If you deactivate statistics tracking, the logs tables will be truncated.

.. _sys-checks:

Cluster Checks
==============

The table ``sys.checks`` exposes a list of internal cluster checks and results
of their validation.

The ``sys.checks`` table looks like this:

+------------------+-----------------------------------+-------------+
| Column Name      | Description                       | Return Type |
+==================+===================================+=============+
| ``id``           | The unique check id.              | ``INTEGER`` |
+------------------+-----------------------------------+-------------+
| ``severity``     | The level of severity.            | ``INTEGER`` |
|                  | The higher the value of the field |             |
|                  | the higher severity.              |             |
+------------------+-----------------------------------+-------------+
| ``description``  | The description message for the   | ``TEXT``    |
|                  | setting check.                    |             |
+------------------+-----------------------------------+-------------+
| ``passed``       | The flag determines whether the   | ``BOOLEAN`` |
|                  | check for the setting has passed. |             |
+------------------+-----------------------------------+-------------+

Here's an example query::

  cr> select id, description from sys.checks order by id;
  +----+--------------------------------------------------------------...-+
  | id | description                                                      |
  +----+--------------------------------------------------------------...-+
  |  2 | The total number of partitions of one or more partitioned tab... |
  |  3 | The following tables need to be upgraded for compatibility wi... |
  |  6 | Your CrateDB license is valid. Enjoy CrateDB!                    |
  +----+--------------------------------------------------------------...-+
  SELECT 3 rows in set (... sec)

Cluster checks are also indicated in the CrateDB `admin console`_. When all
cluster checks (and all :ref:`sys-node-checks`) pass, the *Checks* icon will be
green. Here's what it looks like when some checks are failing at the *CRITICAL*
severity level:

.. figure:: ../_static/cluster-checks-critical.png
   :align: center

.. _admin console: https://crate.io/docs/connect/admin_ui/

Current Checks
--------------

Minimum Master Nodes
....................

The check for the :ref:`discovery.zen.minimum_master_nodes
<discovery.zen.minimum_master_nodes>` setting verifies that the minimum number
of nodes is equal/greater than the half of maximum number of nodes in the
cluster.

::

  (N / 2) + 1 <= M

where ``N`` is the number of nodes in the cluster, and ``M`` is the value of
the setting :ref:`discovery.zen.minimum_master_nodes
<discovery.zen.minimum_master_nodes>`.

You can change the value (via :ref:`ref-set`) permanently by issuing the
following SQL statement::

  SET GLOBAL PERSISTENT discovery.zen.minimum_master_nodes = M;

Number of Partitions
....................

This check warns if any :ref:`partitioned table <partitioned_tables>` has more
than 1000 partitions to detect the usage of a high cardinality field for
partitioning.

Tables Need to Be Upgraded
..........................

.. WARNING::

   Do not attempt to upgrade your cluster if this cluster check is failing.
   Follow the instructions below to get this cluster check passing.

This check warns you if there are tables that need to be upgraded for
compatibility with future versions of CrateDB.

For tables that need upgrading, use the :ref:`sql_ref_optimize` command to
perform a :ref:`optimize_segments_upgrade`.

For each table, run a command like so::

  OPTIMIZE TABLE table_ident WITH (upgrade_segments=true);

Here, replace ``table_ident`` with the name of the table you are upgrading.

When all tables that needed upgrading have been upgraded, this cluster check
should pass.

.. NOTE::

   Snapshots of your tables created prior to them being upgraded will not work
   with future versions of CrateDB. For this reason, you should create a new
   snapshot for each of your tables. (See :ref:`snapshot-restore`.)

License check
.............

This check warns you when your license is close to expiration, is already
expired, or if the cluster contains more nodes than allowed by your license. It
will yield a ``MEDIUM`` alert when your license is valid for less than 15 days
and a ``HIGH`` alert when your license is valid for less than a day.
All other cases, like `already expired` or `max-nodes-violation`, it will
result in a ``HIGH`` alert. We recommend that you request a new license when
this check triggers, in order to avoid the situation where operations are
rejected due to an invalid license.

.. NOTE::

   This check is not active when running the CrateDB Community Edition as no
   license is supported.

.. _sys-health:

Health
======

The ``sys.health`` table lists the `health` of each table and table
partition. The `health` is computed by checking the states of the shard of each
table/partition.

+----------------------------+------------------------------------+--------------+
| Column Name                | Description                        | Return Type  |
+============================+====================================+==============+
| ``table_name``             | The table name.                    | ``TEXT``     |
+----------------------------+------------------------------------+--------------+
| ``table_schema``           | The schema of the table.           | ``TEXT``     |
+----------------------------+------------------------------------+--------------+
| ``partition_ident``        | The `ident` of the partition.      | ``TEXT``     |
|                            | NULL for non-partitioned tables.   |              |
+----------------------------+------------------------------------+--------------+
| ``health``                 | The health label.                  | ``TEXT``     |
|                            | Can be RED, YELLOW or GREEN.       |              |
+----------------------------+------------------------------------+--------------+
| ``severity``               | The health as a ``smallint`` value.| ``SMALLINT`` |
|                            | Useful when ordering on health.    |              |
+----------------------------+------------------------------------+--------------+
| ``missing_shards``         | The number of not assigned or      | ``INTEGER``  |
|                            | started shards.                    |              |
+----------------------------+------------------------------------+--------------+
| ``underreplicated_shards`` | The number of shards which are     | ``INTEGER``  |
|                            | not fully replicated.              |              |
+----------------------------+------------------------------------+--------------+

Both ``missing_shards`` and ``underreplicated_shards`` might return ``-1`` if
the cluster is in an unhealthy state that prevents the exact number from being
calculated. This could be the case when the cluster can't elect a master,
because there are not enough eligible nodes available.

::

    cr> select * from sys.health order by severity desc, table_name;
    +--------+----------------+-----------------+----------+------------+--------------+------------------------+
    | health | missing_shards | partition_ident | severity | table_name | table_schema | underreplicated_shards |
    +--------+----------------+-----------------+----------+------------+--------------+------------------------+
    | GREEN  |              0 |                 |        1 | locations  | doc          |                      0 |
    | GREEN  |              0 |                 |        1 | quotes     | doc          |                      0 |
    +--------+----------------+-----------------+----------+------------+--------------+------------------------+
    SELECT 2 rows in set (... sec)

The `health` with the highest `severity` will always define the `health` of the
query scope.

Example of getting a `cluster health` (`health` of all tables):

::

    cr> select health from sys.health order by severity desc limit 1;
    +--------+
    | health |
    +--------+
    | GREEN  |
    +--------+
    SELECT 1 row in set (... sec)

.. _sys-health-def:

Health Definition
-----------------

+------------+---------------------------------------------------+
| Health     | Description                                       |
+============+===================================================+
| ``RED``    | At least one primary shard is missing (primary    |
|            | shard not started or unassigned).                 |
+------------+---------------------------------------------------+
| ``YELLOW`` | At least one shard is underreplicated (replica    |
|            | shard not started or unassigned).                 |
+------------+---------------------------------------------------+
| ``GREEN``  | All primary and replica shards have been started. |
+------------+---------------------------------------------------+

.. NOTE::

   The ``sys.health`` table is subject to :ref:`shard_table_permissions` as it
   will expose a summary of table shard states.

.. _sys-repositories:

Repositories
============

The table ``sys.repositories`` lists all configured repositories that can be
used to create, manage and restore snapshots (see :ref:`snapshot-restore`).

+---------------+-----------------------------------+-------------+
| Column Name   | Description                       | Return Type |
+===============+===================================+=============+
| ``name``      | The repository name               | ``TEXT``    |
+---------------+-----------------------------------+-------------+
| ``type``      | The type of the repository        | ``TEXT``    |
|               | determining how and where the     |             |
|               | repository stores its snapshots.  |             |
+---------------+-----------------------------------+-------------+
| ``settings``  | The configuration settings the    | ``OBJECT``  |
|               | repository has been created       |             |
|               | with. The specific settings       |             |
|               | depend on the repository type,    |             |
|               | see :ref:`ref-create-repository`. |             |
+---------------+-----------------------------------+-------------+

.. Hidden: create repository

   cr> CREATE REPOSITORY "my_repo" TYPE "fs"
   ... WITH (max_restore_bytes_per_sec='1000b', location='repo_location', compress=true);
   CREATE OK, 1 row affected (... sec)

::

    cr> SELECT name, type, settings FROM sys.repositories
    ... ORDER BY name;
    +---------+------+---------------------------------------------------...--+
    | name    | type | settings                                               |
    +---------+------+---------------------------------------------------...--+
    | my_repo | fs   | {"compress": "true", "location": "repo_location", ...} |
    +---------+------+---------------------------------------------------...--+
    SELECT 1 row in set (... sec)

.. _sys-snapshots:

Snapshots
=========

The table ``sys.snapshots`` lists all existing snapshots in all configured
repositories (see :ref:`snapshot-restore`).

+----------------------+----------------------------------+------------------------------+
| Column Name          | Description                      | Return Type                  |
+======================+==================================+==============================+
| ``name``             | The name of the snapshot         | ``TEXT``                     |
+----------------------+----------------------------------+------------------------------+
| ``repository``       | The name of the repository that  | ``TEXT``                     |
|                      | contains this snapshot.          |                              |
+----------------------+----------------------------------+------------------------------+
| ``concrete_indices`` | Contains the names of all        | ``ARRAY``                    |
|                      | tables and partitions that are   |                              |
|                      | contained in this snapshot       |                              |
|                      | how they are represented         |                              |
|                      | as ES index names.               |                              |
+----------------------+----------------------------------+------------------------------+
| ``started``          | The point in time when the       | ``TIMESTAMP WITH TIME ZONE`` |
|                      | creation of the snapshot         |                              |
|                      | started. Changes made after      |                              |
|                      | that are not stored in this      |                              |
|                      | snapshot.                        |                              |
+----------------------+----------------------------------+------------------------------+
| ``finished``         | The point in time when the       | ``TIMESTAMP WITH TIME ZONE`` |
|                      | snapshot creation finished.      |                              |
+----------------------+----------------------------------+------------------------------+
| ``state``            | The current state of the         | ``TEXT``                     |
|                      | snapshot. One of:                |                              |
|                      | ``IN_PROGRESS``, ``SUCCESS``,    |                              |
|                      | ``PARTIAL``, or ``FAILED``.      |                              |
+----------------------+----------------------------------+------------------------------+
| ``version``          | An internal version this         | ``TEXT``                     |
|                      | snapshot was created with.       |                              |
+----------------------+----------------------------------+------------------------------+

Snapshot/Restore operates on a per-shard basis. Hence, the ``state`` column
indicates whether all (``SUCCESS``), some (``PARTIAL``), or no
shards(``FAILED``) have been backed up. ``PARTIAL`` snapshots are the result of
some primaries becoming unavailable while taking the snapshot when there are no
replicas at hand (cluster state is *RED*). If there are replicas of the (now
unavailable) primaries (cluster state is *YELLOW*) the snapshot succeeds and
all shards are included (state ``SUCCESS``). Building on a ``PARTIAL`` snapshot
will include all primaries again.

.. WARNING::

    In case of a ``PARTIAL`` state another snapshot should be created in order
    to guarantee a full backup! Only ``SUCCESS`` includes all shards.

The ``concrete_indices`` column contains the names of all Elasticsearch indices
that were stored in the snapshot. A *normal* CrateDB table maps to one
Elasticsearch index, a partitioned table maps to one Elasticsearch index per
partition. The mapping follows the following pattern:

+-----------------------------------------+------------------------------------------+
| CrateDB table / partition name          | ``concrete_indices`` entry               |
+=========================================+==========================================+
| ``doc.my_table``                        | ``my_table``                             |
+-----------------------------------------+------------------------------------------+
| ``my_schema.my_table``                  | ``my_schema.my_table``                   |
+-----------------------------------------+------------------------------------------+
| ``doc.parted_table`` (value=null)       | ``.partitioned.my_table.0400``           |
+-----------------------------------------+------------------------------------------+
| ``my_schema.parted_table`` (value=null) | ``my_schema..partitioned.my_table.0400`` |
+-----------------------------------------+------------------------------------------+

.. Hidden: create snapshots

   cr> CREATE SNAPSHOT "my_repo"."my_snapshot" ALL
   ... WITH (ignore_unavailable=true, wait_for_completion=true);
   CREATE OK, 1 row affected (... sec)

::

    cr> SELECT "repository", name, state, concrete_indices
    ... FROM sys.snapshots order by "repository", name;
    +------------+-------------+---------+-----------------...-+
    | repository | name        | state   | concrete_indices    |
    +------------+-------------+---------+-----------------...-+
    | my_repo    | my_snapshot | SUCCESS | [...]               |
    +------------+-------------+---------+-----------------...-+
    SELECT 1 row in set (... sec)

.. Hidden: drop snapshot

    cr> DROP SNAPSHOT "my_repo"."my_snapshot";
    DROP OK, 1 row affected (... sec)

.. Hidden: drop repository

    cr> DROP REPOSITORY "my_repo";
    DROP OK, 1 row affected (... sec)

.. _sys-summits:

Summits
=======

The ``sys.summits`` table contains the information about the mountains in the
Alps higher than 2000m. The mountain names from the table are also used to
generate random nodes names.

.. _sys-users:

Users
=====

The ``sys.users`` table contains all existing database users in the cluster.
The table is only available in the CrateDB `Enterprise Edition`_.

+---------------+----------------------------------------------+-------------+
| Column Name   | Description                                  | Return Type |
+===============+==============================================+=============+
| ``name``      | The name of the database user.               | ``TEXT``    |
+---------------+----------------------------------------------+-------------+
| ``superuser`` | BOOLEAN flag to indicate whether the user    | ``BOOLEAN`` |
|               | is a superuser.                              |             |
+---------------+----------------------------------------------+-------------+

.. _sys-allocations:

Allocations
===========

The ``sys.allocations`` table contains information about shards and their
allocation state. The table contains:

* shards that are unassigned and why they are unassigned
* shards that are assigned but cannot be moved or rebalanced and why they
  remain on their current node

It can help to identify problems if shard allocations behave different than
expected, e.g. when a shard stays unassigned or a shard does not move off a
node.

+-------------------------------+-------------------------------+-------------+
| Column Name                   | Description                   | Return Type |
+===============================+===============================+=============+
| ``table_schema``              | Schema name of the table of   | ``TEXT``    |
|                               | the shard.                    |             |
+-------------------------------+-------------------------------+-------------+
| ``table_name``                | Table name of the shard.      | ``TEXT``    |
+-------------------------------+-------------------------------+-------------+
| ``partition_ident``           | Identifier of the partition   | ``TEXT``    |
|                               | of the shard.                 |             |
|                               | ``NULL`` if the table is not  |             |
|                               | partitioned.                  |             |
+-------------------------------+-------------------------------+-------------+
| ``shard_id``                  | ID of the effected shard.     | ``INTEGER`` |
+-------------------------------+-------------------------------+-------------+
| ``node_id``                   | ID of the node on which the   | ``TEXT``    |
|                               | shard resides. ``NULL`` if    |             |
|                               | the shard is unassigned.      |             |
+-------------------------------+-------------------------------+-------------+
| ``primary``                   | Whether the shard is a        | ``BOOLEAN`` |
|                               | primary shard.                |             |
+-------------------------------+-------------------------------+-------------+
| ``current_state``             | Current state of the shard.   | ``TEXT``    |
|                               | Possible states are:          |             |
|                               | ``UNASSIGNED``,               |             |
|                               | ``INITIALIZING``,             |             |
|                               | ``STARTED``,                  |             |
|                               | ``RELOCATING``                |             |
+-------------------------------+-------------------------------+-------------+
| ``explanation``               | Explanation why the shard     | ``TEXT``    |
|                               | cannot be allocated, moved    |             |
|                               | or rebalanced.                |             |
+-------------------------------+-------------------------------+-------------+
| ``decisions``                 | A list of decisions that      | ``ARRAY``   |
|                               | describe in detail why the    |             |
|                               | shard in the current state.   |             |
+-------------------------------+-------------------------------+-------------+
| ``decisions['node_id']``      | ID of the node of the         | ``TEXT``    |
|                               | decision.                     |             |
+-------------------------------+-------------------------------+-------------+
| ``decisions['node_name']``    | Name of the node of the       | ``TEXT``    |
|                               | decision.                     |             |
+-------------------------------+-------------------------------+-------------+
| ``decisions['explanations']`` | Detailed list of human        | ``ARRAY``   |
|                               | readable explanations why the |             |
|                               | node decided whether to       |             |
|                               | allocate or rebalance the     |             |
|                               | shard. Returns ``NULL`` if    |             |
|                               | there is no need to rebalance |             |
|                               | the shard.                    |             |
+-------------------------------+-------------------------------+-------------+

.. NOTE::

   The ``sys.allocations`` table is subject to :ref:`shard_table_permissions`.

.. _shard_table_permissions:

Shard Table Permissions
=======================

Accessing tables that return shards (``sys.shards``, ``sys.allocations``) is
subjected to the same privileges constraints as the other tables. Namely, in
order to query them, the connected user needs to have the ``DQL`` privilege on
that particular table, either directly or inherited from the ``SCHEMA`` or
``CLUSTER`` (for more information on privileges inheritance see
:ref:`Hierarchical Inheritance of Privileges
<hierarchical_privileges_inheritance>`).

However, being able to query shard returning system tables will not allow the
user to retrieve all the rows in the table, as they may contain information
related to tables, which the connected user does not have any privileges for.
The only rows that will be returned will be the ones the user is allowed to
access.

For example, if the user ``john`` has any privilege on the ``doc.books`` table
but no privilege at all on ``doc.locations``, when ``john`` issues a
``SELECT * FROM sys.shards`` statement, the shards information related to the
``doc.locations`` table will not be returned.

Before Upgrading
================

In certain cases, for compatibility with future versions of CrateDB,
you need to perform some actions before upgrading to a new CrateDB version.

Tables Need to Be Recreated
---------------------------

The following should be performed if there are tables
that need to be recreated for compatibility with future versions of CrateDB.

For tables that need recreating, use :ref:`ref-show-create-table` to get the
SQL statement needed to restore the table, like so::

  SHOW CREATE TABLE table_ident;

Here, ``table_ident`` is the name of the table you want to recreate.

Copy the output of this command, replace the ``table_ident`` with
``table_ident_new``, and execute it to create a new table identical to the one
you want to recreate.

Make sure you stop inserting data to the original ``table_ident`` by
executing::

  ALTER TABLE table_ident SET ("blocks.read_only" = true);

Copy the data from the original table to the new one by executing::

  INSERT INTO table_ident_new (col1, col2, ...)
     (SELECT col1, col2, ... FROM table_ident);

Make sure that you include all columns and that the columns appear in the same
order in both lists.

Execute refresh on the new table like so::

  REFRESH TABLE table_ident_new;

Make sure table the new table and the old table have the same data.

Drop the original table by executing::

  ALTER TABLE table_ident SET ("blocks.read_only" = false);

::

  DROP TABLE table_ident;

Rename the new table back to its original name::

  ALTER TABLE table_ident_new RENAME TO table_ident;


.. _configuration: ../configuration.html
.. _Enterprise Edition: https://crate.io/enterprise/
