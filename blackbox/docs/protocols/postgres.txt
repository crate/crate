
======================
Postgres Wire Protocol
======================

Crate contains experimental support for the `PostgreSQL wire protocol v3`_.

By default this protocol is **disabled**. To enable it set ``psql.enabled`` to
true.

If a node is started with postgres support enabled it will by default bind to
``0.0.0.0:5432``. See :doc:`Configuration <../configuration>` for options to
change that.

The SQL dialect that Crate supports is different to the SQL dialect that
PostgreSQL supports. So even though the wire protocol is supported it doesn't
imply that any postgres client can be used as those clients may use SQL
statements which aren't supported.

One notable difference is that Crate doesn't support transactions.
Therefore clients should generally enable ``autocommit``.

.. note::

    In order to use ``setFetchSize`` in JDBC it is possible to set autocommit
    to false.
    The client will utilize the fetchSize on SELECT statements and only load up
    to fetchSize rows into memory.
    See `PostgreSQL JDBC Query docs
    <https://jdbc.postgresql.org/documentation/head/query.html>` for more
    information.

    Write operations will still behave as if autocommit was enabled and commit
    or rollback calls are ignored.


Compatibility & Implementation Status
-------------------------------------

Crate emulates server version ``9.5``

Start-up
~~~~~~~~

The connection handshake is implemented without authentication support. Crate
will always respond with ``AuthenticationOK``.
If a Client sends a SSLRequest the server will answer with ``N`` to indicate
that it doesn't support SSL.

The ``database`` name a client sends will be used as default schema as Crate
doesn't have database support.

The server will inform the Client that ``UTF8`` encoding should be used. Any
other encoding is not supported.

Simple Query
~~~~~~~~~~~~

The `Simple Query`_ protocol is implemented with the following limitations:

- The ``query`` may only contain one query. Sending multiple queries with one
  message is not supported.


Extended Query
~~~~~~~~~~~~~~

The `Extended Query`_ protocol is implemented with the following limitations:

- ``describe`` messages for an unbound prepared statement always result in a
  ``NoData`` message instead of a ``ParameterDescription``.

- In order to optimize the execution of bulk operations the execution of
  statements is delayed until the ``Sync`` message is received

Copy Operations
~~~~~~~~~~~~~~~

The COPY sub-protocol is not supported as this lacks corresponding SQL support
in Crate.

Function Call
~~~~~~~~~~~~~

The Function call sub-protocol is not supported as this is considered a legacy
feature.

Canceling Requests in Progress
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Operations can be cancelled using the ``KILL`` statement. There is no support
for the ``CancelRequest`` message and the Server also won't send a
``BackendKeyData`` message during connection initialization.


pg_type
~~~~~~~

Some clients require the `pg_catalog.pg_type` in order to be able to stream
arrays or other non-primitive types.

For compatibility reasons there is a trimmed down `pg_type` table available in
Crate::

    cr> select * from pg_catalog.pg_type order by oid;
    +------+----------+---------+-------------+
    |  oid | typdelim | typelem | typname     |
    +------+----------+---------+-------------+
    |   16 | ,        |       0 | bool        |
    |   18 | ,        |       0 | char        |
    |   20 | ,        |       0 | int8        |
    |   21 | ,        |       0 | int2        |
    |   23 | ,        |       0 | int4        |
    |  114 | ,        |       0 | json        |
    |  700 | ,        |       0 | float4      |
    |  701 | ,        |       0 | float8      |
    | 1000 | ,        |      16 | _bool       |
    | 1002 | ,        |      18 | _char       |
    | 1005 | ,        |      21 | _int2       |
    | 1007 | ,        |      23 | _int4       |
    | 1015 | ,        |    1043 | _varchar    |
    | 1016 | ,        |      20 | _int8       |
    | 1021 | ,        |     700 | _float4     |
    | 1022 | ,        |     701 | _float8     |
    | 1043 | ,        |       0 | varchar     |
    | 1184 | ,        |       0 | timestampz  |
    | 1185 | ,        |    1184 | _timestampz |
    +------+----------+---------+-------------+
    SELECT 19 rows in set (... sec)


Connection failover and load balancing
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Connection failover and load balancing is supported as described here:
`PostgreSQL JDBC connection failover`_.

.. note::

    **targetServerType** parameter shouldn't be used as for Crate there is no distinction between
    master and slave nodes.


.. _PostgreSQL wire protocol v3: https://www.postgresql.org/docs/current/static/protocol.html
.. _Simple Query: https://www.postgresql.org/docs/current/static/protocol-flow.html#AEN108745
.. _Extended Query: https://www.postgresql.org/docs/current/static/protocol-flow.html#PROTOCOL-FLOW-EXT-QUERY
.. _PostgreSQL JDBC connection failover: https://jdbc.postgresql.org/documentation/head/connect.html#connection-failover
