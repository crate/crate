.. _postgres_wire_protocol:

======================
Postgres Wire Protocol
======================

.. rubric:: Table of Contents

.. contents::
   :local:

Introduction
============

CrateDB contains experimental support for the `PostgreSQL wire protocol v3`_.

If a node is started with postgres support enabled it will bind to port
``5432`` by default. To use a custom port, set the corresponding
:ref:`conf_ports` in the :ref:`Configuration <config>`.

However, even though connecting PostgreSQL tools and client libraries is
supported, the actual SQL statements have to be supported by CrateDB's SQL
dialect. A notable difference is that CrateDB doesn't support transactions,
which is why clients should generally enable ``autocommit``.

.. NOTE::

    In order to use ``setFetchSize`` in JDBC it is possible to set autocommit
    to false.

    The client will utilize the fetchSize on SELECT statements and only load up
    to fetchSize rows into memory.

    See `PostgreSQL JDBC Query docs
    <https://jdbc.postgresql.org/documentation/head/query.html>` for more
    information.

    Write operations will still behave as if autocommit was enabled and commit
    or rollback calls are ignored.

Server Compatibility and Implementation Status
==============================================

CrateDB emulates PostgreSQL server version ``9.5``.

Start-Up
--------

SSL Support
...........

SSL support is only available in the `Enterprise Edition`_. If enterprise is
disabled, all ``SSLRequests`` are answered with ``N``, indicating to the client
that SSL is not available.

.. SEEALSO::

  :ref:`admin_ssl`

Authentication
..............

If the `Enterprise Edition`_ is enabled, authentication methods can be
configured using :ref:`admin_hba`.

If the enterprise functionality is disabled, all "start up" requests are
answered with an ``AuthenticationOK`` response.

ParameterStatus
...............

After the authentication has succeeded the server has the possibility to send
multiple ``ParameterStatus`` messages to the client.
These are used to communicate information like ``server_version`` (emulates
PostgreSQL 9.5) or ``server_encoding``.

``CrateDB`` also sends a message containing the ``crate_version`` parameter.
This contains the current ``CrateDB`` version number.

This information is useful for clients to detect that they're connecting to
``CrateDB`` instead of a PostgreSQL instance.

Database selection
..................

Since CrateDB uses schemas instead of databases, the ``database`` parameter
sets the default schema name for future queries. If no schema is specified, the
schema ``doc`` will be used as default. Additionally, the only supported charset
is ``UTF8``.

Simple Query
------------

The `Simple Query`_ protocol is implemented with the following limitations:

- The ``query`` may only contain one query. Sending multiple queries with one
  message is not supported.

Extended Query
--------------

The `Extended Query`_ protocol is implemented with the following limitations:

- The ``ParameterDescription`` message works for the most common use cases
  except for DDL statements.

- To optimize the execution of bulk operations the execution of statements is
  delayed until the ``Sync`` message is received

Copy Operations
---------------

CrateDB does not support the ``COPY`` sub-protocol.

Function Call
-------------

The function call sub-protocol is not supported since it's a legacy feature.

Canceling Requests
------------------

Operations can be cancelled using the ``KILL`` statement, hence the
``CancelRequest`` message  is unsupported. Consequently, the server won't send
a ``BackendKeyData`` message during connection initialization.

``pg_type``
-----------

Some clients require the `pg_catalog.pg_type` in order to be able to stream
arrays or other non-primitive types.

For compatibility reasons there is a trimmed down `pg_type` table available in
CrateDB::

    cr> select * from pg_catalog.pg_type order by oid;
    +------+----------+---------+-------------+---------+
    |  oid | typdelim | typelem | typname     | typtype |
    +------+----------+---------+-------------+---------+
    |   16 | ,        |       0 | bool        | b       |
    |   18 | ,        |       0 | char        | b       |
    |   20 | ,        |       0 | int8        | b       |
    |   21 | ,        |       0 | int2        | b       |
    |   23 | ,        |       0 | int4        | b       |
    |  114 | ,        |       0 | json        | b       |
    |  199 | ,        |     114 | _json       | b       |
    |  700 | ,        |       0 | float4      | b       |
    |  701 | ,        |       0 | float8      | b       |
    | 1000 | ,        |      16 | _bool       | b       |
    | 1002 | ,        |      18 | _char       | b       |
    | 1005 | ,        |      21 | _int2       | b       |
    | 1007 | ,        |      23 | _int4       | b       |
    | 1015 | ,        |    1043 | _varchar    | b       |
    | 1016 | ,        |      20 | _int8       | b       |
    | 1021 | ,        |     700 | _float4     | b       |
    | 1022 | ,        |     701 | _float8     | b       |
    | 1043 | ,        |       0 | varchar     | b       |
    | 1184 | ,        |       0 | timestampz  | b       |
    | 1185 | ,        |    1184 | _timestampz | b       |
    +------+----------+---------+-------------+---------+
    SELECT 20 rows in set (... sec)

Show Transaction Isolation
--------------------------

For compatibility with JDBC the `SHOW TRANSACTION ISOLATION LEVEL` statement is
implemented::

    cr> show transaction isolation level;
    +-----------------------+
    | transaction_isolation |
    +-----------------------+
    | read uncommitted      |
    +-----------------------+
    SHOW 1 row in set (... sec)

Client Compatibility
====================

JDBC
----

`pgjdbc`_ JDBC drivers version ``9.4.1209`` and above are compatible.

Limitations
...........

- *reflection* methods like ``conn.getMetaData().getTables(...)`` won't work
  since the required tables are unavailable in CrateDB.

  As a workaround it's possible to use ``SHOW TABLES`` or query the
  ``information_schema`` tables manually using ``SELECT`` statements.

- ``OBJECT`` and ``GEO_SHAPE`` columns can be streamed as ``JSON`` but require
  `pgjdbc`_ version ``9.4.1210`` or newer.

- Multidimensional arrays will be streamed as ``JSON`` encoded string to avoid
  a protocol limitation where all sub-arrays are required to have the same
  length.

- The behavior of ``PreparedStatement.executeBatch`` in error cases depends on
  in which stage an error occurs: A ``BatchUpdateException`` is thrown if no
  processing has been done yet, whereas single operations failing after the
  processing started are indicated by an ``EXECUTE_FAILED`` (-3) return value.

- Transaction limitations as described above.

- Having ``escape processing`` enabled could prevent the usage of :ref:`Object
  Literals <data-type-object-literals>` in case an object key's starting
  character clashes with a JDBC escape keyword (see also `JDBC escape syntax
  <https://docs.oracle.com/javadb/10.10.1.2/ref/rrefjdbc1020262.html>`_).
  Currently, disabling ``escape processing`` will remedy this, but prevent the
  `Extended Query`_ API from working due to a `bug
  <https://github.com/pgjdbc/pgjdbc/issues/653>`_ at `pgjdbc`_.

Connection Failover and Load Balancing
......................................

Connection failover and load balancing is supported as described here:
`PostgreSQL JDBC connection failover`_.

.. NOTE::

   It is not recommended to use the **targetServerType** parameter since
   CrateDB has no concept of Master/Slave nodes.

.. _PostgreSQL wire protocol v3: https://www.postgresql.org/docs/current/static/protocol.html
.. _Simple Query: https://www.postgresql.org/docs/current/static/protocol-flow.html#AEN108745
.. _Extended Query: https://www.postgresql.org/docs/current/static/protocol-flow.html#PROTOCOL-FLOW-EXT-QUERY
.. _PostgreSQL JDBC connection failover: https://jdbc.postgresql.org/documentation/head/connect.html#connection-failover
.. _pgjdbc: https://github.com/pgjdbc/pgjdbc
.. _Enterprise Edition: https://crate.io/enterprise-edition/
