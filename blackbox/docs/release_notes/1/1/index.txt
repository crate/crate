.. highlight:: psql

.. _1_1_release_line:

================
1.1 Release Line
================

Versions
========

No released versions.

Upgrade Notes
=============

New Cluster Checks
------------------

CrateDB 1.1 introduces a new internal table format that is backwards
incompatible with previous table formats. Future versions of CrateDB will only
support this new table format. CrateDB 1.1 will be the only release that can
read all older table formats *and* the new table format.

CrateDB 1.1 includes new cluster checks that will inform you of which tables
need updating or recreating if you plan to use future releases of CrateDB. Once
this has been done, your tables will be forward compatible with future releases.

To get started, upgrade your cluster like normal. When CrateDB 1.1 is running,
you may now see that your cluster checks are yellow rather than green in the
status bar at the top of your `admin console`_. Select the status checks icon
for more information.

Depending on your situation, you may then be told that you should either
upgrade or recreate some of your tables.

.. figure:: ../../../_static/upgrade-cluster-checks.png
   :align: center

   *Figure 1*: Both cluster checks are failing in this example.

If your cluster checks are green, there is nothing for you to do. Otherwise,
continue reading.

Recreate Tables
```````````````

For tables that need recreating, use :ref:`ref-show-create-table` to get the
SQL statement needed to restore the table, like so::

  cr> SHOW CREATE TABLE table_ident;

Here, ``table_ident`` is the name of the table you want to recreate.

Copy the output of this command to somewhere safe. You will need it to recreate
the table.

Next, use :ref:`copy_to` to export the table data to a file.

One way of doing that is like so::

 cr> COPY table_ident TO DIRECTORY '/data/backups';

This will create several JSON files with names like ``table_ident_0_.json`` in
the ``/data/backups`` directory on your local node. (The directory you use for
data export is up to you, but it must be writable by CrateDB.)

:ref:`copy_to` also includes support for Amazon S3, gzip output, and more.
See the command documentation for the full range of usage options.

Once you have both the table schema and table data export, you can use
:ref:`drop-table` to drop the table::

  cr> DROP TABLE table_ident;

Now, recreate the table by executing the ``CREATE TABLE`` command you
previously copied.

Once created, re-import your data using :ref:`copy_from`.

If you exported your table like in the previous example, you could then import
your data one file at a time, like so::

  cr> COPY table_ident FROM '/data/backups/table_ident_0_.json';

See the :ref:`copy_from` command documentation for more information.

When all tables that needed recreating have been exported, dropped, recreated,
and reimported, you can move on.

If you have tables you need to upgrade, continue to the `Upgrade Tables`_
section. Otherwise, skip to the `Verify Checks`_ section.

Upgrade Tables
``````````````

For tables that need upgrading, use the :ref:`sql_ref_optimize` command.

For each table, run a command like so::

  cr> OPTIMIZE TABLE table_ident WITH (upgrade_segments=true);

Here, replace ``table_ident`` with the name of the table you are upgrading.

Once you have done this for all tables, you can move on.

Verify Checks
`````````````

Open your CrateDB `admin console`_ and verify that your cluster checks are
green. This indicates that all tables have been recreated or upgraded and are 
compatible with future versions of CrateDB.

If your cluster checks are not green, you may have missed some tables. Please
go back to the the start.

Create New Snapshots
````````````````````

Snapshots of your tables created prior to them being recreated or upgraded will
not work with future versions of CrateDB. For this reason, you should create a
new snapshot for each of your tables. (See :ref:`snapshot-restore`.)

.. _admin console: https://crate.io/docs/connect/admin_ui/
