def crateDist = file("$projectDir/tmp/crate/")

evaluationDependsOn(':app')
evaluationDependsOn(':es-repository-hdfs')

task bootstrap (type:Exec) {
    inputs.file "$projectDir/bootstrap.py"
    outputs.file "$projectDir/bin/buildout"

    commandLine 'python', "$projectDir/bootstrap.py"
}

task unpackDistTar (dependsOn: project(':app').distTar) << {
    copy {
        includeEmptyDirs = false
        from(tarTree(project(':app').distTar.archivePath)) {
            eachFile { details ->
                details.path =
                    details.path.substring(details.relativePath.segments[0].length())
            }
        }
        into crateDist
    }
}

task buildout (type:Exec, dependsOn: bootstrap) {
    commandLine "$projectDir/bin/buildout", '-N', 'install', 'test', 'hdfs-test'
}

task buildoutHadoop(type:Exec, dependsOn: buildout) {
    commandLine "$projectDir/bin/buildout", 'install', 'hadoop'
}

task lessLogging (dependsOn: unpackDistTar) << {
    def file = new File("$projectDir/tmp/crate/config/logging.yml")
    file.write(file.text.replaceAll('rootLogger: INFO', 'rootLogger: WARN'))
}

task ignoreDiskThreshold (dependsOn: unpackDistTar) << {
    def file = new File("$projectDir/tmp/crate/config/crate.yml")
    file.write(file.text.replaceAll(
            '# cluster.routing.allocation.disk.threshold_enabled: true',
            'cluster.routing.allocation.disk.threshold_enabled: false')
    )
}

task hdfsTest (type:Exec) {
    commandLine "$projectDir/bin/hdfs-test"
}

task itest (type:Exec) {
    commandLine "$projectDir/bin/test", '-1', '-t', '!process_test'
}

task gtest (type:Exec) {
    commandLine "$projectDir/bin/test", '-1', '-t', 'process_test'
}


hdfsTest.dependsOn(unpackDistTar, buildoutHadoop, lessLogging, ignoreDiskThreshold, project(':es-repository-hdfs').distZipHadoop2)
itest.dependsOn(unpackDistTar, buildout, lessLogging, ignoreDiskThreshold)
gtest.dependsOn(unpackDistTar, buildout, lessLogging, ignoreDiskThreshold)

task clean << {
    FileCollection toDelete = files(crateDist,
        "$projectDir/docs/out/text",
        "$projectDir/docs/out/html",
        "$projectDir/docs/clients/out/text",
        "$projectDir/docs/clients/out/html",
        "$projectDir/parts",
        "$projectDir/.installed.cfg",
        "$projectDir/bin",
        "$projectDir/develop-eggs")
    toDelete.each {File file ->
        delete file
    }
}
