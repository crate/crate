def crateDist = file("$projectDir/tmp/crate/")

apply plugin: 'base'

evaluationDependsOn(':app')
evaluationDependsOn(':es:es-repository-hdfs')

task bootstrap(type: Exec) {
    inputs.file "$projectDir/bootstrap.sh"
    outputs.dir "$projectDir/.venv"

    commandLine 'sh', "$projectDir/bootstrap.sh"
}

task deleteCrateDist(type: Delete) {
    delete crateDist
}

task unpackDistTar(dependsOn: [project(':app').installDist, deleteCrateDist]) {
    doLast {
        copy {
            from(project(':app').installDist.destinationDir) {
                includeEmptyDirs = true
            }
            into crateDist
        }
        ignoreDiskThreshold()
    }
    outputs.dir crateDist
}

task unpackCommunityEditionDistTar(dependsOn: [project(':app').installCommunityEditionDist, deleteCrateDist]) {
    doLast {
        copy {
            from(project(':app').installCommunityEditionDist.destinationDir) {
                includeEmptyDirs = true
            }
            into crateDist
        }
        ignoreDiskThreshold()
    }
    outputs.dir crateDist
}

def ignoreDiskThreshold() {
    def file = new File("$projectDir/tmp/crate/config/crate.yml")
    file.write(file.text.replaceAll(
        '# cluster.routing.allocation.disk.threshold_enabled: true',
        'cluster.routing.allocation.disk.threshold_enabled: false')
    )
}

task buildDocs(type: Exec, dependsOn: bootstrap) {
    commandLine "$projectDir/bin/sphinx"
}

task developDocs(type: Exec, dependsOn: bootstrap) {
    commandLine "$projectDir/bin/sphinx", "dev"
}

task hdfsTest(type: Exec, dependsOn: ['bootstrap', 'unpackDistTar', project(':es:es-repository-hdfs').blackBoxTestJar]) {
    commandLine "$projectDir/bin/test-hdfs"
}

task s3Test(type: Exec, dependsOn: ['bootstrap', 'unpackDistTar']) {
    commandLine "$projectDir/bin/test-s3"
}

task sslTest(type: Exec, dependsOn: ['bootstrap', 'unpackDistTar']) {
    commandLine "$projectDir/bin/test-ssl"
}

task monitoringTest(type: Exec, dependsOn: ['bootstrap', 'unpackDistTar']) {
    commandLine "$projectDir/bin/test-jmx"
}

task itest(type: Exec, dependsOn: ['bootstrap', 'unpackDistTar']) {
    commandLine "$projectDir/bin/test-docs"
}

task gtest(type: Exec, dependsOn: ['bootstrap', 'unpackDistTar']) {
    commandLine "$projectDir/bin/test-decommission"
}

task dnsDiscoveryTest(type: Exec, dependsOn: ['bootstrap', 'unpackDistTar']) {
    commandLine "$projectDir/bin/test-dns-discovery"
}

task ceItest(type: Exec, dependsOn: ['bootstrap', 'unpackCommunityEditionDistTar']) {
    commandLine "$projectDir/bin/test-ce-docs"
}

task ceNoEnterpriseTest(type: Exec, dependsOn: ['bootstrap', 'unpackCommunityEditionDistTar']) {
    commandLine "$projectDir/bin/test-ce-no-enterprise"
}

task ceLicenseTest(type: Exec, dependsOn: ['bootstrap', 'unpackCommunityEditionDistTar']) {
    commandLine "$projectDir/bin/test-ce-licensing"
}

task cleanDocs {
    doLast {
        FileCollection toDelete = files(
            crateDist,
            "$projectDir/docs/_out/html",
        )
        toDelete.each {
            File file -> delete file
        }
    }
}

clean.dependsOn([cleanDocs, cleanBootstrap, cleanUnpackDistTar, deleteCrateDist])
