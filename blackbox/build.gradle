/*
 * Licensed to Crate.io GmbH ("Crate") under one or more contributor
 * license agreements.  See the NOTICE file distributed with this work for
 * additional information regarding copyright ownership.  Crate licenses
 * this file to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.  You may
 * obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * However, if you have executed another commercial license agreement
 * with Crate these terms will supersede the license and you may use the
 * software solely pursuant to the terms of the relevant commercial agreement.
 */

def crateDist = file("$projectDir/tmp/crate/")

apply plugin: 'base'

evaluationDependsOn(':app')
evaluationDependsOn(':plugins:es-repository-hdfs')

task bootstrap(type: Exec) {
    inputs.file "$projectDir/bootstrap.sh"
    outputs.dir "$projectDir/.venv"

    commandLine 'sh', "$projectDir/bootstrap.sh"
}

task deleteCrateDist(type: Delete) {
    delete crateDist
}

task unpackDistTar(dependsOn: [project(':app').installDist, deleteCrateDist]) {
    doLast {
        copy {
            from(project(':app').installDist.destinationDir) {
                includeEmptyDirs = true
            }
            into crateDist
        }
        ignoreDiskThreshold()
    }
    outputs.dir crateDist
}

def ignoreDiskThreshold() {
    def file = new File("$projectDir/tmp/crate/config/crate.yml")
    file.write(file.text.replaceAll(
        '# cluster.routing.allocation.disk.threshold_enabled: true',
        'cluster.routing.allocation.disk.threshold_enabled: false')
    )
}

task buildDocs(type: Exec, dependsOn: bootstrap) {
    commandLine "$projectDir/bin/sphinx"
}

task developDocs(type: Exec, dependsOn: bootstrap) {
    commandLine "$projectDir/bin/sphinx", "dev"
}

task hdfsTest(type: Exec, dependsOn: ['bootstrap', 'unpackDistTar', project(':plugins:es-repository-hdfs').blackBoxTestJar]) {
    commandLine "$projectDir/bin/test-hdfs"
}

task s3Test(type: Exec, dependsOn: ['bootstrap', 'unpackDistTar']) {
    commandLine "$projectDir/bin/test-s3"
}

task sslTest(type: Exec, dependsOn: ['bootstrap', 'unpackDistTar']) {
    commandLine "$projectDir/bin/test-ssl"
}

task monitoringTest(type: Exec, dependsOn: ['bootstrap', 'unpackDistTar']) {
    commandLine "$projectDir/bin/test-jmx"
}

task itest(type: Exec, dependsOn: ['bootstrap', 'unpackDistTar']) {
    commandLine "$projectDir/bin/test-docs"
}

task gtest(type: Exec, dependsOn: ['bootstrap', 'unpackDistTar']) {
    commandLine "$projectDir/bin/test-decommission"
}

task dnsDiscoveryTest(type: Exec, dependsOn: ['bootstrap', 'unpackDistTar']) {
    commandLine "$projectDir/bin/test-dns-discovery"
}

task cleanDocs {
    doLast {
        FileCollection toDelete = files(
            crateDist,
            "$projectDir/docs/_out/html",
        )
        toDelete.each {
            File file -> delete file
        }
    }
}

clean.dependsOn([cleanDocs, cleanBootstrap, cleanUnpackDistTar, deleteCrateDist])
