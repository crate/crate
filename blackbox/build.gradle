def crateDist = file("$projectDir/tmp/crate/")

apply plugin: 'base'

evaluationDependsOn(':app')
evaluationDependsOn(':es:es-repository-hdfs')

task bootstrap(type: Exec) {
    inputs.file "$projectDir/bootstrap.sh"
    outputs.dir "$projectDir/.venv"

    commandLine 'sh', "$projectDir/bootstrap.sh"
}

task unpackDistTar(dependsOn: [project(':app').distTar]) {
    doLast {
        copy {
            includeEmptyDirs = false
            from(tarTree(project(':app').distTar.archivePath)) {
                eachFile { details ->
                    details.path =
                            details.path.substring(details.relativePath.segments[0].length())
                }
            }
            into crateDist
        }
    }
}

task lessLogging(dependsOn: unpackDistTar) {
    doLast {
        def file = new File("$projectDir/tmp/crate/config/log4j2.properties")
        file.write(file.text.replaceAll('rootLogger.level = info', 'rootLogger.level: warn'))
    }
}

task ignoreDiskThreshold(dependsOn: unpackDistTar) {
    doLast {
        def file = new File("$projectDir/tmp/crate/config/crate.yml")
        file.write(file.text.replaceAll(
                '# cluster.routing.allocation.disk.threshold_enabled: true',
                'cluster.routing.allocation.disk.threshold_enabled: false')
        )
    }
}

task hdfsTest(type: Exec) {
    commandLine "$projectDir/bin/hdfs-test"
}

task monitoringTest(type: Exec) {
    commandLine "$projectDir/bin/monitoring-test"
}

task sigarTest(type: Exec) {
    commandLine "$projectDir/bin/sigar-test"
}

task itest(type: Exec) {
    commandLine "$projectDir/bin/test", '-1', '-t', '!process_test'
}

task gtest(type: Exec) {
    commandLine "$projectDir/bin/test", '-1', '-t', 'process_test'
}

task logicTest(type: Exec) {
    commandLine "$projectDir/bin/logic-test"
}

task buildDocs(type: Exec, dependsOn: bootstrap) {
    commandLine "$projectDir/bin/sphinx"
}


hdfsTest.dependsOn(unpackDistTar, bootstrap, lessLogging, ignoreDiskThreshold,
        project(':es:es-repository-hdfs').blackBoxTestJar)
sigarTest.dependsOn(unpackDistTar, bootstrap, lessLogging, ignoreDiskThreshold)
monitoringTest.dependsOn(unpackDistTar, bootstrap, lessLogging, ignoreDiskThreshold)
itest.dependsOn(unpackDistTar, bootstrap, lessLogging, ignoreDiskThreshold)
gtest.dependsOn(unpackDistTar, bootstrap, lessLogging, ignoreDiskThreshold)
logicTest.dependsOn(unpackDistTar, bootstrap, lessLogging, ignoreDiskThreshold)

task cleanDocs {
    doLast {
        FileCollection toDelete = files(
                crateDist,
                "$projectDir/docs/out/text",
                "$projectDir/docs/out/html",
                "$projectDir/docs/clients/out/text",
                "$projectDir/docs/clients/out/html"
        )
        toDelete.each {
            File file -> delete file
        }
    }
}
clean.dependsOn([cleanDocs, cleanBootstrap])
