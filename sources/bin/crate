#!/bin/sh

# OPTIONS:
#   -f: start in the foreground
#   -p <filename>: log the pid to a file (useful to kill it later)

# CONTROLLING STARTUP:
#
# This script relies on few environment variables to determine startup
# behavior, those variables are:
#
#   CRATE_CLASSPATH -- A Java classpath containing everything necessary to run.
#   JAVA_OPTS    -- Additional arguments to the JVM for heap size, etc
#   CRATE_JAVA_OPTS -- External Java Opts on top of the defaults set
#
#
# Optionally, exact memory values can be set using the following values, note,
# they can still be set using the `CRATE_JAVA_OPTS`. Sample format include "512m", and "10g".
#
#   CRATE_HEAP_SIZE -- Sets both the minimum and maximum memory to allocate (recommended)
#
# As a convenience, a fragment of shell is sourced in order to set one or
# more of these variables. This so-called `include' can be placed in a
# number of locations and will be searched for in order. The lowest
# priority search path is the same directory as the startup script, and
# since this is the location of the sample in the project tree, it should
# almost work Out Of The Box.
#
# Any serious use-case though will likely require customization of the
# include. For production installations, it is recommended that you copy
# the sample to one of /usr/share/crate/crate.in.sh,
# /usr/local/share/crate/crate.in.sh, or
# /opt/crate/crate.in.sh and make your modifications there.
#
# Another option is to specify the full path to the include file in the
# environment. For example:
#
#   $ CREATE_INCLUDE=/path/to/in.sh elasticsearch -p /var/run/es.pid
#
# Note: This is particularly handy for running multiple instances on a
# single installation, or for quick tests.
#
# If you would rather configure startup entirely from the environment, you
# can disable the include by exporting an empty CRATE_INCLUDE, or by
# ensuring that no include files exist in the aforementioned search list.
# Be aware that you will be entirely responsible for populating the needed
# environment variables.

CDPATH=""
SCRIPT="$0"

# SCRIPT may be an arbitrarily deep series of symlinks. Loop until we have the concrete path.
while [ -h "$SCRIPT" ] ; do
  ls=`ls -ld "$SCRIPT"`
  # Drop everything prior to ->
  link=`expr "$ls" : '.*-> \(.*\)$'`
  if expr "$link" : '/.*' > /dev/null; then
    SCRIPT="$link"
  else
    SCRIPT=`dirname "$SCRIPT"`/"$link"
  fi
done

# determine crate home
CRATE_HOME=`dirname "$SCRIPT"`/..

# make CRATE_HOME absolute
CRATE_HOME=`cd "$CRATE_HOME"; pwd`


# If an include wasn't specified in the environment, then search for one...
if [ "x$CRATE_INCLUDE" = "x" ]; then
    # Locations (in order) to use when searching for an include file.
    for include in /usr/share/crate/crate.in.sh \
                   /usr/local/share/crate/crate.in.sh \
                   /opt/crate/crate.in.sh \
                   ~/.crate.in.sh \
                   `dirname "$0"`/crate.in.sh; do
        if [ -r "$include" ]; then
            . "$include"
            break
        fi
    done
# ...otherwise, source the specified include.
elif [ -r "$CRATE_INCLUDE" ]; then
    . "$CRATE_INCLUDE"
fi

if [ -x "$JAVA_HOME/bin/java" ]; then
    JAVA="$JAVA_HOME/bin/java"
else
    JAVA=java
fi

if [ -z "$CRATE_CLASSPATH" ]; then
    echo "You must set the CRATE_CLASSPATH var" >&2
    exit 1
fi

# Special-case path variables.
case `uname` in
    CYGWIN*)
        CRATE_CLASSPATH=`cygpath -p -w "$CRATE_CLASSPATH"`
        CRATE_HOME=`cygpath -p -w "$CRATE_HOME"`
    ;;
esac

launch_service()
{
    pidpath=$1
    foreground=$2
    props=$3
    es_parms="-Dcrate"

    if [ "x$pidpath" != "x" ]; then
        es_parms="$es_parms -Des.pidfile=$pidpath"
    fi

    # The es-foreground option will tell ElasticSearch not to close stdout/stderr, but it's up to us not to background.
    if [ "x$foreground" != "x" ]; then
        es_parms="$es_parms -Des.foreground=yes"
        exec "$JAVA" $JAVA_OPTS $CRATE_JAVA_OPTS $es_parms -Dcrate.path.home="$CRATE_HOME" -cp "$CRATE_CLASSPATH" $props \
                org.elasticsearch.bootstrap.ElasticSearch
        execval=$?
    else
        # Startup ElasticSearch, background it, and write the pid.
        exec "$JAVA" $JAVA_OPTS $CRATE_JAVA_OPTS $es_parms -Dcrate.path.home="$CRATE_HOME" -cp "$CRATE_CLASSPATH" $props \
                    org.elasticsearch.bootstrap.ElasticSearch <&- &
        execval=$?
        [ ! -z "$pidpath" ] && printf '%d' $! > "$pidpath"
    fi

    return $execval
}

# Parse any command line options.
args=`getopt vfhp:D:X: "$@"`
eval set -- "$args"

while true; do
    case $1 in
        -v)
            "$JAVA" $JAVA_OPTS $CRATE_JAVA_OPTS $es_parms -Dcrate.path.home="$CRATE_HOME" -cp "$CRATE_CLASSPATH" $props \
                    org.elasticsearch.Version
            exit 0
        ;;
        -p)
            pidfile="$2"
            shift 2
        ;;
        -f)
            foreground="yes"
            shift
        ;;
        -h)
            echo "Usage: $0 [-f] [-h] [-p pidfile]"
            exit 0
        ;;
        -D)
            properties="$properties -D$2"
            shift 2
        ;;
        -X)
            properties="$properties -X$2"
            shift 2
        ;;
        --)
            shift
            break
        ;;
        *)
            echo "Error parsing arguments!" >&2
            exit 1
        ;;
    esac
done

# Start up the service
launch_service "$pidfile" "$foreground" "$properties"

exit $?
