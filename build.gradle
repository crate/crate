buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
  id "com.github.kt3k.coveralls" version "2.0.1"
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'findbugs'
    apply plugin: 'jacoco'

    jacoco {
        toolVersion = "0.7.1.201405082137"
    }

    group = 'io.crate'
    repositories {
        mavenCentral()
    }

    findbugs {
        ignoreFailures = true
    }
}


def jacocoProjects() {
    subprojects.findAll {
        it.name != 'es' && it.name != 'testing' && it.name != 'docs'
    }
}

coveralls {
    def tmpSources = []
    jacocoProjects().each {
        evaluationDependsOn(it.name)
        if (it.plugins.withType(JavaPlugin) && it.tasks.withType(Test)) {
            tmpSources << it.sourceSets.main.allSource.srcDirs
        }
    }
    sourceDirs = files(tmpSources).files.absolutePath
}

task jacocoReport(type: JacocoReport) {
    // tests must have been executed so that execution data for the sub projects is generated
    // this task doesn't define a hard dependency on the tests to avoid running them twice in travis-ci
    executionData fileTree(project.rootDir.absolutePath).include('**/build/jacoco/*.exec')

    jacocoProjects().each {
        evaluationDependsOn(it.name)
        if (it.plugins.withType(JavaPlugin) && it.tasks.withType(Test)) {
            sourceSets it.sourceSets.main
        }
    }

    reports {
        xml{
            enabled true
            destination "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        }
        csv.enabled false
        html{
            enabled true
            destination "${buildDir}/reports/jacoco/jacocoHtml"
        }
    }
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = jacocoProjects().test
    sourceDirectories = files(jacocoProjects().sourceSets.main.allSource.srcDirs)
    classDirectories =  files(jacocoProjects().sourceSets.main.output)
    executionData = files(jacocoProjects().jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}

subprojects {

    idea {
        module {
            iml {
                // ensure testing dependencies come before es dependencies
                // when calling tests from intellij
                withXml {
                    def node = it.asNode()
                    def testingNode = node.component.orderEntry.find {
                        it.@'module-name' == 'testing'
                    }

                    if (testingNode != null) {
                        def parent = testingNode.parent()
                        def newNode = new Node(parent, testingNode.name(), testingNode.attributes())
                        parent.remove(testingNode)
                        parent.children().add(4, newNode)
                    }
                }
            }
        }
    }
}

idea {
    project {
        languageLevel = 'JDK_1_7'

        ipr {
            withXml { provider ->
                def node = provider.asNode()
                def copyrightManager = node.component.find { it.'@name' == 'CopyrightManager' }
                copyrightManager.@default = "CrateASL2"
                def aslCopyright = copyrightManager.copyright.find { it.option.find { it.@name == "myName" }?.@value == "CrateASL2" }
                if (aslCopyright == null) {
                    copyrightManager.append(new XmlParser().parse(file("copyright.xml")))
                }
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.1'
}
