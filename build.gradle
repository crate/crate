buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.3.1'
    }
}

plugins {
    id "com.github.kt3k.coveralls" version "2.3.1"
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'findbugs'
    apply plugin: 'jacoco'

    tasks.withType(JavaCompile) {
        sourceCompatibility = "1.7"
        targetCompatibility = "1.7"
    }

    tasks.withType(Test) {
        // allow to set the number of test forks from the CLI
        if (project.hasProperty('testForks')) {
            maxParallelForks = project.testForks as int
        }
    }

    jacoco {
        toolVersion = "0.7.1.201405082137"
    }

    group = 'io.crate'
    repositories {
        mavenCentral()
    }

    findbugs {
        ignoreFailures = true
    }

    // if environment variable JAVA7_HOME is set, add it to bootClasspath
    // for compiling for java 7 compatibility using javac from jdk8
    tasks.withType(JavaCompile) {
        doFirst {
            if (sourceCompatibility == '1.7' && System.env.JAVA7_HOME != null) {
                options.fork = true
                options.bootClasspath = "$System.env.JAVA7_HOME/jre/lib/rt.jar"
            }
        }
    }

    tasks.withType(Javadoc) {
        failOnError = false
    }
}

configure(subprojects.findAll {it.name != 'es'}) {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation"
    }
}



final testOutputs = [:].withDefault {[]}


project.gradle.addListener(new TestOutputListener() {
    @Override
    void onOutput(TestDescriptor test, TestOutputEvent outputEvent) {
        testOutputs[test] << outputEvent.getMessage()
    }
})

project.gradle.addListener(new TestListener() {

    @Override
    void beforeSuite(TestDescriptor suite) {
        logger.lifecycle('Running: ' + suite)
    }

    @Override
    void afterSuite(TestDescriptor suite, TestResult result) {
    }

    @Override
    void beforeTest(TestDescriptor test) {
    }

    @Override
    void afterTest(TestDescriptor test, TestResult result) {
        if (true || result.getResultType() == TestResult.ResultType.FAILURE) {
            logger.error('## FAILURE: ' + test)
            testOutputs[test].each { e ->
                print e
            }
        }
        testOutputs.remove(test)
    }
})


def jacocoProjects() {
    subprojects.findAll {
        it.name != 'es' && it.name != 'testing'
    }
}

coveralls {
    def tmpSources = []
    jacocoProjects().each {
        evaluationDependsOn(it.name)
        if (it.plugins.withType(JavaPlugin) && it.tasks.withType(Test)) {
            tmpSources << it.sourceSets.main.allSource.srcDirs.flatten()
        }
    }
    sourceDirs = files(tmpSources).files.absolutePath
    jacocoReportPath = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
}


task jacocoReport(type: JacocoReport) {
    // tests must have been executed so that execution data for the sub projects is generated
    // this task doesn't define a hard dependency on the tests to avoid running them twice in travis-ci
    executionData fileTree(project.rootDir.absolutePath).include('**/build/jacoco/*.exec')

    jacocoProjects().each {
        evaluationDependsOn(it.name)
        if (it.plugins.withType(JavaPlugin) && it.tasks.withType(Test)) {
            sourceSets it.sourceSets.main
        }
    }

    reports {
        xml{
            enabled true
            destination "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        }
        csv.enabled false
        html{
            enabled true
            destination "${buildDir}/reports/jacoco/jacocoHtml"
        }
    }
}

subprojects {
    idea {
        module {
            iml {
                // ensure testing dependencies come before es dependencies
                // when calling tests from intellij
                withXml {
                    def node = it.asNode()
                    def testingNode = node.component.orderEntry.find {
                        it.@'module-name' == 'testing'
                    }

                    if (testingNode != null) {
                        def parent = testingNode.parent()
                        def newNode = new Node(parent, testingNode.name(), testingNode.attributes())
                        parent.remove(testingNode)
                        parent.children().add(4, newNode)
                    }
                }
            }
        }
    }
}

def jvmTestFlags = ['-ea']

idea {
    workspace {
        iws.withXml { xmlFile ->
            def runManager = xmlFile.asNode().component.find { it.@name == 'RunManager' }

            // enable assertions for junit tests
            def junitDefaults = runManager.configuration.find { it.@default == 'true' && it.@type == 'JUnit' }
            junitDefaults.option.find { it.@name == 'VM_PARAMETERS' }.replaceNode {
                option(name: 'VM_PARAMETERS', value: jvmTestFlags.join(' '))
            }
        }
    }

    project {
        languageLevel = 'JDK_1_7'

        ipr {
            withXml { provider ->
                def node = provider.asNode()
                def copyrightManager = node.component.find { it.'@name' == 'CopyrightManager' }
                copyrightManager.@default = "CrateASL2"
                def aslCopyright = copyrightManager.copyright.find { it.option.find { it.@name == "myName" }?.@value == "CrateASL2" }
                if (aslCopyright == null) {
                    copyrightManager.append(new XmlParser().parse(file("copyright.xml")))
                }
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}
