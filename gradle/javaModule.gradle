/*
 * Licensed to Crate.io GmbH ("Crate") under one or more contributor
 * license agreements.  See the NOTICE file distributed with this work for
 * additional information regarding copyright ownership.  Crate licenses
 * this file to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.  You may
 * obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * However, if you have executed another commercial license agreement
 * with Crate these terms will supersede the license and you may use the
 * software solely pursuant to the terms of the relevant commercial agreement.
 */

import io.crate.gradle.OS

apply plugin: 'java'
apply plugin: 'de.thetaphi.forbiddenapis'
apply plugin: 'checkstyle'
apply plugin: 'jdk-download'


def getJdkBundleOSFromPropertiesOrDefault = {
    System.getProperty(
        "bundled_jdk_os",
        versions['bundled_jdk_os'] != null
            ? "${versions['bundled_jdk_os']}"
            : OS.current().osName())
}

def getJdkBundleArchFromPropertiesOrDefault = {
    System.getProperty(
        "bundled_jdk_arch",
        versions['bundled_jdk_arch'] != null ? "${versions['bundled_jdk_arch']}" : OS.current().arch())
}


jdks {
    runtime {
        vendor = "${System.getProperty("bundled_jdk_vendor", versions['bundled_jdk_vendor'])}"
        version = "${System.getProperty("bundled_jdk_version", versions['bundled_jdk_version'])}"
        os = getJdkBundleOSFromPropertiesOrDefault()
        arch = getJdkBundleArchFromPropertiesOrDefault()
    }
}


repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}


tasks.withType(JavaCompile) {
    doFirst {
        if (System.getProperty('useSystemJdk') == null) {
            options.fork = true
            options.forkOptions.javaHome = jdks.runtime.getJavaHome()
            options.forkOptions.executable = jdks.runtime.getBinJavaPath()
        }
    }


    options.warnings = false
    options.deprecation = false
    options.compilerArgs << '-XDignore.symbol.file'
    options.encoding = 'UTF-8'
    sourceCompatibility = jdks.runtime.major()
    targetCompatibility = jdks.runtime.major()
}

tasks.withType(JavaExec) {
    if (System.getProperty('useSystemJdk') == null) {
        executable = jdks.runtime.getBinJavaPath()
    }
}


javadoc {
    options.addStringOption('XDignore.symbol.file', '')
}


if (project.hasProperty('testLogging')) {
    // Used to enable logging for tests
    test {
        testLogging.showStandardStreams = true
    }
}


if (project.hasProperty('lint-unchecked')) {
    compileJava.options.compilerArgs = compileJava.options.compilerArgs << '-Xlint:unchecked'
    compileTestJava.options.compilerArgs = compileTestJava.options.compilerArgs << '-Xlint:unchecked'
}

if (project.hasProperty('lint-deprecation')) {
    compileJava.options.compilerArgs = compileJava.options.compilerArgs << '-Xlint:deprecation'
    compileTestJava.options.compilerArgs = compileTestJava.options.compilerArgs << '-Xlint:deprecation'
}

forbiddenApisMain {
    bundledSignatures = ['jdk-unsafe', 'jdk-deprecated']
    signaturesFiles = files("$rootDir/gradle/forbidden-signatures.txt")
    suppressAnnotations = ['**.SuppressForbidden']
    ignoreFailures = false
}


checkstyle {
    toolVersion = "8.45.1"
    def checkstyle_dir = "$rootDir/gradle/checkstyle/"
    configProperties = [
        'checkstyleDir' : checkstyle_dir,
    ]
    configDirectory = file(checkstyle_dir)
}

tasks.withType(Test) {
    if (System.getProperty('useSystemJdk') == null) {
        test.dependsOn jdks.runtime
        test.executable = jdks.runtime.getBinJavaPath()
    }

    // by default `-D` arguments are "caught" in the gradle process
    // and not passed-through to the test process.
    // this enables test options like '-Dtests.iters=20'
    System.properties.each { k, v ->
        if (k.startsWith('tests.')) {
            systemProperty k, v
        }
    }

    // Used by `ReproduceInfoPrinter` to add a "REPRODUCE WITH: " notice
    systemProperty "tests.task", path

    filter {
        setFailOnNoMatchingTests(false)
    }

    jacoco {
        enabled = true
    }

    // ES testing framework adds the resources target build paths to the classpath of the tests,
    // but if the src/[main|test]/resources directories of a project are empty, then these dirs
    // are missing from the target build directory which causes all tests to fail.
    // The groovy target build paths have the same problem.
    // To prevent this case we always create the target build resource and groovy directories upfront.
    doFirst {
        file(project.buildDir.path + '/resources/main').mkdirs()
        file(project.buildDir.path + '/resources/test').mkdirs()
        file(project.buildDir.path + '/classes/groovy/main').mkdirs()
        file(project.buildDir.path + '/classes/groovy/test').mkdirs()
    }
}
