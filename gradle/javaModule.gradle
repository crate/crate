apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'de.thetaphi.forbiddenapis'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'checkstyle'

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://jitpack.io" }
}

compileJava {
    options.warnings = false
    options.deprecation = false
    options.compilerArgs << '-XDignore.symbol.file'

    finalizedBy checkstyleMain
}


javadoc {
    options.addStringOption('XDignore.symbol.file', '')
}


if (project.hasProperty('testLogging')) {
    // Used to enable logging for tests
    test {
        testLogging.showStandardStreams = true
    }
}


if (project.hasProperty('lint-unchecked')) {
    compileJava.options.compilerArgs = compileJava.options.compilerArgs << '-Xlint:unchecked'
    compileTestJava.options.compilerArgs = compileTestJava.options.compilerArgs << '-Xlint:unchecked'
}

if (project.hasProperty('lint-deprecation')) {
    compileJava.options.compilerArgs = compileJava.options.compilerArgs << '-Xlint:deprecation'
    compileTestJava.options.compilerArgs = compileTestJava.options.compilerArgs << '-Xlint:deprecation'
}

forbiddenApisMain {
    bundledSignatures = ['jdk-unsafe', 'jdk-deprecated']
    signaturesFiles = files("$rootDir/gradle/forbidden-signatures.txt")
    suppressAnnotations = ['**.SuppressForbidden']
    ignoreFailures = false
}


checkstyle {
    toolVersion = "8.30"
    def checkstyle_dir = "$rootDir/gradle/checkstyle/"
    configProperties = [
            'checkstyleDir' : checkstyle_dir,
            // May be overwritten by other modules, e.g. enterprise
            'licenseHeaderFile' : 'header.txt'
    ]
    configFile = file(checkstyle_dir + "rules.xml")
    checkstyleTest.enabled = false
}

test {
    // by default `-D` arguments are "caught" in the gradle process
    // and not passed-through to the test process.
    // this enables test options like '-Dtests.iters=20'
    System.properties.each { k, v ->
        if (k.startsWith('tests.')) {
            systemProperty k, v
        }
    }

    filter {
        setFailOnNoMatchingTests(false)
    }

    jacoco {
        enabled = true;
    }

    // ES testing framework adds the resources target build paths to the classpath of the tests,
    // but if the src/[main|test]/resources directories of a project are empty, then these dirs
    // are missing from the target build directory which causes all tests to fail.
    // The groovy target build paths have the same problem.
    // To prevent this case we always create the target build resource and groovy directories upfront.
    doFirst {
        file(project.buildDir.path + '/resources/main').mkdirs()
        file(project.buildDir.path + '/resources/test').mkdirs()
        file(project.buildDir.path + '/classes/groovy/main').mkdirs()
        file(project.buildDir.path + '/classes/groovy/test').mkdirs()
    }
}
