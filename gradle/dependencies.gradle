/*
 * Licensed to Crate.io GmbH ("Crate") under one or more contributor
 * license agreements.  See the NOTICE file distributed with this work for
 * additional information regarding copyright ownership.  Crate licenses
 * this file to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.  You may
 * obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * However, if you have executed another commercial license agreement
 * with Crate these terms will supersede the license and you may use the
 * software solely pursuant to the terms of the relevant commercial agreement.
 */

Properties props = new Properties()
props.load(new FileInputStream(file("gradle/version.properties")));
ext.set("versions", props)

allprojects {
    configurations.all {
        resolutionStrategy {
            // fail eagerly on version conflict (includes transitive dependencies)
            failOnVersionConflict()

            dependencySubstitution {
                substitute module("org.hamcrest:hamcrest-core") with(
                        module("org.hamcrest:hamcrest:${versions.hamcrest}"))
            }

            // forced versions of conflicting deps
            force "org.locationtech.spatial4j:spatial4j:${versions.spatial4j}"
            //force "com.spatial4j:spatial4j:${versions.spatial4j}"

            force "commons-codec:commons-codec:${versions.commonscodec}"
            force "com.carrotsearch.randomizedtesting:junit4-ant:${versions.randomizedrunner}"
            force "com.carrotsearch.randomizedtesting:randomizedtesting-runner:${versions.randomizedrunner}"
            force "junit:junit:${versions.junit}"
            force "org.slf4j:slf4j-api:${versions.slf4j}"
            force "com.fasterxml.jackson:jackson-bom:${versions.jackson}"
            force "com.fasterxml.jackson.core:jackson-core:${versions.jackson}"
            force "com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:${versions.jackson}"
            force "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}"
            force "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}"
            force "joda-time:joda-time:${versions.jodatime}"
            force "org.hamcrest:hamcrest:${versions.hamcrest}"
            force "org.antlr:antlr4-runtime:${versions.antlr}"
            force "commons-cli:commons-cli:${versions.commonscli}"
            force "org.apache.commons:commons-math3:${versions.commonsmath}"
            force "org.apache.commons:commons-lang3:${versions.commonslang}"
            force "commons-logging:commons-logging:${versions.commonslogging}"
            force "org.apache.httpcomponents:httpcore:${versions.httpcore}"
            force "org.apache.httpcomponents:httpcore-nio:${versions.httpcore}"
            force "org.apache.httpcomponents:httpclient:${versions.httpclient}"
            force "io.netty:netty-buffer:${versions.netty4}"
            force "io.netty:netty-codec:${versions.netty4}"
            force "io.netty:netty-codec-http:${versions.netty4}"
            force "io.netty:netty-common:${versions.netty4}"
            force "io.netty:netty-handler:${versions.netty4}"
            force "io.netty:netty-resolver:${versions.netty4}"
            force "io.netty:netty-transport:${versions.netty4}"
            force "net.sf.jopt-simple:jopt-simple:${versions.jopt_simple}"
            force "net.bytebuddy:byte-buddy:${versions.bytebuddy}"

            force "org.jetbrains:annotations:${versions.annotations}"
            force "org.apache.logging.log4j:log4j-api:${versions.log4j2}"
            force "org.apache.logging.log4j:log4j-core:${versions.log4j2}"
        }
    }
}
