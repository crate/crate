/* Generated By:JavaCC: Do not edit this line. SQLGrammarConstants.java */
package org.cratedb.sql.parser.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
interface SQLGrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int NOT_D = 16;
  /** RegularExpression Id. */
  int NOT_DE = 19;
  /** RegularExpression Id. */
  int NOT_DER = 22;
  /** RegularExpression Id. */
  int NOT_DERB = 25;
  /** RegularExpression Id. */
  int NOT_DERBY = 28;
  /** RegularExpression Id. */
  int NOT_DERBYDASH = 31;
  /** RegularExpression Id. */
  int NOT_DERBYDASHP = 34;
  /** RegularExpression Id. */
  int NOT_DERBYDASHPR = 37;
  /** RegularExpression Id. */
  int NOT_DERBYDASHPRO = 40;
  /** RegularExpression Id. */
  int NOT_DERBYDASHPROP = 43;
  /** RegularExpression Id. */
  int NOT_DERBYDASHPROPE = 46;
  /** RegularExpression Id. */
  int NOT_DERBYDASHPROPER = 49;
  /** RegularExpression Id. */
  int NOT_DERBYDASHPROPERT = 52;
  /** RegularExpression Id. */
  int NOT_DERBYDASHPROPERTI = 55;
  /** RegularExpression Id. */
  int NOT_DERBYDASHPROPERTIE = 58;
  /** RegularExpression Id. */
  int DERBYDASHPROPERTIES = 59;
  /** RegularExpression Id. */
  int NOT_PROPERTIES = 62;
  /** RegularExpression Id. */
  int SINGLE_LINE_SQLCOMMENT = 63;
  /** RegularExpression Id. */
  int CHECK_PROPERTIES = 64;
  /** RegularExpression Id. */
  int ADD = 65;
  /** RegularExpression Id. */
  int ALL = 66;
  /** RegularExpression Id. */
  int ALLOCATE = 67;
  /** RegularExpression Id. */
  int ALTER = 68;
  /** RegularExpression Id. */
  int AND = 69;
  /** RegularExpression Id. */
  int ANY = 70;
  /** RegularExpression Id. */
  int ARE = 71;
  /** RegularExpression Id. */
  int AS = 72;
  /** RegularExpression Id. */
  int ASC = 73;
  /** RegularExpression Id. */
  int ASSERTION = 74;
  /** RegularExpression Id. */
  int AT = 75;
  /** RegularExpression Id. */
  int AUTHORIZATION = 76;
  /** RegularExpression Id. */
  int AVG = 77;
  /** RegularExpression Id. */
  int BEGIN = 78;
  /** RegularExpression Id. */
  int BETWEEN = 79;
  /** RegularExpression Id. */
  int BINARY = 80;
  /** RegularExpression Id. */
  int BIT = 81;
  /** RegularExpression Id. */
  int BOTH = 82;
  /** RegularExpression Id. */
  int BY = 83;
  /** RegularExpression Id. */
  int CASCADE = 84;
  /** RegularExpression Id. */
  int CASCADED = 85;
  /** RegularExpression Id. */
  int CASE = 86;
  /** RegularExpression Id. */
  int CAST = 87;
  /** RegularExpression Id. */
  int CHAR = 88;
  /** RegularExpression Id. */
  int CHARACTER = 89;
  /** RegularExpression Id. */
  int CHARACTER_LENGTH = 90;
  /** RegularExpression Id. */
  int CHAR_LENGTH = 91;
  /** RegularExpression Id. */
  int CHECK = 92;
  /** RegularExpression Id. */
  int CLOSE = 93;
  /** RegularExpression Id. */
  int COALESCE = 94;
  /** RegularExpression Id. */
  int COLLATE = 95;
  /** RegularExpression Id. */
  int COLLATION = 96;
  /** RegularExpression Id. */
  int COLUMN = 97;
  /** RegularExpression Id. */
  int COMMIT = 98;
  /** RegularExpression Id. */
  int CONNECT = 99;
  /** RegularExpression Id. */
  int CONNECTION = 100;
  /** RegularExpression Id. */
  int CONSTRAINT = 101;
  /** RegularExpression Id. */
  int CONSTRAINTS = 102;
  /** RegularExpression Id. */
  int CONTINUE = 103;
  /** RegularExpression Id. */
  int CONVERT = 104;
  /** RegularExpression Id. */
  int CORRESPONDING = 105;
  /** RegularExpression Id. */
  int COUNT = 106;
  /** RegularExpression Id. */
  int CREATE = 107;
  /** RegularExpression Id. */
  int CROSS = 108;
  /** RegularExpression Id. */
  int CURRENT = 109;
  /** RegularExpression Id. */
  int CURRENT_DATE = 110;
  /** RegularExpression Id. */
  int CURRENT_TIME = 111;
  /** RegularExpression Id. */
  int CURRENT_TIMESTAMP = 112;
  /** RegularExpression Id. */
  int CURRENT_USER = 113;
  /** RegularExpression Id. */
  int CURSOR = 114;
  /** RegularExpression Id. */
  int D = 115;
  /** RegularExpression Id. */
  int DEALLOCATE = 116;
  /** RegularExpression Id. */
  int DEC = 117;
  /** RegularExpression Id. */
  int DECIMAL = 118;
  /** RegularExpression Id. */
  int DECLARE = 119;
  /** RegularExpression Id. */
  int _DEFAULT = 120;
  /** RegularExpression Id. */
  int DEFERRABLE = 121;
  /** RegularExpression Id. */
  int DEFERRED = 122;
  /** RegularExpression Id. */
  int DELETE = 123;
  /** RegularExpression Id. */
  int DESC = 124;
  /** RegularExpression Id. */
  int DESCRIBE = 125;
  /** RegularExpression Id. */
  int DIAGNOSTICS = 126;
  /** RegularExpression Id. */
  int DISCONNECT = 127;
  /** RegularExpression Id. */
  int DISTINCT = 128;
  /** RegularExpression Id. */
  int DOUBLE = 129;
  /** RegularExpression Id. */
  int DROP = 130;
  /** RegularExpression Id. */
  int ELSE = 131;
  /** RegularExpression Id. */
  int END = 132;
  /** RegularExpression Id. */
  int ENDEXEC = 133;
  /** RegularExpression Id. */
  int ESCAPE = 134;
  /** RegularExpression Id. */
  int EXCEPT = 135;
  /** RegularExpression Id. */
  int EXCEPTION = 136;
  /** RegularExpression Id. */
  int EXEC = 137;
  /** RegularExpression Id. */
  int EXECUTE = 138;
  /** RegularExpression Id. */
  int EXISTS = 139;
  /** RegularExpression Id. */
  int EXTERNAL = 140;
  /** RegularExpression Id. */
  int FALSE = 141;
  /** RegularExpression Id. */
  int FETCH = 142;
  /** RegularExpression Id. */
  int FIRST = 143;
  /** RegularExpression Id. */
  int FOR = 144;
  /** RegularExpression Id. */
  int FOREIGN = 145;
  /** RegularExpression Id. */
  int FOUND = 146;
  /** RegularExpression Id. */
  int FROM = 147;
  /** RegularExpression Id. */
  int FULL = 148;
  /** RegularExpression Id. */
  int FUNCTION = 149;
  /** RegularExpression Id. */
  int GET = 150;
  /** RegularExpression Id. */
  int GLOBAL = 151;
  /** RegularExpression Id. */
  int GO = 152;
  /** RegularExpression Id. */
  int GOTO = 153;
  /** RegularExpression Id. */
  int GRANT = 154;
  /** RegularExpression Id. */
  int GROUP = 155;
  /** RegularExpression Id. */
  int GROUP_CONCAT = 156;
  /** RegularExpression Id. */
  int HAVING = 157;
  /** RegularExpression Id. */
  int HOUR = 158;
  /** RegularExpression Id. */
  int IDENTITY = 159;
  /** RegularExpression Id. */
  int IF = 160;
  /** RegularExpression Id. */
  int IMMEDIATE = 161;
  /** RegularExpression Id. */
  int IN = 162;
  /** RegularExpression Id. */
  int INDEX = 163;
  /** RegularExpression Id. */
  int INDICATOR = 164;
  /** RegularExpression Id. */
  int INITIALLY = 165;
  /** RegularExpression Id. */
  int INNER = 166;
  /** RegularExpression Id. */
  int INPUT = 167;
  /** RegularExpression Id. */
  int INSENSITIVE = 168;
  /** RegularExpression Id. */
  int INSERT = 169;
  /** RegularExpression Id. */
  int INT = 170;
  /** RegularExpression Id. */
  int INTEGER = 171;
  /** RegularExpression Id. */
  int INTERSECT = 172;
  /** RegularExpression Id. */
  int INTO = 173;
  /** RegularExpression Id. */
  int IS = 174;
  /** RegularExpression Id. */
  int ISOLATION = 175;
  /** RegularExpression Id. */
  int JOIN = 176;
  /** RegularExpression Id. */
  int KEY = 177;
  /** RegularExpression Id. */
  int LAST = 178;
  /** RegularExpression Id. */
  int LEADING = 179;
  /** RegularExpression Id. */
  int LEFT = 180;
  /** RegularExpression Id. */
  int LIKE = 181;
  /** RegularExpression Id. */
  int LOWER = 182;
  /** RegularExpression Id. */
  int MATCH = 183;
  /** RegularExpression Id. */
  int MAX = 184;
  /** RegularExpression Id. */
  int MIN = 185;
  /** RegularExpression Id. */
  int MINUTE = 186;
  /** RegularExpression Id. */
  int MODULE = 187;
  /** RegularExpression Id. */
  int NATIONAL = 188;
  /** RegularExpression Id. */
  int NATURAL = 189;
  /** RegularExpression Id. */
  int NCHAR = 190;
  /** RegularExpression Id. */
  int NEXT = 191;
  /** RegularExpression Id. */
  int NO = 192;
  /** RegularExpression Id. */
  int NOT = 193;
  /** RegularExpression Id. */
  int NULL = 194;
  /** RegularExpression Id. */
  int NULLIF = 195;
  /** RegularExpression Id. */
  int NUMERIC = 196;
  /** RegularExpression Id. */
  int OCTET_LENGTH = 197;
  /** RegularExpression Id. */
  int OF = 198;
  /** RegularExpression Id. */
  int ON = 199;
  /** RegularExpression Id. */
  int ONLY = 200;
  /** RegularExpression Id. */
  int OPEN = 201;
  /** RegularExpression Id. */
  int OPTION = 202;
  /** RegularExpression Id. */
  int OR = 203;
  /** RegularExpression Id. */
  int ORDER = 204;
  /** RegularExpression Id. */
  int OUTER = 205;
  /** RegularExpression Id. */
  int OUTPUT = 206;
  /** RegularExpression Id. */
  int OVERLAPS = 207;
  /** RegularExpression Id. */
  int PAD = 208;
  /** RegularExpression Id. */
  int PARTIAL = 209;
  /** RegularExpression Id. */
  int PARTITION = 210;
  /** RegularExpression Id. */
  int PREPARE = 211;
  /** RegularExpression Id. */
  int PRESERVE = 212;
  /** RegularExpression Id. */
  int PRIMARY = 213;
  /** RegularExpression Id. */
  int PRIOR = 214;
  /** RegularExpression Id. */
  int PRIVILEGES = 215;
  /** RegularExpression Id. */
  int PROCEDURE = 216;
  /** RegularExpression Id. */
  int PUBLIC = 217;
  /** RegularExpression Id. */
  int READ = 218;
  /** RegularExpression Id. */
  int REAL = 219;
  /** RegularExpression Id. */
  int REFERENCES = 220;
  /** RegularExpression Id. */
  int RELATIVE = 221;
  /** RegularExpression Id. */
  int RESTRICT = 222;
  /** RegularExpression Id. */
  int REVOKE = 223;
  /** RegularExpression Id. */
  int RIGHT = 224;
  /** RegularExpression Id. */
  int ROLLBACK = 225;
  /** RegularExpression Id. */
  int ROWS = 226;
  /** RegularExpression Id. */
  int SCHEMA = 227;
  /** RegularExpression Id. */
  int SCROLL = 228;
  /** RegularExpression Id. */
  int SECOND = 229;
  /** RegularExpression Id. */
  int SELECT = 230;
  /** RegularExpression Id. */
  int SESSION = 231;
  /** RegularExpression Id. */
  int SESSION_USER = 232;
  /** RegularExpression Id. */
  int SET = 233;
  /** RegularExpression Id. */
  int SMALLINT = 234;
  /** RegularExpression Id. */
  int SOME = 235;
  /** RegularExpression Id. */
  int SPACE = 236;
  /** RegularExpression Id. */
  int SQL = 237;
  /** RegularExpression Id. */
  int SQLCODE = 238;
  /** RegularExpression Id. */
  int SQLERROR = 239;
  /** RegularExpression Id. */
  int SQLSTATE = 240;
  /** RegularExpression Id. */
  int SUBSTRING = 241;
  /** RegularExpression Id. */
  int SUM = 242;
  /** RegularExpression Id. */
  int SYSTEM_USER = 243;
  /** RegularExpression Id. */
  int T = 244;
  /** RegularExpression Id. */
  int TABLE = 245;
  /** RegularExpression Id. */
  int TEMPORARY = 246;
  /** RegularExpression Id. */
  int TIMEZONE_HOUR = 247;
  /** RegularExpression Id. */
  int TIMEZONE_MINUTE = 248;
  /** RegularExpression Id. */
  int TO = 249;
  /** RegularExpression Id. */
  int TRANSACTION = 250;
  /** RegularExpression Id. */
  int TRANSLATE = 251;
  /** RegularExpression Id. */
  int TRANSLATION = 252;
  /** RegularExpression Id. */
  int TRAILING = 253;
  /** RegularExpression Id. */
  int TRIM = 254;
  /** RegularExpression Id. */
  int TRUE = 255;
  /** RegularExpression Id. */
  int TS = 256;
  /** RegularExpression Id. */
  int UNION = 257;
  /** RegularExpression Id. */
  int UNIQUE = 258;
  /** RegularExpression Id. */
  int UNKNOWN = 259;
  /** RegularExpression Id. */
  int UPDATE = 260;
  /** RegularExpression Id. */
  int UPPER = 261;
  /** RegularExpression Id. */
  int USER = 262;
  /** RegularExpression Id. */
  int USING = 263;
  /** RegularExpression Id. */
  int VALUE = 264;
  /** RegularExpression Id. */
  int VALUES = 265;
  /** RegularExpression Id. */
  int VARBINARY = 266;
  /** RegularExpression Id. */
  int VARCHAR = 267;
  /** RegularExpression Id. */
  int VARYING = 268;
  /** RegularExpression Id. */
  int VIEW = 269;
  /** RegularExpression Id. */
  int WHENEVER = 270;
  /** RegularExpression Id. */
  int WHERE = 271;
  /** RegularExpression Id. */
  int WINDOW = 272;
  /** RegularExpression Id. */
  int WITH = 273;
  /** RegularExpression Id. */
  int WORK = 274;
  /** RegularExpression Id. */
  int WRITE = 275;
  /** RegularExpression Id. */
  int YEAR = 276;
  /** RegularExpression Id. */
  int CRATE = 277;
  /** RegularExpression Id. */
  int CLUSTERED = 278;
  /** RegularExpression Id. */
  int REPLICAS = 279;
  /** RegularExpression Id. */
  int SHARDS = 280;
  /** RegularExpression Id. */
  int ABS = 281;
  /** RegularExpression Id. */
  int ABSVAL = 282;
  /** RegularExpression Id. */
  int ACTION = 283;
  /** RegularExpression Id. */
  int ALWAYS = 284;
  /** RegularExpression Id. */
  int BLOB = 285;
  /** RegularExpression Id. */
  int C = 286;
  /** RegularExpression Id. */
  int CALLED = 287;
  /** RegularExpression Id. */
  int CHARACTERISTICS = 288;
  /** RegularExpression Id. */
  int CLOB = 289;
  /** RegularExpression Id. */
  int COBOL = 290;
  /** RegularExpression Id. */
  int COMMITTED = 291;
  /** RegularExpression Id. */
  int CONCAT = 292;
  /** RegularExpression Id. */
  int CONTAINS = 293;
  /** RegularExpression Id. */
  int CYCLE = 294;
  /** RegularExpression Id. */
  int DATA = 295;
  /** RegularExpression Id. */
  int DATE = 296;
  /** RegularExpression Id. */
  int DATETIME = 297;
  /** RegularExpression Id. */
  int DAY = 298;
  /** RegularExpression Id. */
  int DEFINER = 299;
  /** RegularExpression Id. */
  int DETERMINISTIC = 300;
  /** RegularExpression Id. */
  int DIV = 301;
  /** RegularExpression Id. */
  int DUMMY = 302;
  /** RegularExpression Id. */
  int DYNAMIC = 303;
  /** RegularExpression Id. */
  int EXTRACT = 304;
  /** RegularExpression Id. */
  int FORTRAN = 305;
  /** RegularExpression Id. */
  int GENERATED = 306;
  /** RegularExpression Id. */
  int IDENTITY_VAL_LOCAL = 307;
  /** RegularExpression Id. */
  int INCREMENT = 308;
  /** RegularExpression Id. */
  int INITIAL = 309;
  /** RegularExpression Id. */
  int INOUT = 310;
  /** RegularExpression Id. */
  int INTERVAL = 311;
  /** RegularExpression Id. */
  int INVOKER = 312;
  /** RegularExpression Id. */
  int LANGUAGE = 313;
  /** RegularExpression Id. */
  int LARGE = 314;
  /** RegularExpression Id. */
  int LENGTH = 315;
  /** RegularExpression Id. */
  int LEVEL = 316;
  /** RegularExpression Id. */
  int LOCKS = 317;
  /** RegularExpression Id. */
  int LOCKSIZE = 318;
  /** RegularExpression Id. */
  int LOGGED = 319;
  /** RegularExpression Id. */
  int MAXVALUE = 320;
  /** RegularExpression Id. */
  int MINVALUE = 321;
  /** RegularExpression Id. */
  int MOD = 322;
  /** RegularExpression Id. */
  int MODIFIES = 323;
  /** RegularExpression Id. */
  int MODIFY = 324;
  /** RegularExpression Id. */
  int MONTH = 325;
  /** RegularExpression Id. */
  int _MORE = 326;
  /** RegularExpression Id. */
  int MUMPS = 327;
  /** RegularExpression Id. */
  int NAME = 328;
  /** RegularExpression Id. */
  int NCLOB = 329;
  /** RegularExpression Id. */
  int NULLABLE = 330;
  /** RegularExpression Id. */
  int NULLS = 331;
  /** RegularExpression Id. */
  int NUMBER = 332;
  /** RegularExpression Id. */
  int OBJECT = 333;
  /** RegularExpression Id. */
  int OFFSET = 334;
  /** RegularExpression Id. */
  int PASCAL = 335;
  /** RegularExpression Id. */
  int PLI = 336;
  /** RegularExpression Id. */
  int POSITION = 337;
  /** RegularExpression Id. */
  int PRECISION = 338;
  /** RegularExpression Id. */
  int RELEASE = 339;
  /** RegularExpression Id. */
  int REPEATABLE = 340;
  /** RegularExpression Id. */
  int RESTART = 341;
  /** RegularExpression Id. */
  int RETURNS = 342;
  /** RegularExpression Id. */
  int ROLLUP = 343;
  /** RegularExpression Id. */
  int ROW = 344;
  /** RegularExpression Id. */
  int SAVEPOINT = 345;
  /** RegularExpression Id. */
  int SCALE = 346;
  /** RegularExpression Id. */
  int SECURITY = 347;
  /** RegularExpression Id. */
  int SEPARATOR = 348;
  /** RegularExpression Id. */
  int SERIALIZABLE = 349;
  /** RegularExpression Id. */
  int SQL_TSI_FRAC_SECOND = 350;
  /** RegularExpression Id. */
  int SQL_TSI_SECOND = 351;
  /** RegularExpression Id. */
  int SQL_TSI_MINUTE = 352;
  /** RegularExpression Id. */
  int SQL_TSI_HOUR = 353;
  /** RegularExpression Id. */
  int SQL_TSI_DAY = 354;
  /** RegularExpression Id. */
  int SQL_TSI_WEEK = 355;
  /** RegularExpression Id. */
  int SQL_TSI_MONTH = 356;
  /** RegularExpression Id. */
  int SQL_TSI_QUARTER = 357;
  /** RegularExpression Id. */
  int SQL_TSI_YEAR = 358;
  /** RegularExpression Id. */
  int START = 359;
  /** RegularExpression Id. */
  int STATEMENT = 360;
  /** RegularExpression Id. */
  int SYNONYM = 361;
  /** RegularExpression Id. */
  int THEN = 362;
  /** RegularExpression Id. */
  int TIME = 363;
  /** RegularExpression Id. */
  int TIMESTAMP = 364;
  /** RegularExpression Id. */
  int TIMESTAMPADD = 365;
  /** RegularExpression Id. */
  int TIMESTAMPDIFF = 366;
  /** RegularExpression Id. */
  int TRUNCATE = 367;
  /** RegularExpression Id. */
  int TYPE = 368;
  /** RegularExpression Id. */
  int UNCOMMITTED = 369;
  /** RegularExpression Id. */
  int USAGE = 370;
  /** RegularExpression Id. */
  int WHEN = 371;
  /** RegularExpression Id. */
  int BOOLEAN = 372;
  /** RegularExpression Id. */
  int CALL = 373;
  /** RegularExpression Id. */
  int CURDATE = 374;
  /** RegularExpression Id. */
  int CURRENT_ROLE = 375;
  /** RegularExpression Id. */
  int CURRENT_SCHEMA = 376;
  /** RegularExpression Id. */
  int CURTIME = 377;
  /** RegularExpression Id. */
  int DATABASE = 378;
  /** RegularExpression Id. */
  int GET_CURRENT_CONNECTION = 379;
  /** RegularExpression Id. */
  int GROUPING = 380;
  /** RegularExpression Id. */
  int EXPLAIN = 381;
  /** RegularExpression Id. */
  int LIMIT = 382;
  /** RegularExpression Id. */
  int LONG = 383;
  /** RegularExpression Id. */
  int LTRIM = 384;
  /** RegularExpression Id. */
  int NONE = 385;
  /** RegularExpression Id. */
  int OVER = 386;
  /** RegularExpression Id. */
  int RETURNING = 387;
  /** RegularExpression Id. */
  int ROLE = 388;
  /** RegularExpression Id. */
  int ROWNUMBER = 389;
  /** RegularExpression Id. */
  int RTRIM = 390;
  /** RegularExpression Id. */
  int STRAIGHT_JOIN = 391;
  /** RegularExpression Id. */
  int SUBSTR = 392;
  /** RegularExpression Id. */
  int XML = 393;
  /** RegularExpression Id. */
  int XMLEXISTS = 394;
  /** RegularExpression Id. */
  int XMLPARSE = 395;
  /** RegularExpression Id. */
  int XMLQUERY = 396;
  /** RegularExpression Id. */
  int XMLSERIALIZE = 397;
  /** RegularExpression Id. */
  int Z_ORDER_LAT_LON = 398;
  /** RegularExpression Id. */
  int FLOAT = 399;
  /** RegularExpression Id. */
  int AFTER = 400;
  /** RegularExpression Id. */
  int BEFORE = 401;
  /** RegularExpression Id. */
  int BRIEF = 402;
  /** RegularExpression Id. */
  int BTREE = 403;
  /** RegularExpression Id. */
  int CLASS = 404;
  /** RegularExpression Id. */
  int COMPRESS = 405;
  /** RegularExpression Id. */
  int CONTENT = 406;
  /** RegularExpression Id. */
  int COPY = 407;
  /** RegularExpression Id. */
  int CS = 408;
  /** RegularExpression Id. */
  int CSV = 409;
  /** RegularExpression Id. */
  int CURSORS = 410;
  /** RegularExpression Id. */
  int DAY_HOUR = 411;
  /** RegularExpression Id. */
  int DAY_MICROSECOND = 412;
  /** RegularExpression Id. */
  int DAY_MINUTE = 413;
  /** RegularExpression Id. */
  int DAY_SECOND = 414;
  /** RegularExpression Id. */
  int DB2SQL = 415;
  /** RegularExpression Id. */
  int DEFRAGMENT = 416;
  /** RegularExpression Id. */
  int DELIMITER = 417;
  /** RegularExpression Id. */
  int DIRTY = 418;
  /** RegularExpression Id. */
  int DOCUMENT = 419;
  /** RegularExpression Id. */
  int EACH = 420;
  /** RegularExpression Id. */
  int EMPTY = 421;
  /** RegularExpression Id. */
  int ENCODING = 422;
  /** RegularExpression Id. */
  int EXCLUSIVE = 423;
  /** RegularExpression Id. */
  int FN = 424;
  /** RegularExpression Id. */
  int FORCE = 425;
  /** RegularExpression Id. */
  int FORMAT = 426;
  /** RegularExpression Id. */
  int FULL_TEXT = 427;
  /** RegularExpression Id. */
  int HEADER = 428;
  /** RegularExpression Id. */
  int HOUR_MICROSECOND = 429;
  /** RegularExpression Id. */
  int HOUR_MINUTE = 430;
  /** RegularExpression Id. */
  int HOUR_SECOND = 431;
  /** RegularExpression Id. */
  int IGNORE = 432;
  /** RegularExpression Id. */
  int IN_MEMORY = 433;
  /** RegularExpression Id. */
  int INPLACE = 434;
  /** RegularExpression Id. */
  int INTERRUPT = 435;
  /** RegularExpression Id. */
  int JAVA = 436;
  /** RegularExpression Id. */
  int KILL = 437;
  /** RegularExpression Id. */
  int LCASE = 438;
  /** RegularExpression Id. */
  int LOCATE = 439;
  /** RegularExpression Id. */
  int LOCK = 440;
  /** RegularExpression Id. */
  int LONGBLOB = 441;
  /** RegularExpression Id. */
  int LONGINT = 442;
  /** RegularExpression Id. */
  int LONGTEXT = 443;
  /** RegularExpression Id. */
  int MEDIUMBLOB = 444;
  /** RegularExpression Id. */
  int MEDIUMINT = 445;
  /** RegularExpression Id. */
  int MEDIUMTEXT = 446;
  /** RegularExpression Id. */
  int MESSAGE_LOCALE = 447;
  /** RegularExpression Id. */
  int METHOD = 448;
  /** RegularExpression Id. */
  int MICROSECOND = 449;
  /** RegularExpression Id. */
  int MINUTE_MICROSECOND = 450;
  /** RegularExpression Id. */
  int MINUTE_SECOND = 451;
  /** RegularExpression Id. */
  int MODE = 452;
  /** RegularExpression Id. */
  int MYSQL_DUMP = 453;
  /** RegularExpression Id. */
  int NEW = 454;
  /** RegularExpression Id. */
  int NEW_TABLE = 455;
  /** RegularExpression Id. */
  int NVARCHAR = 456;
  /** RegularExpression Id. */
  int OFF = 457;
  /** RegularExpression Id. */
  int OJ = 458;
  /** RegularExpression Id. */
  int OLD = 459;
  /** RegularExpression Id. */
  int OLD_TABLE = 460;
  /** RegularExpression Id. */
  int OUT = 461;
  /** RegularExpression Id. */
  int PARAMETER = 462;
  /** RegularExpression Id. */
  int PASSING = 463;
  /** RegularExpression Id. */
  int PROPERTIES = 464;
  /** RegularExpression Id. */
  int PURGE = 465;
  /** RegularExpression Id. */
  int QUARTER = 466;
  /** RegularExpression Id. */
  int _QUOTE = 467;
  /** RegularExpression Id. */
  int READS = 468;
  /** RegularExpression Id. */
  int REF = 469;
  /** RegularExpression Id. */
  int REFERENCING = 470;
  /** RegularExpression Id. */
  int RENAME = 471;
  /** RegularExpression Id. */
  int REPLACE = 472;
  /** RegularExpression Id. */
  int RESET = 473;
  /** RegularExpression Id. */
  int RESULT = 474;
  /** RegularExpression Id. */
  int RETAIN = 475;
  /** RegularExpression Id. */
  int RR = 476;
  /** RegularExpression Id. */
  int RS = 477;
  /** RegularExpression Id. */
  int SECOND_MICROSECOND = 478;
  /** RegularExpression Id. */
  int SERVER = 479;
  /** RegularExpression Id. */
  int SEQUENCE = 480;
  /** RegularExpression Id. */
  int SEQUENTIAL = 481;
  /** RegularExpression Id. */
  int SETS = 482;
  /** RegularExpression Id. */
  int SHARE = 483;
  /** RegularExpression Id. */
  int SHUTDOWN = 484;
  /** RegularExpression Id. */
  int SPECIFIC = 485;
  /** RegularExpression Id. */
  int SQLID = 486;
  /** RegularExpression Id. */
  int SQRT = 487;
  /** RegularExpression Id. */
  int STABILITY = 488;
  /** RegularExpression Id. */
  int STATISTICS = 489;
  /** RegularExpression Id. */
  int STDIN = 490;
  /** RegularExpression Id. */
  int STDOUT = 491;
  /** RegularExpression Id. */
  int STRIP = 492;
  /** RegularExpression Id. */
  int STYLE = 493;
  /** RegularExpression Id. */
  int TEXT = 494;
  /** RegularExpression Id. */
  int TINYBLOB = 495;
  /** RegularExpression Id. */
  int TINYINT = 496;
  /** RegularExpression Id. */
  int TINYTEXT = 497;
  /** RegularExpression Id. */
  int TRIGGER = 498;
  /** RegularExpression Id. */
  int TRUNCATE_END = 499;
  /** RegularExpression Id. */
  int UCASE = 500;
  /** RegularExpression Id. */
  int UNSIGNED = 501;
  /** RegularExpression Id. */
  int UR = 502;
  /** RegularExpression Id. */
  int USE = 503;
  /** RegularExpression Id. */
  int VERBOSE = 504;
  /** RegularExpression Id. */
  int WEEK = 505;
  /** RegularExpression Id. */
  int WHITESPACE = 506;
  /** RegularExpression Id. */
  int YEAR_MONTH = 507;
  /** RegularExpression Id. */
  int PERCENT = 508;
  /** RegularExpression Id. */
  int AMPERSAND = 509;
  /** RegularExpression Id. */
  int CARET = 510;
  /** RegularExpression Id. */
  int VERTICAL_BAR = 511;
  /** RegularExpression Id. */
  int TILDE = 512;
  /** RegularExpression Id. */
  int QUOTE = 513;
  /** RegularExpression Id. */
  int LEFT_BRACE = 514;
  /** RegularExpression Id. */
  int RIGHT_BRACE = 515;
  /** RegularExpression Id. */
  int LEFT_PAREN = 516;
  /** RegularExpression Id. */
  int RIGHT_PAREN = 517;
  /** RegularExpression Id. */
  int ASTERISK = 518;
  /** RegularExpression Id. */
  int PLUS_SIGN = 519;
  /** RegularExpression Id. */
  int COMMA = 520;
  /** RegularExpression Id. */
  int MINUS_SIGN = 521;
  /** RegularExpression Id. */
  int PERIOD = 522;
  /** RegularExpression Id. */
  int SOLIDUS = 523;
  /** RegularExpression Id. */
  int COLON = 524;
  /** RegularExpression Id. */
  int DOUBLE_COLON = 525;
  /** RegularExpression Id. */
  int SEMICOLON = 526;
  /** RegularExpression Id. */
  int LESS_THAN_OPERATOR = 527;
  /** RegularExpression Id. */
  int LESS_THAN_OR_EQUALS_OPERATOR = 528;
  /** RegularExpression Id. */
  int EQUALS_OPERATOR = 529;
  /** RegularExpression Id. */
  int NOT_EQUALS_OPERATOR = 530;
  /** RegularExpression Id. */
  int NOT_EQUALS_OPERATOR2 = 531;
  /** RegularExpression Id. */
  int GREATER_THAN_OPERATOR = 532;
  /** RegularExpression Id. */
  int GREATER_THAN_OR_EQUALS_OPERATOR = 533;
  /** RegularExpression Id. */
  int QUESTION_MARK = 534;
  /** RegularExpression Id. */
  int UNDERSCORE = 535;
  /** RegularExpression Id. */
  int LEFT_BRACKET = 536;
  /** RegularExpression Id. */
  int RIGHT_BRACKET = 537;
  /** RegularExpression Id. */
  int DOUBLE_LESS = 538;
  /** RegularExpression Id. */
  int DOUBLE_GREATER = 539;
  /** RegularExpression Id. */
  int FIELD_REFERENCE = 540;
  /** RegularExpression Id. */
  int ASTERISK_ASTERISK = 541;
  /** RegularExpression Id. */
  int CONCATENATION_OPERATOR = 542;
  /** RegularExpression Id. */
  int DOUBLE_AMPERSAND = 543;
  /** RegularExpression Id. */
  int IDENTIFIER = 544;
  /** RegularExpression Id. */
  int DOLLAR_N = 545;
  /** RegularExpression Id. */
  int K = 546;
  /** RegularExpression Id. */
  int M = 547;
  /** RegularExpression Id. */
  int G = 548;
  /** RegularExpression Id. */
  int LETTER = 549;
  /** RegularExpression Id. */
  int DIGIT = 550;
  /** RegularExpression Id. */
  int BACKQUOTED_IDENTIFIER = 551;
  /** RegularExpression Id. */
  int DOUBLEQUOTED_IDENTIFIER = 553;
  /** RegularExpression Id. */
  int DOUBLEQUOTED_STRING = 554;
  /** RegularExpression Id. */
  int DOUBLEDOLLAR_STRING = 556;
  /** RegularExpression Id. */
  int EXACT_NUMERIC = 558;
  /** RegularExpression Id. */
  int UINT = 559;
  /** RegularExpression Id. */
  int LENGTH_MODIFIER = 560;
  /** RegularExpression Id. */
  int SINGLEQUOTED_STRING = 561;
  /** RegularExpression Id. */
  int HEX_STRING = 562;
  /** RegularExpression Id. */
  int APPROXIMATE_NUMERIC = 563;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_BRACKETED_COMMENT = 1;
  /** Lexical state. */
  int IN_NESTED_BRACKETED_COMMENT = 2;
  /** Lexical state. */
  int IN_COMMENT = 3;
  /** Lexical state. */
  int LOOKFOR_DE = 4;
  /** Lexical state. */
  int LOOKFOR_DER = 5;
  /** Lexical state. */
  int LOOKFOR_DERB = 6;
  /** Lexical state. */
  int LOOKFOR_DERBY = 7;
  /** Lexical state. */
  int LOOKFOR_DERBYDASH = 8;
  /** Lexical state. */
  int LOOKFOR_DERBYDASHP = 9;
  /** Lexical state. */
  int LOOKFOR_DERBYDASHPR = 10;
  /** Lexical state. */
  int LOOKFOR_DERBYDASHPRO = 11;
  /** Lexical state. */
  int LOOKFOR_DERBYDASHPROP = 12;
  /** Lexical state. */
  int LOOKFOR_DERBYDASHPROPE = 13;
  /** Lexical state. */
  int LOOKFOR_DERBYDASHPROPER = 14;
  /** Lexical state. */
  int LOOKFOR_DERBYDASHPROPERT = 15;
  /** Lexical state. */
  int LOOKFOR_DERBYDASHPROPERTI = 16;
  /** Lexical state. */
  int LOOKFOR_DERBYDASHPROPERTIE = 17;
  /** Lexical state. */
  int LOOKFOR_DERBYDASHPROPERTIES = 18;
  /** Lexical state. */
  int IT_IS_NOT_DERBYPROPERTIES_COMMENT = 19;
  /** Lexical state. */
  int PROPERTIES_LIST = 20;
  /** Lexical state. */
  int IN_DOUBLEQUOTED_IDENTIFIER = 21;
  /** Lexical state. */
  int IN_DOUBLEQUOTED_STRING = 22;
  /** Lexical state. */
  int IN_DOUBLEDOLLAR_STRING = 23;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"/*\"",
    "\"/*\"",
    "\"*/\"",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 10>",
    "\"--\"",
    "\" \"",
    "\"\\t\"",
    "\"D\"",
    "<token of kind 15>",
    "<NOT_D>",
    "\"E\"",
    "<token of kind 18>",
    "<NOT_DE>",
    "\"R\"",
    "<token of kind 21>",
    "<NOT_DER>",
    "\"B\"",
    "<token of kind 24>",
    "<NOT_DERB>",
    "\"Y\"",
    "<token of kind 27>",
    "<NOT_DERBY>",
    "\"-\"",
    "<token of kind 30>",
    "<NOT_DERBYDASH>",
    "\"P\"",
    "<token of kind 33>",
    "<NOT_DERBYDASHP>",
    "\"R\"",
    "<token of kind 36>",
    "<NOT_DERBYDASHPR>",
    "\"O\"",
    "<token of kind 39>",
    "<NOT_DERBYDASHPRO>",
    "\"P\"",
    "<token of kind 42>",
    "<NOT_DERBYDASHPROP>",
    "\"E\"",
    "<token of kind 45>",
    "<NOT_DERBYDASHPROPE>",
    "\"R\"",
    "<token of kind 48>",
    "<NOT_DERBYDASHPROPER>",
    "\"T\"",
    "<token of kind 51>",
    "<NOT_DERBYDASHPROPERT>",
    "\"I\"",
    "<token of kind 54>",
    "<NOT_DERBYDASHPROPERTI>",
    "\"E\"",
    "<token of kind 57>",
    "<NOT_DERBYDASHPROPERTIE>",
    "\"DERBYDASHPROPERTIES\"",
    "\"S\"",
    "<token of kind 61>",
    "<NOT_PROPERTIES>",
    "<SINGLE_LINE_SQLCOMMENT>",
    "<CHECK_PROPERTIES>",
    "\"add\"",
    "\"all\"",
    "\"allocate\"",
    "\"alter\"",
    "\"and\"",
    "\"any\"",
    "\"are\"",
    "\"as\"",
    "\"asc\"",
    "\"assertion\"",
    "\"at\"",
    "\"authorization\"",
    "\"avg\"",
    "\"begin\"",
    "\"between\"",
    "\"binary\"",
    "\"bit\"",
    "\"both\"",
    "\"by\"",
    "\"cascade\"",
    "\"cascaded\"",
    "\"case\"",
    "\"cast\"",
    "\"char\"",
    "\"character\"",
    "\"character_length\"",
    "\"char_length\"",
    "\"check\"",
    "\"close\"",
    "\"coalesce\"",
    "\"collate\"",
    "\"collation\"",
    "\"column\"",
    "\"commit\"",
    "\"connect\"",
    "\"connection\"",
    "\"constraint\"",
    "\"constraints\"",
    "\"continue\"",
    "\"convert\"",
    "\"corresponding\"",
    "\"count\"",
    "\"create\"",
    "\"cross\"",
    "\"current\"",
    "\"current_date\"",
    "\"current_time\"",
    "\"current_timestamp\"",
    "\"current_user\"",
    "\"cursor\"",
    "\"d\"",
    "\"deallocate\"",
    "\"dec\"",
    "\"decimal\"",
    "\"declare\"",
    "\"default\"",
    "\"deferrable\"",
    "\"deferred\"",
    "\"delete\"",
    "\"desc\"",
    "\"describe\"",
    "\"diagnostics\"",
    "\"disconnect\"",
    "\"distinct\"",
    "\"double\"",
    "\"drop\"",
    "\"else\"",
    "\"end\"",
    "\"end-exec\"",
    "\"escape\"",
    "\"except\"",
    "\"exception\"",
    "\"exec\"",
    "\"execute\"",
    "\"exists\"",
    "\"external\"",
    "\"false\"",
    "\"fetch\"",
    "\"first\"",
    "\"for\"",
    "\"foreign\"",
    "\"found\"",
    "\"from\"",
    "\"full\"",
    "\"function\"",
    "\"get\"",
    "\"global\"",
    "\"go\"",
    "\"goto\"",
    "\"grant\"",
    "\"group\"",
    "\"group_concat\"",
    "\"having\"",
    "\"hour\"",
    "\"identity\"",
    "\"if\"",
    "\"immediate\"",
    "\"in\"",
    "\"index\"",
    "\"indicator\"",
    "\"initially\"",
    "\"inner\"",
    "\"input\"",
    "\"insensitive\"",
    "\"insert\"",
    "\"int\"",
    "\"integer\"",
    "\"intersect\"",
    "\"into\"",
    "\"is\"",
    "\"isolation\"",
    "\"join\"",
    "\"key\"",
    "\"last\"",
    "\"leading\"",
    "\"left\"",
    "\"like\"",
    "\"lower\"",
    "\"match\"",
    "\"max\"",
    "\"min\"",
    "\"minute\"",
    "\"module\"",
    "\"national\"",
    "\"natural\"",
    "\"nchar\"",
    "\"next\"",
    "\"no\"",
    "\"not\"",
    "\"null\"",
    "\"nullif\"",
    "\"numeric\"",
    "\"octet_length\"",
    "\"of\"",
    "\"on\"",
    "\"only\"",
    "\"open\"",
    "\"option\"",
    "\"or\"",
    "\"order\"",
    "\"outer\"",
    "\"output\"",
    "\"overlaps\"",
    "\"pad\"",
    "\"partial\"",
    "\"partition\"",
    "\"prepare\"",
    "\"preserve\"",
    "\"primary\"",
    "\"prior\"",
    "\"privileges\"",
    "\"procedure\"",
    "\"public\"",
    "\"read\"",
    "\"real\"",
    "\"references\"",
    "\"relative\"",
    "\"restrict\"",
    "\"revoke\"",
    "\"right\"",
    "\"rollback\"",
    "\"rows\"",
    "\"schema\"",
    "\"scroll\"",
    "\"second\"",
    "\"select\"",
    "\"session\"",
    "\"session_user\"",
    "\"set\"",
    "\"smallint\"",
    "\"some\"",
    "\"space\"",
    "\"sql\"",
    "\"sqlcode\"",
    "\"sqlerror\"",
    "\"sqlstate\"",
    "\"substring\"",
    "\"sum\"",
    "\"system_user\"",
    "\"t\"",
    "\"table\"",
    "\"temporary\"",
    "\"timezone_hour\"",
    "\"timezone_minute\"",
    "\"to\"",
    "\"transaction\"",
    "\"translate\"",
    "\"translation\"",
    "\"trailing\"",
    "\"trim\"",
    "\"true\"",
    "\"ts\"",
    "\"union\"",
    "\"unique\"",
    "\"unknown\"",
    "\"update\"",
    "\"upper\"",
    "\"user\"",
    "\"using\"",
    "\"value\"",
    "\"values\"",
    "\"varbinary\"",
    "\"varchar\"",
    "\"varying\"",
    "\"view\"",
    "\"whenever\"",
    "\"where\"",
    "\"window\"",
    "\"with\"",
    "\"work\"",
    "\"write\"",
    "\"year\"",
    "\"crate\"",
    "\"clustered\"",
    "\"replicas\"",
    "\"shards\"",
    "\"abs\"",
    "\"absval\"",
    "\"action\"",
    "\"always\"",
    "\"blob\"",
    "\"c\"",
    "\"called\"",
    "\"characteristics\"",
    "\"clob\"",
    "\"cobol\"",
    "\"committed\"",
    "\"concat\"",
    "\"contains\"",
    "\"cycle\"",
    "\"data\"",
    "\"date\"",
    "\"datetime\"",
    "\"day\"",
    "\"definer\"",
    "\"deterministic\"",
    "\"div\"",
    "\"dummy\"",
    "\"dynamic\"",
    "\"extract\"",
    "\"fortran\"",
    "\"generated\"",
    "\"identity_val_local\"",
    "\"increment\"",
    "\"initial\"",
    "\"inout\"",
    "\"interval\"",
    "\"invoker\"",
    "\"language\"",
    "\"large\"",
    "\"length\"",
    "\"level\"",
    "\"locks\"",
    "\"locksize\"",
    "\"logged\"",
    "\"maxvalue\"",
    "\"minvalue\"",
    "\"mod\"",
    "\"modifies\"",
    "\"modify\"",
    "\"month\"",
    "\"more\"",
    "\"mumps\"",
    "\"name\"",
    "\"nclob\"",
    "\"nullable\"",
    "\"nulls\"",
    "\"number\"",
    "\"object\"",
    "\"offset\"",
    "\"pascal\"",
    "\"pli\"",
    "\"position\"",
    "\"precision\"",
    "\"release\"",
    "\"repeatable\"",
    "\"restart\"",
    "\"returns\"",
    "\"rollup\"",
    "\"row\"",
    "\"savepoint\"",
    "\"scale\"",
    "\"security\"",
    "\"separator\"",
    "\"serializable\"",
    "\"sql_tsi_frac_second\"",
    "\"sql_tsi_second\"",
    "\"sql_tsi_minute\"",
    "\"sql_tsi_hour\"",
    "\"sql_tsi_day\"",
    "\"sql_tsi_week\"",
    "\"sql_tsi_month\"",
    "\"sql_tsi_quarter\"",
    "\"sql_tsi_year\"",
    "\"start\"",
    "\"statement\"",
    "\"synonym\"",
    "\"then\"",
    "\"time\"",
    "\"timestamp\"",
    "\"timestampadd\"",
    "\"timestampdiff\"",
    "\"truncate\"",
    "\"type\"",
    "\"uncommitted\"",
    "\"usage\"",
    "\"when\"",
    "\"boolean\"",
    "\"call\"",
    "\"curdate\"",
    "\"current_role\"",
    "\"current_schema\"",
    "\"curtime\"",
    "\"database\"",
    "\"getCurrentConnection\"",
    "\"grouping\"",
    "\"explain\"",
    "\"limit\"",
    "\"long\"",
    "\"ltrim\"",
    "\"none\"",
    "\"over\"",
    "\"returning\"",
    "\"role\"",
    "\"row_number\"",
    "\"rtrim\"",
    "\"straight_join\"",
    "\"substr\"",
    "\"xml\"",
    "\"xmlexists\"",
    "\"xmlparse\"",
    "\"xmlquery\"",
    "\"xmlserialize\"",
    "\"z_order_lat_lon\"",
    "\"float\"",
    "\"after\"",
    "\"before\"",
    "\"brief\"",
    "\"btree\"",
    "\"class\"",
    "\"compress\"",
    "\"content\"",
    "\"copy\"",
    "\"cs\"",
    "\"csv\"",
    "\"cursors\"",
    "\"day_hour\"",
    "\"day_microsecond\"",
    "\"day_minute\"",
    "\"day_second\"",
    "\"db2sql\"",
    "\"defragment\"",
    "\"delimiter\"",
    "\"dirty\"",
    "\"document\"",
    "\"each\"",
    "\"empty\"",
    "\"encoding\"",
    "\"exclusive\"",
    "\"fn\"",
    "\"force\"",
    "\"format\"",
    "\"full_text\"",
    "\"header\"",
    "\"hour_microsecond\"",
    "\"hour_minute\"",
    "\"hour_second\"",
    "\"ignore\"",
    "\"in_memory\"",
    "\"inplace\"",
    "\"interrupt\"",
    "\"java\"",
    "\"kill\"",
    "\"lcase\"",
    "\"locate\"",
    "\"lock\"",
    "\"longblob\"",
    "\"bigint\"",
    "\"longtext\"",
    "\"mediumblob\"",
    "\"mediumint\"",
    "\"mediumtext\"",
    "\"message_locale\"",
    "\"method\"",
    "\"microsecond\"",
    "\"minute_microsecond\"",
    "\"minute_second\"",
    "\"mode\"",
    "\"mysql_dump\"",
    "\"new\"",
    "\"new_table\"",
    "\"nvarchar\"",
    "\"off\"",
    "\"oj\"",
    "\"old\"",
    "\"old_table\"",
    "\"out\"",
    "\"parameter\"",
    "\"passing\"",
    "\"properties\"",
    "\"purge\"",
    "\"quarter\"",
    "\"quote\"",
    "\"reads\"",
    "\"ref\"",
    "\"referencing\"",
    "\"rename\"",
    "\"replace\"",
    "\"reset\"",
    "\"result\"",
    "\"retain\"",
    "\"rr\"",
    "\"rs\"",
    "\"second_microsecond\"",
    "\"server\"",
    "\"sequence\"",
    "\"sequential\"",
    "\"sets\"",
    "\"share\"",
    "\"shutdown\"",
    "\"specific\"",
    "\"sqlid\"",
    "\"sqrt\"",
    "\"stability\"",
    "\"statistics\"",
    "\"stdin\"",
    "\"stdout\"",
    "\"strip\"",
    "\"style\"",
    "\"text\"",
    "\"tinyblob\"",
    "\"tinyint\"",
    "\"tinytext\"",
    "\"trigger\"",
    "\"truncate_end\"",
    "\"ucase\"",
    "\"unsigned\"",
    "\"ur\"",
    "\"use\"",
    "\"verbose\"",
    "\"week\"",
    "\"whitespace\"",
    "\"year_month\"",
    "\"%\"",
    "\"&\"",
    "\"^\"",
    "\"|\"",
    "\"~\"",
    "\"\\\'\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\"*\"",
    "\"+\"",
    "\",\"",
    "\"-\"",
    "\".\"",
    "\"/\"",
    "\":\"",
    "\"::\"",
    "\";\"",
    "\"<\"",
    "\"<=\"",
    "\"=\"",
    "\"<>\"",
    "\"!=\"",
    "\">\"",
    "\">=\"",
    "\"?\"",
    "\"_\"",
    "\"[\"",
    "\"]\"",
    "\"<<\"",
    "\">>\"",
    "\"->\"",
    "\"**\"",
    "\"||\"",
    "\"&&\"",
    "<IDENTIFIER>",
    "<DOLLAR_N>",
    "\"K\"",
    "\"M\"",
    "\"G\"",
    "<LETTER>",
    "<DIGIT>",
    "<BACKQUOTED_IDENTIFIER>",
    "\"\\\"\"",
    "<DOUBLEQUOTED_IDENTIFIER>",
    "<DOUBLEQUOTED_STRING>",
    "\"$$\"",
    "\"$$\"",
    "<token of kind 557>",
    "<EXACT_NUMERIC>",
    "<UINT>",
    "<LENGTH_MODIFIER>",
    "<SINGLEQUOTED_STRING>",
    "<HEX_STRING>",
    "<APPROXIMATE_NUMERIC>",
  };

}
