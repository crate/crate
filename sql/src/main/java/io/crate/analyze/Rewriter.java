/*
 * Licensed to Crate under one or more contributor license agreements.
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.  Crate licenses this file
 * to you under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.  You may
 * obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied.  See the License for the specific language governing
 * permissions and limitations under the License.
 *
 * However, if you have executed another commercial license agreement
 * with Crate these terms will supersede the license and you may use the
 * software solely pursuant to the terms of the relevant commercial
 * agreement.
 */

package io.crate.analyze;

import com.google.common.base.Function;
import com.google.common.base.Predicate;
import com.google.common.collect.Sets;
import io.crate.analyze.relations.JoinPair;
import io.crate.analyze.relations.QuerySplitter;
import io.crate.analyze.symbol.Literal;
import io.crate.analyze.symbol.RelationColumn;
import io.crate.analyze.symbol.Symbol;
import io.crate.analyze.symbol.Symbols;
import io.crate.metadata.Functions;
import io.crate.metadata.NestedReferenceResolver;
import io.crate.metadata.RowGranularity;
import io.crate.operation.operator.AndOperator;
import io.crate.planner.node.dql.join.JoinType;
import io.crate.sql.tree.QualifiedName;
import org.elasticsearch.common.inject.Inject;
import org.elasticsearch.common.inject.Singleton;

import javax.annotation.Nullable;
import java.util.Map;
import java.util.Set;

@Singleton
public class Rewriter {

    private final EvaluatingNormalizer normalizer;

    @Inject
    public Rewriter(Functions functions, NestedReferenceResolver globalRefResolver) {
        normalizer = new EvaluatingNormalizer(
            functions,
            RowGranularity.CLUSTER,
            globalRefResolver,
            null,
            false
        );
    }


    /**
     * Rewrite an Outer join to an inner join if possible.
     *
     * Conditions on OUTER tables are not pushed down when a MultiSourceSelect is initially created because
     * the whereClause needs to be checked AFTER the join
     * (because if the join generates NULL rows the whereClause could become TRUE on those NULL rows)
     *
     * See the following two examples where <code>t2</code> is the OUTER table:
     *
     * <pre>
     *     select * from t1
     *          left join t2 on t1.t2_id = t2.id
     *     where
     *          coalesce(t2.x, 20) > 10   # becomes TRUE for null rows
     * </pre>
     *
     *
     *
     * But if we know that the whereClause cannot possible become TRUE then we can push it down
     * (re-writing this into an inner join)
     *
     * This is possible because all rows that are generated by the left-join would be removed again by the whereClause anyway.
     *
     * <pre>
     *     select * from t1
     *          left join t2 on t1.t2_id = t2.id
     *     where
     *          t2.x > 10   # if t2.x is NULL this is always FALSE
     * </pre>
     */
    public void tryRewriteOuterToInnerJoin(JoinPair joinPair,
                                           QuerySpec multiSourceQuerySpec,
                                           QualifiedName left,
                                           QualifiedName right,
                                           QuerySpec leftQuerySpec,
                                           QuerySpec rightQuerySpec) {
        assert left.equals(joinPair.left()) : "This JoinPair has a different left Qualified name: " + joinPair.left();
        assert right.equals(joinPair.right()) : "This JoinPair has a different left Qualified name: " + joinPair.right();

        JoinType joinType = joinPair.joinType();
        if (!joinType.isOuter()) {
            return;
        }
        WhereClause where = multiSourceQuerySpec.where();
        if (!where.hasQuery()) {
            return;
        }
        final QualifiedName outerRelation;
        final QuerySpec outerSpec;
        if (joinType == JoinType.LEFT) {
            outerRelation = right;
            outerSpec = rightQuerySpec;
        } else {
            outerRelation = left;
            outerSpec = leftQuerySpec;
        }
        Map<Set<QualifiedName>, Symbol> splitQueries = QuerySplitter.split(where.query());
        Symbol outerRelationQuery = splitQueries.remove(Sets.newHashSet(outerRelation));
        if (outerRelationQuery == null) {
            return;
        }

        RelationColumnPredicate relationColumnPredicate = new RelationColumnPredicate(outerRelation);
        Symbol symbol = Symbols.replaceRC(
            outerRelationQuery,
            relationColumnPredicate,
            com.google.common.base.Functions.constant(Literal.NULL)
        );
        Symbol normalized = normalizer.normalize(symbol, null);
        if (WhereClause.canMatch(normalized)) {
            return; // can't rewrite
        }

        joinPair.joinType(JoinType.INNER);
        outerSpec.where(outerSpec.where().add(Symbols.replaceRC(
            outerRelationQuery,
            relationColumnPredicate,
            new Function<RelationColumn, Symbol>() {
                @Nullable
                @Override
                public Symbol apply(@Nullable RelationColumn input) {
                    if (input == null) {
                        return null;
                    }
                    // TODO: gather those inputs and figure out if they can be removed from the outputs?
                    // maybe mss.fields() can be used to do so?
                    return outerSpec.outputs().get(input.index());
                }
            })));
        if (splitQueries.isEmpty()) {
            multiSourceQuerySpec.where(WhereClause.MATCH_ALL);
        } else {
            multiSourceQuerySpec.where(new WhereClause(AndOperator.join(splitQueries.values())));
        }
    }

    private static class RelationColumnPredicate implements Predicate<RelationColumn> {
        private final QualifiedName outerRelation;

        RelationColumnPredicate(QualifiedName outerRelation) {
            this.outerRelation = outerRelation;
        }

        @Override
        public boolean apply(@Nullable RelationColumn input) {
            return input != null && input.relationName().equals(outerRelation);
        }
    }
}
