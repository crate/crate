/*
 * Licensed to CRATE Technology GmbH ("Crate") under one or more contributor
 * license agreements.  See the NOTICE file distributed with this work for
 * additional information regarding copyright ownership.  Crate licenses
 * this file to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.  You may
 * obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * However, if you have executed another commercial license agreement
 * with Crate these terms will supersede the license and you may use the
 * software solely pursuant to the terms of the relevant commercial agreement.
 */

package io.crate.analyze;

import com.google.common.base.Preconditions;
import io.crate.metadata.ReferenceIdent;
import io.crate.metadata.ReferenceInfo;
import io.crate.metadata.TableIdent;
import io.crate.planner.symbol.Reference;
import io.crate.planner.symbol.Symbol;
import io.crate.planner.symbol.ValueSymbol;
import io.crate.sql.tree.*;
import org.cratedb.sql.CrateException;

import java.util.ArrayList;
import java.util.List;

public class InsertStatementAnalyzer extends DataStatementAnalyzer<InsertAnalysis> {

    @Override
    public Symbol visitInsert(Insert node, InsertAnalysis context) {
        process(node.table(), context);

        if (context.table().isAlias()) {
            throw new IllegalArgumentException("Table alias not allowed in INSERT statement.");
        }
        int maxValuesLength = node.maxValuesLength();
        if (node.columns().size() == 0) {
            if (maxValuesLength > context.table().columns().size()) {
                throw new IllegalArgumentException("too many values");
            }
            // no columns given in statement
            List<Reference> impliedColumns = new ArrayList<>(maxValuesLength);
            int i = maxValuesLength;
            context.columns(impliedColumns);
            for (ReferenceInfo columnInfo : context.table().columns()) {
                if (i==0) { break; }
                // set primary key index if found
                if (context.table().primaryKey().contains(columnInfo.ident().columnIdent().name())) {
                    context.addPrimaryKeyColumnIdx(impliedColumns.size());
                }
                impliedColumns.add(new Reference(columnInfo));
                i--;
            }

        } else {
            if (maxValuesLength > node.columns().size()) {
                throw new IllegalArgumentException("too many values");
            }
            context.columns(new ArrayList<Reference>(node.columns().size()));
        }

        context.allocateValues(node.valuesLists().size());

        for (QualifiedNameReference column : node.columns()) {
            process(column, context);
        }
        if (!context.table().hasAutoGeneratedPrimaryKey() && context.primaryKeyColumnIndices().size() == 0) {
            throw new IllegalArgumentException("Primary key is required but is missing from the insert statement");
        }

        context.visitValues();
        for (ValuesList valuesList : node.valuesLists()) {
            process(valuesList, context);
        }

        return null;
    }

    @Override
    protected Symbol visitTable(Table node, InsertAnalysis context) {
        Preconditions.checkState(context.table() == null, "inserting into multiple tables is not supported");
        context.editableTable(TableIdent.of(node));
        return null;
    }

    /**
     * visit columns, if given in statement
     */
    @Override
    protected Symbol visitQualifiedNameReference(QualifiedNameReference node, InsertAnalysis context) {
        if (context.isVisitingValues()) {
            // column references not allowed in values, throw an error here
            throw new CrateException("column references not allowed in insert values.");
        }
        ReferenceIdent ident = context.getReference(node.getName());

        // set primary key index if found
        if (context.table().primaryKey().contains(ident.columnIdent().name())) {
            context.addPrimaryKeyColumnIdx(context.columns().size());
        }

        // ensure that every column is only listed once
        Reference columnReference = context.allocateUniqueReference(ident);
        context.columns().add(columnReference);
        return columnReference;
    }

    @Override
    public Symbol visitValuesList(ValuesList node, InsertAnalysis context) {
        List<Symbol> symbols = new ArrayList<>();

        int i = 0;
        if (node.values().size() != context.columns().size()) {
            throw new IllegalArgumentException("incorrect number of values");
        }
        for (Expression value : node.values()) {
            // TODO: instead of doing a type guessing and then a convertion this could
            // be improved by using the dataType from the column Reference as a hint
            Symbol valuesSymbol = process(value, context);
            assert valuesSymbol instanceof ValueSymbol;

            // implicit type conversion
            Reference column = context.columns().get(i);
            try {
                valuesSymbol = context.normalizeInputValue(valuesSymbol, column);
            } catch (IllegalArgumentException e) {
                throw new CrateException(e.getMessage(), e);
            }
            symbols.add(valuesSymbol);
            i++;
        }
        context.values().add(symbols);
        return null;
    }
}
