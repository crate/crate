apply plugin: 'idea'
apply plugin: 'java'

archivesBaseName = 'crate-sql'

// we do not want to have elasticsearch here, since we provide it in :es
configurations {
    all*.exclude group: 'org.elasticsearch'
    sharedCompile.extendsFrom compile
}

dependencies {
    compile project(':es')
    compile project(':core')
    compile project(':blob')
    compile project(':sql-parser')
    compile 'com.amazonaws:aws-java-sdk:1.8.7'
    compile 'org.apache.commons:commons-math3:3.4.1'
    testCompile project(':testing')
    testCompile 'org.skyscreamer:jsonassert:1.2.0'
    testCompile 'com.h2database:h2:1.3.173'
    testCompile ('org.powermock:powermock-module-junit4:1.6.1') {
        exclude group: 'junit', module: 'junit'
    }
    testCompile ('org.powermock:powermock-api-mockito:1.6.1') {
        exclude group: 'junit', module: 'junit'
        exclude group: 'org.mockito', module: 'mockito-all'
    }
}

buildscript {
    repositories {
        mavenCentral()
    }
}


test {
    // force run, see: http://gradle.1045684.n5.nabble.com/how-does-gradle-decide-when-to-run-tests-td3314172.html
    outputs.upToDateWhen { false }

    exclude('io/crate/benchmark/**')

    // allow to set the number of test forks from the CLI
    if (project.hasProperty('testForks')) {
        maxParallelForks = project.testForks as int
    }

    jacoco {
        excludes = [
            "*Test*",
            "*Benchmark*"
        ]
    }
}


task bench(type: Test, dependsOn: [':app:getVersion']) {
    description = 'Run the Crate JUnit Benchmarks'
    group = 'crate'

    doFirst {
        def version = project(':app').getVersion.version
        systemProperty 'jub.customkey', version
    }


    def benchmark_dir = project.buildDir.path + '/reports/bench/'

    // Properties for JUnit Benchmarks
    systemProperty 'jub.consumers', 'CONSOLE,H2,XML'
    systemProperty 'jub.db.file', benchmark_dir + 'results'
    systemProperty 'jub.xml.file', benchmark_dir + 'results.xml'
    systemProperty 'jub.charts.dir', benchmark_dir


    include('io/crate/benchmark/**')

    testLogging {
        // show standard out and standard error of the test JVM(s) on the console
        showStandardStreams = true

        // Show that tests are run in the command-line output
        events 'started', 'passed'
    }
    // force run, see: http://gradle.1045684.n5.nabble.com/how-does-gradle-decide-when-to-run-tests-td3314172.html
    outputs.upToDateWhen { false }

    doLast {
        println "Benchmark Results in " + benchmark_dir
    }
}


sourceSets {
    test {
        resources {
            srcDir 'src/test/java'
            include '**/*.rst'
            include '**/*.json'
            include '**/*.sql'
            include '**/*.html'
            include '**/*.jsonp'
        }
    }
    shared {
        java {
            srcDir "src/main/java/"
            include "io/crate/action/sql/SQL*"
        }
    }
}
