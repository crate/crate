apply from: "$rootDir/gradle/javaModule.gradle"
apply plugin: 'groovy'

archivesBaseName = 'crate-sql'

configurations {
    benchmarksCompile.extendsFrom testCompile
    benchmarksRuntime.extendsFrom testRuntime, benchmarksCompile
}

dependencies {
    compile project(':shared')
    compile project(':core')
    compile project(':dex')
    compile project(':blob')
    compile project(':sql-parser')
    compile project(':udc')
    compile "com.amazonaws:aws-java-sdk-s3:${versions.aws}"
    compile "org.apache.commons:commons-math3:${versions.commonsmath}"

    testCompile project(':integration-testing')
    testCompile project(path: ':dex', configuration: 'testOutput')
    testCompile 'org.skyscreamer:jsonassert:1.3.0'
    testCompile "org.hamcrest:hamcrest-all:${versions.hamcrest}"
    testCompile('io.crate:crate-jdbc:2.1.5') {
        exclude group: 'net.java.dev.jna', module: 'jna'
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.slf4j', module: 'jcl-over-slf4j'
    }
}


jmhJar {
    append 'META-INF/services/org.apache.lucene.codecs.DocValuesFormat'
    append 'META-INF/services/org.apache.lucene.codecs.Codec'
    append 'META-INF/services/org.apache.lucene.codecs.PostingsFormat'
}


test {
    testLogging.exceptionFormat = 'full'
    outputs.dir("$projectDir/data")

    jacoco.excludes = ["*Test*"]

    // make sure sources are first on classpath because we do override some class(es) (currently: lucene's AssertingLeafReader)
    classpath = sourceSets.main.output + sourceSets.test.output + configurations.testCompile
}

clean.dependsOn('cleanTest')

sourceSets {
    test {
        resources {
            srcDir 'src/test/resources'

        }
    }
}
