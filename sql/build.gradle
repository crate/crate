apply from: "$rootDir/gradle/javaModule.gradle"
apply plugin: 'groovy'

archivesBaseName = 'crate-sql'

configurations {
    // export of test so that other modules can use the utilities there as well.
    testOutput
}

dependencies {
    compile project(':shared')
    compile project(':core')
    compile project(':dex')
    compile project(':blob')
    compile project(':sql-parser')
    compile project(':udc')
    compile project(':ssl')
    compile "io.netty:netty-transport:${versions.netty4}"
    compile "io.netty:netty-codec:${versions.netty4}"
    compile "io.netty:netty-buffer:${versions.netty4}"
    compile "com.google.guava:guava:${versions.guava}"
    compile "com.amazonaws:aws-java-sdk-s3:${versions.aws}"
    compile "org.apache.commons:commons-math3:${versions.commonsmath}"
    // Needed by aws-java-sdk-s3 in Java 9
    compile "javax.xml.bind:jaxb-api:${versions.jaxb_api}"

    testCompile project(':integration-testing')
    testCompile project(path: ':dex', configuration: 'testOutput')
    testCompile 'org.skyscreamer:jsonassert:1.3.0'
    testCompile "org.hamcrest:hamcrest-all:${versions.hamcrest}"
    testCompile "org.slf4j:slf4j-api:${versions.slf4j}"
    testCompile("io.crate:crate-jdbc:${versions.crate_jdbc}") {
        exclude group: 'net.java.dev.jna', module: 'jna'
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.slf4j', module: 'jcl-over-slf4j'
    }
    // These plugins are dynamically loaded and need to be present here.
    // They are required by 1) tests in :sql 2) modules depending on :sql.
    // They also need to be added in :app because :sql is declared non-transitive
    // in :app (=dependencies of :sql won't be included).
    compile project(":es:es-repository-url")
    compile project(":es:es-analysis-common")
}
//noinspection GroovyAssignabilityCheck
task testOutputJar (type: Jar) {
    classifier = 'sql-testing'
    from sourceSets.test.output
}

artifacts {
    testOutput testOutputJar
}

test {
    testLogging.exceptionFormat = 'full'
    outputs.dir("$projectDir/data")

    jacoco.excludes = ["*Test*"]

    // make sure sources are first on classpath because we do override some class(es) (currently: lucene's AssertingLeafReader)
    classpath = sourceSets.main.output + sourceSets.test.output + configurations.testCompile
}

clean.dependsOn('cleanTest')

sourceSets {
    test {
        resources {
            srcDir 'src/test/resources'
        }
    }
}

// suppress Sun API warnings
compileJava {
    options.compilerArgs << '-XDignore.symbol.file'
    options.fork = true
}
javadoc {
    options.addStringOption('XDignore.symbol.file', '')
}
