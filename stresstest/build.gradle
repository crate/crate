apply plugin: 'java'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':testing')
    compile project(':client')
    testCompile 'com.carrotsearch:junit-benchmarks:0.7.2'
    testCompile 'com.h2database:h2:1.3.173'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

test {
    enabled = false
    jacoco {
        enabled = false
    }
}

task stress(type: Test) {
    description = 'Run the Crate stresstests which are very resource hungry'
    group = 'crate'

    outputs.upToDateWhen { false }
    testLogging.exceptionFormat = 'full'

    include('io/crate/stress/**')

    jacoco {
        enabled = false
    }
}

task externalBenchmarks(type: Test, dependsOn: [':core:getVersion']) {
    description = 'Run the external crate Benchmarks'
    group = 'crate'

    doFirst {
        def version = project(':core').getVersion.version
        systemProperty 'jub.customkey', version
    }


    def benchmark_dir = project.projectDir.path + '/reports/bench/'

    // Properties for JUnit Benchmarks
    systemProperty 'jub.consumers', 'CONSOLE,H2,XML'
    systemProperty 'jub.db.file', benchmark_dir + 'results'
    systemProperty 'jub.xml.file', benchmark_dir + 'results.xml'
    systemProperty 'jub.charts.dir', benchmark_dir


    include('io/crate/benchmark/**')

    testLogging {
        // show standard out and standard error of the test JVM(s) on the console
        showStandardStreams = true

        // Show that tests are run in the command-line output
        events 'started', 'passed'
    }
    // force run, see: http://gradle.1045684.n5.nabble.com/how-does-gradle-decide-when-to-run-tests-td3314172.html
    outputs.upToDateWhen { false }

    doLast {
        println "Benchmark Results in " + benchmark_dir
    }
}

sourceSets {
    test {
        resources {
            srcDir 'src/test/java'
            include '**/*.rst'
            include '**/*.json'
            include '**/*.sql'
            include '**/*.html'
            include '**/*.jsonp'
        }
    }
}
