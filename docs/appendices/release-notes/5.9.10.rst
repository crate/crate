.. _version_5.9.10:

===========================
Version 5.9.10 - Unreleased
===========================

.. comment 1. Remove the " - Unreleased" from the header above and adjust the ==
.. comment 2. Remove the NOTE below and replace with: "Released on 20XX-XX-XX."
.. comment    (without a NOTE entry, simply starting from col 1 of the line)
.. NOTE::

    In development. 5.9.9 isn't released yet. These are the release notes for
    the upcoming release.

.. NOTE::
    If you are upgrading a cluster, you must be running CrateDB 4.0.2 or higher
    before you upgrade to 5.9.10.

    We recommend that you upgrade to the latest 5.8 release before moving to
    5.9.10.

    A rolling upgrade from 5.8.x to 5.9.10 is supported.

    Before upgrading, you should `back up your data`_.

.. WARNING::

    Tables that were created before CrateDB 4.x will not function with 5.x
    and must be recreated before moving to 5.x.x.

    You can recreate tables using ``COPY TO`` and ``COPY FROM`` or by
    `inserting the data into a new table`_.

.. _back up your data: https://crate.io/docs/crate/reference/en/latest/admin/snapshots.html

.. _inserting the data into a new table: https://crate.io/docs/crate/reference/en/latest/admin/system-information.html#tables-need-to-be-recreated

.. rubric:: Table of contents

.. contents::
   :local:

See the :ref:`version_5.9.0` release notes for a full list of changes in the
5.9 series.

Fixes
=====

- Fixed an issue that would lead to errors when attempting to select a
  sub-column from a virtual table or view participating in a join, e.g.::

    SELECT vw1.col2['arr']
    FROM (SELECT * FROM tbl1) as vw1
    INNER JOIN tbl2 on vw1.col1 = tbl2.col1
    LIMIT 10;

- Fixed an issue that caused an error when using a correlated sub-query and
  a normal subquery on the same level together with an additional sub-query on
  an outer level. Example::

    WITH tbl AS (SELECT 1 as x)
    SELECT (
      SELECT x FROM tbl
      WHERE t.x = tbl.x
        AND tbl.x IN (SELECT x FROM unnest([1]))
    ),
    (SELECT y FROM unnest([2]) as t2(y))
    FROM tbl t

- Fixed an issue that caused a planner exception when using a query containing
  an ``ORDER BY`` clause on top of a ``UNION`` clause, while the ordering column
  is not part of the most-top select items. Example::

    SELECT id FROM (
        SELECT id, other_id, name FROM users
        UNION ALL
        SELECT id, other_id, name FROM users
        ) u
    ORDER BY name

- Fixed an issue that would lead to wrong results when using
  :ref:`MIN <aggregation-min>` or :ref:`MAX <aggregation-max>` aggregations on
  :ref:`numeric <type-numeric>` values. Previously, the values where implicitly
  casted to ``STRING`` and the aggregations where using alphanumeric ordering,
  instead of numeric ordering.
