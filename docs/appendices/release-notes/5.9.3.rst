.. _version_5.9.3:

==========================
Version 5.9.3 - Unreleased
==========================


.. comment 1. Remove the " - Unreleased" from the header above and adjust the ==
.. comment 2. Remove the NOTE below and replace with: "Released on 20XX-XX-XX."
.. comment    (without a NOTE entry, simply starting from col 1 of the line)
.. NOTE::

    In development. 5.9.3 isn't released yet. These are the release notes for
    the upcoming release.

.. NOTE::
    If you are upgrading a cluster, you must be running CrateDB 4.0.2 or higher
    before you upgrade to 5.9.3.

    We recommend that you upgrade to the latest 5.8 release before moving to
    5.9.3.

    A rolling upgrade from 5.8.x to 5.9.3 is supported.

    Before upgrading, you should `back up your data`_.

.. WARNING::

    Tables that were created before CrateDB 4.x will not function with 5.x
    and must be recreated before moving to 5.x.x.

    You can recreate tables using ``COPY TO`` and ``COPY FROM`` or by
    `inserting the data into a new table`_.

.. _back up your data: https://crate.io/docs/crate/reference/en/latest/admin/snapshots.html

.. _inserting the data into a new table: https://crate.io/docs/crate/reference/en/latest/admin/system-information.html#tables-need-to-be-recreated

.. rubric:: Table of contents

.. contents::
   :local:

See the :ref:`version_5.9.0` release notes for a full list of changes in the
5.9 series.

Fixes
=====

- Fixed an issue that would cause an error to be thrown when attempting to
  ``ORDER BY`` on top of a complex query (e.g. a ``JOIN``), using an expression
  which contains a query parameter, e.g.::

      SELECT * FROM t1 JOIN t2 ON t1.a = t2.b ORDER BY abs(t2.i + ?) DESC

- Re-added the missing ``crate-node`` script to the tarball distribution.

- Fixed an issue that caused error to be thrown when attempting to access a
  nested field of an :ref:`OBJECT <type-object>`, which contains also arrays of
  :ref:`OBJECT <type-object>`, e.g.::

      SELECT {"o"=[{"oo"={"x"= 10}}, {"oo"={"x"= 20}}]}['o']['oo']['x']

- Fixed an issue that prevented to cast an array of :ref:`TEXT <type-text>`
  containing JSON text representation values to an array of
  :ref:`OBJECT <type-object>`.

- Fixed an issue that caused ``ClassCastExceptions`` or invalid results when
  the ``WHERE`` clause contained comparisons of different data types. For
  example::

      SELECT * FROM t WHERE a < 128;
      SQLParseException[Cannot cast `128` of type `integer` to type `byte`]

      SELECT * FROM t WHERE float_col = 0.99999999;
      +-----------+
      | float_col |
      +-----------+
      |       1.0 |
      +-----------+

- Fixed an issue that caused ``=`` on a :ref:`NUMERIC type<type-numeric>` and a
  number type such as :ref:`DOUBLE PRECISION <type-double-precision>` or
  :ref:`INTEGER <type-integer>` to throw a ``ClassCastException`` or to return
  invalid results.

- Fixed an issue that lead to an error when selecting a table function inside a
  a scalar function and using a column inside a scalar but not having it
  neither in ``SELECT`` nor in the table function. For example::

    SELECT
      CASE
        WHEN regexp_matches(col1, '^a') != []
            THEN 'found'
        WHEN col2 LIKE '%xyz%'  <--- col2 is not in SELECT targets and not used in the table function
            THEN 'special case'
        ELSE 'default'
      END
    FROM test;
