==============
Querying Crate
==============

Crate can be queried with SQL (Structured Query Language). For general
information about SQL please refer to `Wikipedia SQL`_.

.. _`Wikipedia SQL`: http://en.wikipedia.org/wiki/Sql


SQL statements are sent to the '_sql' endpoint in json format,
whereby the statement is sent as value associated to the key 'stmt".

Query
=====

The response to a query contains the column names of the result and
the actual result rows as a two-dimensional array of values.

A simple select::

    sh$ curl -sSXPOST 'localhost:9200/_sql?pretty' -d '{
    ... "stmt":"select name, position from locations order by \"_id\" limit 2"
    ... }'
    {
      "cols" : [ "name", "position" ],
      "rows" : [ [ "North West Ripple", 1 ], [ "Arkintoofle Minor", 3 ] ]
    }


If the '*' operator is used, all properties defined in the schema are getting
returned for each object::


    sh$ curl -sSXPOST 'localhost:9200/_sql?pretty' -d '{
    ... "stmt":"select * from locations order by \"_id\" limit 1 offset 1"
    ... }'
    {
      "cols" : [ "date", "description", "kind", "name", "position" ],
      "rows" : [ [ "1979-10-12T00:00:00.000Z",
                   "Motivated ...",
                   "Planet",
                   "Arkintoofle Minor", 3 ] ]
    }

Aliases for output names are also supported::


    sh$ curl -sSXPOST 'localhost:9200/_sql?pretty' -d '{
    ... "stmt":"select name as n from locations order by \"_id\" limit 1"
    ... }'
    {
      "cols" : [ "n" ],
      "rows" : [ [ "North West Ripple" ] ]
    }


Where Clause
------------

A simple where clause example using an equality operator::

    sh$ curl -sSXPOST 'localhost:9200/_sql?pretty' -d@- <<- EOF
    ... {"stmt":
    ... "select description from locations where \"_id\"='1'"
    ... }
    ... EOF
    {
      "cols" : [ "description" ],
      "rows" : [ [ "Relative ..." ] ]
    }

Usual comparison operators to be used in filters are available for
string, integer/long, float/double and date type:

    ===========  =================================
    Operator     Description
    ===========  =================================
    <            less than
    >            greater than
    <=           less than or equal to
    >=           greater than or equal to
    =            equal
    <>           not equal
    !=           not equal - same as <>
    is not null  field is not null and not missing
    is null      field is null or missing
    ===========  =================================

.. note::

  The field 'name' used for the request above is defined as
  'not_analyzed' in the schema. For an 'analyzed' field the result may
  differ depending on the used Analyzer/Tokenizer. For details
  regarding analysis please refer to the `elasticsearch analysis`_
  site.

.. _`elasticsearch analysis`: http://www.elasticsearch.org/guide/reference/index-modules/analysis/

For strings a lexicographical comparison is performed based on the
Lucene TermRangeQuery::

    sh$ curl -sSXPOST 'localhost:9200/_sql?pretty' -d@- <<- EOF
    ... {"stmt":
    ... "select name from locations where name > 'Argabuthon' order by name"
    ... }
    ... EOF
    {
      "cols" : [ "name" ],
      "rows" : [ [ "Arkintoofle Minor" ],
                 [ "Bartledan" ],
                 [ "Galactic Sector QQ7 Active J Gamma" ],
                 [ "North West Ripple" ],
                 [ "Outer Eastern Rim" ] ]
    }

For details please refer to the `Apache Lucene`_ site.

.. _`Apache Lucene`: http://lucene.apache.org/core/4_0_0/core/org/apache/lucene/search/Query.html


In most SQL databases there is a distinction between `NULL` and empty string.
Since Crate is a schemaless document oriented database there is the third
possibility that a row doesn't contain a field. Due to this `is null` will
return all rows where the fields value is `NULL` or where the field doesn't
exist at all. `is not null` also behaves this way. E.g. the following query
returns 2 rows since the `is null` filter matches all rows and a limit is
specified::

    sh$ curl -sSXPOST 'localhost:9200/_sql?pretty' -d@- <<- EOF
    ... {"stmt":
    ... "select name from locations where missing is null order by \"_id\" limit 2"
    ... }
    ... EOF
    {
      "cols" : [ "name" ],
      "rows" : [ [ "North West Ripple" ], [ "Arkintoofle Minor" ] ]
    }

Number and date field comparison behave as expected from standard SQL.
The following example uses one of the supported ISO date formats::

    sh$ curl -sSXPOST 'localhost:9200/_sql?pretty' -d@- <<- EOF
    ... {"stmt":
    ... "select date,position from locations
    ...  where date <= '1979-10-12' and position < 3 order by position"
    ... }
    ... EOF
    {
      "cols" : [ "date", "position" ],
      "rows" : [ [ "1979-10-12T00:00:00.000Z", 1 ],
                 [ "1979-10-12T00:00:00.000Z", 2 ] ]
    }

All supported default ISO date formats are comparable.
For a full list please refer to the `elasticsearch date-format`_ site.

.. _`elasticsearch date-format`: http://www.elasticsearch.org/guide/reference/mapping/date-format/

For custom date types, or defined date formats in the object mapping
the corresponding format should be used for a comparison. Otherwise
the operation may fail.


