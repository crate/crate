.. highlight:: psql
.. _sql_dql_queries:

Retrieving Data
===============

Retrieving data from ``Crate`` is done by using a SQL ``SELECT`` statement.
The response to a ``SELECT`` query contains the column names of the result,
the actual result rows as a two-dimensional array of values, the row count
and the duration.

A simple select::

    cr> select name, position from locations order by id limit 2;
    +-------------------+----------+
    | name              | position |
    +-------------------+----------+
    | North West Ripple | 1        |
    | Arkintoofle Minor | 3        |
    +-------------------+----------+
    SELECT 2 rows in set (... sec)

If the '*' operator is used, all columns defined in the schema are returned
for each row::

    cr> select * from locations order by id limit 1 offset 1;
    +----...-+--------------...-+----+-------------+--...-+--...-+----------+------+
    | date   | description      | id | information | kind | name | position | race |
    +----...-+--------------...-+----+-------------+--...-+--...-+----------+------+
    | 308... | Motivated by ... | 10 |        NULL | P... | A... | 3        | NULL |
    +----...-+--------------...-+----+-------------+--...-+--...-+----------+------+
    SELECT 1 row in set (... sec)

Aliases can be used to change the output name of the columns::

    cr> select name as n
    ... from locations
    ... where name = 'North West Ripple';
    +-------------------+
    | n                 |
    +-------------------+
    | North West Ripple |
    +-------------------+
    SELECT 1 row in set (... sec)

.. _sql_dql_from_clause:

FROM Clause
-----------

The ``FROM`` clause is used to reference the table or the table join to query.
A table is referenced by schema and table name and can optionally be aliased.
If the table ``t`` is only referenced by table name, crate assumes the table 
``doc.t`` was meant.
Schemas that were newly created using :ref:`ref-create-table` must be
referenced explicitly.

The two following queries are equivalent::

    cr> select name, position from locations
    ... order by name desc nulls last limit 2;
    +-------------------+----------+
    | name              | position |
    +-------------------+----------+
    | Outer Eastern Rim |        2 |
    | North West Ripple |        1 |
    +-------------------+----------+
    SELECT 2 rows in set (... sec)

::

    cr> select doc.locations.name as n, position from doc.locations
    ... order by name desc nulls last limit 2;
    +-------------------+----------+
    | n                 | position |
    +-------------------+----------+
    | Outer Eastern Rim |        2 |
    | North West Ripple |        1 |
    +-------------------+----------+
    SELECT 2 rows in set (... sec)

A table can be aliased for the sake of brevity too::

    cr> select name from doc.locations as l
    ... where l.name = 'Outer Eastern Rim';
    +-------------------+
    | name              |
    +-------------------+
    | Outer Eastern Rim |
    +-------------------+
    SELECT 1 row in set (... sec)

Joins
.....

A Cross-join returns the cartesian product of the joined tables.
The cartesian product contains every possible combinations of rows from
the given tables ( T1 * T2 * ...)::

    cr> select articles.name as article, colors.name as color
    ... from articles cross join colors
    ... order by price limit 6;
    +---------------------------+---------------+
    | article                   | color         |
    +---------------------------+---------------+
    | Towel                     | Midnight Blue |
    | Towel                     | Olive Drab    |
    | Towel                     | Antique White |
    | Towel                     | Gold          |
    | Kill-o-Zap blaster pistol | Midnight Blue |
    | Kill-o-Zap blaster pistol | Olive Drab    |
    +---------------------------+---------------+
    SELECT 6 rows in set (... sec)

`FROM T1 CROSS JOIN T2` is equivalent to `FROM T1, T2`::

    cr> select articles.name as article, colors.name as color
    ... from articles, colors
    ... order by price limit 6;
    +---------------------------+---------------+
    | article                   | color         |
    +---------------------------+---------------+
    | Towel                     | Midnight Blue |
    | Towel                     | Olive Drab    |
    | Towel                     | Antique White |
    | Towel                     | Gold          |
    | Kill-o-Zap blaster pistol | Midnight Blue |
    | Kill-o-Zap blaster pistol | Olive Drab    |
    +---------------------------+---------------+
    SELECT 6 rows in set (... sec)

Examples::

    cr> select articles.name as article, colors.name as color, price
    ... from articles, colors
    ... where price > 5000.0
    ... order by price;
    +------------------------------+---------------+----------+
    | article                      | color         | price    |
    +------------------------------+---------------+----------+
    | Infinite Improbability Drive | Midnight Blue | 19999.99 |
    | Infinite Improbability Drive | Olive Drab    | 19999.99 |
    | Infinite Improbability Drive | Antique White | 19999.99 |
    | Infinite Improbability Drive | Gold          | 19999.99 |
    | Starship Titanic             | Midnight Blue | 50000.0  |
    | Starship Titanic             | Olive Drab    | 50000.0  |
    | Starship Titanic             | Antique White | 50000.0  |
    | Starship Titanic             | Gold          | 50000.0  |
    +------------------------------+---------------+----------+
    SELECT 8 rows in set (... sec)

::

    cr> select articles.name as article, rgb, price
    ... from articles, colors
    ... where colors.name = 'Midnight Blue' and price < 50000
    ... order by price;
    +------------------------------+---------+----------+
    | article                      | rgb     | price    |
    +------------------------------+---------+----------+
    | Towel                        | #191970 | 1.29     |
    | Kill-o-Zap blaster pistol    | #191970 | 3499.9   |
    | Infinite Improbability Drive | #191970 | 19999.99 |
    +------------------------------+---------+----------+
    SELECT 3 rows in set (... sec)

::

    cr> select articles.name, colors.name, price * colors.coolness
    ... from articles, colors
    ... order by price * colors.coolness desc limit 1;
    +------------------+----------------+-------------------------+
    | articles.name    | colors.name    | price * colors.coolness |
    +------------------+----------------+-------------------------+
    | Starship Titanic | Midnight Blue  | 500000.0                |
    +------------------+----------------+-------------------------+
    SELECT 1 rows in set (... sec)

.. _sql_dql_distinct_clause:

DISTINCT Clause
---------------

If DISTINCT is specified, one unique row is kept. All other
duplicate rows are removed from the result set::

    cr> select distinct date from locations order by date;
    +---------------+
    | date          |
    +---------------+
    | 308534400000  |
    | 1367366400000 |
    | 1373932800000 |
    +---------------+
    SELECT 3 rows in set (... sec)


.. _sql_dql_where_clause:

WHERE Clause
------------

A simple where clause example using an equality operator::

    cr> select description from locations where id = '1';
    +---------------------------------------...--------------------------------------+
    | description                                                                    |
    +---------------------------------------...--------------------------------------+
    | Relative to life on NowWhat, living on... a factor of about seventeen million. |
    +---------------------------------------...--------------------------------------+
    SELECT 1 row in set (... sec)

Comparison Operators
....................

Usual comparison operators to be used in the where clause are available for
all simple data types:

    ================  =================================
    Operator          Description
    ================  =================================
    <                 less than
    >                 greater than
    <=                less than or equal to
    >=                greater than or equal to
    =                 equal
    <>                not equal
    !=                not equal - same as <>
    like              matches a part of the given value
    ~                 regular expression match
    !~                negated regular expression match
    ================  =================================

For strings a lexicographical comparison is performed based on the
Lucene TermRangeQuery::

    cr> select name from locations where name > 'Argabuthon' order by name;
    +------------------------------------+
    | name                               |
    +------------------------------------+
    | Arkintoofle Minor                  |
    | Bartledan                          |
    | Galactic Sector QQ7 Active J Gamma |
    | North West Ripple                  |
    | Outer Eastern Rim                  |
    +------------------------------------+
    SELECT 5 rows in set (... sec)

For details please refer to the `Apache Lucene`_ site.

.. _`Apache Lucene`: http://lucene.apache.org/core/4_0_0/core/org/apache/lucene/search/Query.html

Number and date field comparison behave as expected from standard SQL.
The following example uses one of the supported ISO date formats::

    cr> select date, position from locations where date <= '1979-10-12' and
    ... position < 3 order by position;
    +--------------+----------+
    | date         | position |
    +--------------+----------+
    | 308534400000 | 1        |
    | 308534400000 | 2        |
    +--------------+----------+
    SELECT 2 rows in set (... sec)


For a detailed explanation of the supported ISO date formats please refer to the `joda date_optional_time`_ site.

.. _`joda date_optional_time`: http://joda-time.sourceforge.net/api-release/org/joda/time/format/ISODateTimeFormat.html#dateOptionalTimeParser%28%29

For custom date types, or defined date formats in the object mapping
the corresponding format should be used for a comparison. Otherwise
the operation may fail.

.. _predicates:

Predicates
..........

Predicates are expressions that evaluate to boolean.

While scalar functions that evaluate to boolean can be used in place of a predicate,
a predicate cannot be used everywhere, e.g. in the result columns of a select statement.
The semantics of a predicate usually differ from function semantics.

e.g. A function is resolved by its name and the type of its arguments.
A reference can be interchanged with the value it evaluates to (given as a literal)
in a function argument and the function resolves to the same value.
Predicates can bear different semantics, e.g. enforce the usage of a column reference.

The following predicates extend the range of possible conditions to use in the where clause.

    ==========================  ===========================================================
    Predicate                   Description
    ==========================  ===========================================================
    :ref:`predicates_not_null`  field is not null and not missing
    :ref:`predicates_is_null`   field is null or missing
    :ref:`predicates_match`     Perform a fulltext search on a column.
                                See :ref:`sql_dql_fulltext_search` for usage.
    ==========================  ===========================================================

.. note::

    Not all predicates can utilize the index efficiently. For example ``is
    null`` can't use the index at all and will therefor perform worse than
    other operators.


.. _sql_ddl_regexp:

Regular Expressions
-------------------

::

  'source' ~ 'pattern'

::

  'source' !~ 'pattern'

The ``~`` operator can be used to match a string against a regular
expression. It returns ``true`` if ``source`` matches, ``false`` if not, and
``NULL`` if ``source`` is ``NULL``.

To negate the matching, use the optional ``!`` prefix. The operator
returns ``true`` if ``source`` does not match ``pattern``, ``false`` otherwise.

The regular expression ``pattern`` is implicitly anchored, that means
that the whole ``source`` string must match, not a single
subsequence. The match is always case sensitive, all unicode
characters are allowed.

Internally the ``~`` operator uses `Lucene Regular Expressions`_ which
are optimized for fast regular expression matching on lucene terms.

`Lucene Regular Expressions`_ are basically `POSIX Extended Regular
Expressions`_ without the character classes and with some extensions,
like a metacharacter ``#``  for the empty string or ``~`` for negation
and others. By default all Lucene extension are enabled. See the
Lucene documentation for more details.

Examples::

    cr> select name from locations where name ~ '([A-Z][a-z0-9]+)+'
    ... order by name;
    +------------+
    | name       |
    +------------+
    | Aldebaran  |
    | Algol      |
    | Altair     |
    | Argabuthon |
    | Bartledan  |
    +------------+
    SELECT 5 rows in set (... sec)

::

    cr> select 'matches' from sys.cluster where
    ... 'gcc --std=c99 -Wall source.c' ~ '[A-Za-z0-9]+ ((-|--)[A-Za-z0-9]+ )*([^ ] ?)*';
    +-----------+
    | 'matches' |
    +-----------+
    | matches   |
    +-----------+
    SELECT 1 row in set (... sec)

::

    cr> select 'no_match' from sys.cluster where 'foobaz' !~ '(foo)?(bar)$';
    +------------+
    | 'no_match' |
    +------------+
    | no_match   |
    +------------+
    SELECT 1 row in set (... sec)

.. _Lucene Regular Expressions: http://lucene.apache.org/core/4_9_0/core/org/apache/lucene/util/automaton/RegExp.html
.. _POSIX Extended Regular Expressions: http://en.wikipedia.org/wiki/Regular_expression#POSIX_extended


.. _sql_dql_like:

LIKE
----

`Crate` supports the `LIKE` operator. This operator can be used to query for
rows where only part of a columns value should match something. For example to
get all locations where the name starts with 'Ar' the following query can be
used::

    cr> select name from locations where name like 'Ar%' order by name asc;
    +-------------------+
    | name              |
    +-------------------+
    | Argabuthon        |
    | Arkintoofle Minor |
    +-------------------+
    SELECT 2 rows in set (... sec)

The following wildcard operators are available:

    == ========================================
    %  A substitute for zero or more characters
    _  A substitute for a single character
    == ========================================

The wildcard operators may be used at any point in the string literal. For
example a more complicated like clause could look like this::

    cr> select name from locations where name like '_r%a%' order by name asc;
    +------------+
    | name       |
    +------------+
    | Argabuthon |
    +------------+
    SELECT 1 row in set (... sec)

In order so search for the wildcard characters themselves it is possible to
escape them using a backslash::

    cr> select description from locations
    ... where description like '%\%' order by description asc;
    +-------------------------+
    | description             |
    +-------------------------+
    | The end of the Galaxy.% |
    +-------------------------+
    SELECT 1 row in set (... sec)

.. note::

    Queries with a like clause can be quite slow. Especially if the like clause
    starts with a wildcard character. Because in that case CRATE has to iterate
    over all rows and can't utilize the index. For better performance consider
    using a fulltext index.


.. _predicates_is_null:

IS NULL
-------

Returns ``TRUE`` if ``expr`` evaluates to ``NULL``.
Given a column reference it returns ``TRUE`` if the field contains ``NULL``
or is missing.

Use this predicate to check for ``NULL`` values as SQL's three-valued logic
does always return ``NULL`` when comparing ``NULL``.

:expr: expression of one of the supported :ref:`sql_ddl_datatypes` supported by crate.

::

    cr> select name from locations where race is null order by name;
    +------------------------------------+
    | name                               |
    +------------------------------------+
    |                                    |
    | Aldebaran                          |
    | Algol                              |
    | Allosimanius Syneca                |
    | Alpha Centauri                     |
    | Altair                             |
    | Argabuthon                         |
    | Arkintoofle Minor                  |
    | Galactic Sector QQ7 Active J Gamma |
    | North West Ripple                  |
    | Outer Eastern Rim                  |
    | NULL                               |
    +------------------------------------+
    SELECT 12 rows in set (... sec)

::

    cr> select count(*) from locations where name is null;
    +----------+
    | count(*) |
    +----------+
    |        1 |
    +----------+
    SELECT 1 row in set (... sec)


.. _predicates_not_null:

IS NOT NULL
-----------

Returns ``TRUE`` if ``expr`` does not evaluate to ``NULL``.
Additionally, for column references it returns ``FALSE`` if the column does not exist.

Use this predicate to check for non-``NULL`` values as SQL's three-valued logic
does always return ``NULL`` when comparing ``NULL``.

:expr: expression of one of the supported :ref:`sql_ddl_datatypes` supported by crate.

::

    cr> select name from locations where race['interests'] is not null;
    +-----------+
    | name      |
    +-----------+
    | Bartledan |
    +-----------+
    SELECT 1 row in set (... sec)

::

    cr> select count(*) from locations where name is not null;
    +----------+
    | count(*) |
    +----------+
    |       12 |
    +----------+
    SELECT 1 row in set (... sec)


.. _sql_dql_any_array:

ANY (array)
-----------

The ANY (or SOME) operator allows to search for elements within arrays. This allows to
query for rows where an element of an array is, for example, equal to or
greater than some ``expression``.

The following example returns any row where the array ``race['interests']``
contains an element 'netball'::

    cr> select race['name'], race['interests'] from locations
    ... where 'netball' = ANY(race['interests']);
    +----------------+-----------------------------------------+
    | race['name']   | race['interests']                       |
    +----------------+-----------------------------------------+
    | Bartledannians | ["netball", "books with 100.000 words"] |
    +----------------+-----------------------------------------+
    SELECT 1 row in set (... sec)

::

    cr> select race['name'], race['interests'] from locations
    ... where '%books%' LIKE ANY(race['interests']);
    +----------------+-----------------------------------------+
    | race['name']   | race['interests']                       |
    +----------------+-----------------------------------------+
    | Bartledannians | ["netball", "books with 100.000 words"] |
    +----------------+-----------------------------------------+
    SELECT 1 row in set (... sec)

Syntax of the ANY Operator:

.. code-block:: sql

    expression operator ANY | SOME (array)

The ANY operator allows to apply an ``operator`` on the elements  of an
``array``. The ``expression`` is evaluated and compared to each element  of
the array using the ``operator``. The comparison must yield a boolean
result.

- The result of ANY is ``true`` if any comparison returns ``true``.

- The result of ANY is ``false`` if no comparison returns ``true``, or an
  array contains no elements.

- The result of ANY is ``NULL`` if either the expression or the array is
  null. The result is also null, if no ``true`` comparison is obtained and
  any element of the array is null.

.. note::

    The following is not supported by the ANY operator:

    - 'is null' and 'is not null' as ``operator``.

    - Arrays of type object.

    - Objects as ``expressions``.

Negating ANY
............

One important thing to notice when using ANY is that negating the ANY operator
does not behave as negating normal comparison operators.

The following query can be translated to
*get all rows where race['interests'] has at least one element that equals 'netball'*::

    cr> select race['name'], race['interests'] from locations
    ... where 'netball' = ANY(race['interests']);
    +----------------+-----------------------------------------+
    | race['name']   | race['interests']                       |
    +----------------+-----------------------------------------+
    | Bartledannians | ["netball", "books with 100.000 words"] |
    +----------------+-----------------------------------------+
    SELECT 1 row in set (... sec)

The following query using the negated operator ``!=`` can be translated to
*get all rows where race['interests'] has at least one element that does not equal 'netball'*.
As you see, the result is the same in this case::

    cr> select race['name'], race['interests'] from locations
    ... where 'netball' != ANY(race['interests']);
    +----------------+-----------------------------------------+
    | race['name']   | race['interests']                       |
    +----------------+-----------------------------------------+
    | Bartledannians | ["netball", "books with 100.000 words"] |
    +----------------+-----------------------------------------+
    SELECT 1 row in set (... sec)

Negating the ``=`` query from above is totally different. It can be translated to
*get all rows where race['interests'] has no value that equals 'netball'*::

    cr> select race['name'], race['interests'] from locations
    ... where not 'netball' = ANY(race['interests']) order by race['name'];
    +--------------+-------------------+
    | race['name'] | race['interests'] |
    +--------------+-------------------+
    | NULL         | NULL              |
    ...
    +--------------+-------------------+
    SELECT 12 rows in set (... sec)

The same behaviour (though different comparison operations involved)
holds true for operators

 - ``LIKE`` and ``NOT LIKE``

 - all other comparison operators (excluding ``IS NULL`` and ``IS NOT NULL``)

Limits
------

As unlimited SELECT queries could break your cluster if the matching rows exceed your node's RAM,
SELECT statements are limited by default to **10000** rows.
You can expand this limit by using an explicit LIMIT-clause.
But you are encouraged to make use of a windowing using LIMIT and OFFSET to iterate through all the results
of a potentially large resultset instead of expanding the default limit.

.. _sql_dql_objects:

Inner/Nested Objects
--------------------

``Crate`` supports an ``object`` data type, used for simple storing a whole object into a
column and it's even possible to select and query for properties of such objects.

Select a property of an inner object::

    cr> select name, race['name'] from locations where name = 'Bartledan';
    +-----------+----------------+
    | name      | race['name']   |
    +-----------+----------------+
    | Bartledan | Bartledannians |
    +-----------+----------------+
    SELECT 1 row in set (... sec)


Query for a property of an inner object::

    cr> select name, race['name'] from locations
    ... where race['name'] = 'Bartledannians';
    +-----------+----------------+
    | name      | race['name']   |
    +-----------+----------------+
    | Bartledan | Bartledannians |
    +-----------+----------------+
    SELECT 1 row in set (... sec)


Inserting objects::

    cr> insert into locations (id, name, position, kind, race)
    ... values ('DO', 'Dornbirn', 14, 'City', {name='Vorarlberger',
    ...     description = 'Very nice people with a strange accent',
    ...     interests = ['mountains', 'cheese', 'enzian']}
    ... );
    INSERT OK, 1 row affected (... sec)

.. _sql_dql_object_arrays:

Object Arrays
-------------

Arrays in crate can only be queried for containment using the :ref:`sql_dql_any_array`
operator. One exception are object arrays. As you can access fields of :ref:`sql_dql_objects`
using subscript expressions, you can access fields of object arrays.
As an object array is no object, you won't get the value for a single field, but
an array of all the values of that field for all objects in that object array.

Examples::

    cr> select name, information['population'] from locations
    ... where information['population'] is not null
    ... order by name;
    +-------------------+---------------------------+
    | name              | information['population'] |
    +-------------------+---------------------------+
    | North West Ripple | [12, 42]                  |
    | Outer Eastern Rim | [5673745846]              |
    +-------------------+---------------------------+
    SELECT 2 rows in set (... sec)

::

    cr> select information from locations
    ... where information['population'] is not null
    ... order by name;
    +----------------------------------------------------...-----------------------+
    | information                                                                  |
    +----------------------------------------------------...-----------------------+
    | [{"evolution_level": 4, "population": 12}, {"evolu...": 42, "popul...": 42}] |
    | [{"evolution_level": 2, "population": 5673745846}]                           |
    +---------------------------------------------------...------------------------+
    SELECT 2 rows in set (... sec)

::

    cr> insert into locations (id, name, position, kind, information)
    ... values (
    ...   'B', 'Berlin', 15, 'City',
    ...   [{evolution_level=6, population=3600001},
    ...   {evolution_level=42, population=1}]
    ... );
    INSERT OK, 1 row affected (... sec)

::

    cr> refresh table locations;
    REFRESH OK (... sec)

::

    cr> select name from locations where 4 < ANY (information['evolution_level'])
    ... order by name;
    +-------------------+
    | name              |
    +-------------------+
    | Berlin            |
    | North West Ripple |
    +-------------------+
    SELECT 2 rows in set (... sec)

.. _sql_dql_object_arrays_select:

Selecting Array Elements
........................

Array elements can be selected directly using a integer value greater
than or equal to **1**. The maximum supported array index is
**2147483648**. Using an index greater than the actual array size
results in a NULL value.

::

    cr> select name, information[1]['population'] as population from locations
    ... where information['population'] is not null
    ... order by name;
    +-------------------+------------+
    | name              | population |
    +-------------------+------------+
    | Berlin            |    3600001 |
    | North West Ripple |         12 |
    | Outer Eastern Rim | 5673745846 |
    +-------------------+------------+
    SELECT 3 rows in set (... sec)

.. note::

   Only 1 array notation inside a subscript expression is supported,
   e.g. following won't work:

   ``select information[1][tags][1] from locations;``

.. _sql_dql_aggregation:

Data Aggregation
----------------

Crate supports aggregations by using the aggregation functions listed
below on ``SELECT`` statements.

Aggregation works on all the rows that match a query or on
all matching rows in every distinct *group* of a ``GROUP BY`` statement.
Aggregating ``SELECT`` statements without ``GROUP BY`` will
always return one row, as they do an aggregation operation on the matching rows as one group.

.. seealso::

    :ref:`aggregation`

+-----------+---------------+----------------------------------+-----------------------+
| Name      | Arguments     | Description                      | Return Type           |
+===========+===============+==================================+=======================+
| COUNT(*)  | Star as       | Counts the number of rows        | long                  |
|           | Parameter or  | that match the query.            |                       |
|           | as Constant   |                                  |                       |
|           | or the primary|                                  |                       |
|           | key column    |                                  |                       |
+-----------+---------------+----------------------------------+-----------------------+
| MIN       | column name of| returns the smallest of the      | the input             |
|           | a numeric,    | values in the argument column    | column type or NULL   |
|           | timestamp     | in case of strings this          | if all values in that |
|           | or string     | means the lexicographically      | matching rows in that |
|           | column        | smallest. NULL-values are ignored| column are NULL       |
+-----------+---------------+----------------------------------+-----------------------+
| MAX       | column name of| returns the biggest of the       | the input             |
|           | a numeric,    | values in the argument column    | column type or NULL   |
|           | timestamp     | in case of strings this          | if all values of all  |
|           | or string     | means the lexicographically      | matching rows in that |
|           | column        | biggest. NULL-values are ignored | column are NULL       |
+-----------+---------------+----------------------------------+-----------------------+
| SUM       | column name of| returns the sum of the values in | double or NULL        |
|           | a numeric or  | the argument column.             | if all values of all  |
|           | timestamp     | NULL-values are ignored.         | matching rows in that |
|           | column        |                                  | column are NULL       |
+-----------+---------------+----------------------------------+-----------------------+
| AVG       | column name of| returns the arithmetic mean of   | double or NULL        |
|           | a numeric or  | the values in the argument       | if all values of all  |
|           | timestamp     | column.                          | matching rows in that |
|           | column        | NULL-values are ignored.         | column are NULL       |
+-----------+---------------+----------------------------------+-----------------------+
| ARBITRARY | column name of| returns an undefined value of    | the input             |
|           | a primitive   | all the values in the argument   | column type or NULL   |
|           | typed         | column. Can be NULL.             | if some value of the  |
|           | column        |                                  | matching rows in that |
|           | (all but      |                                  | column is NULL        |
|           | object)       |                                  |                       |
+-----------+---------------+----------------------------------+-----------------------+

.. note::

    Aggregations can only be applied to columns with a plain index, which is the
    default for all columns.
    For more information, please refer to :ref:`sql_ddl_index_plain`.


Some Examples::

    cr> select count(*) from locations;
    +----------+
    | count(*) |
    +----------+
    | 15       |
    +----------+
    SELECT 1 row in set (... sec)

::

    cr> select count(*) from locations where kind = 'Planet';
    +----------+
    | count(*) |
    +----------+
    | 5        |
    +----------+
    SELECT 1 row in set (... sec)

::

    cr> select count(name), count(*) from locations;
    +-------------+----------+
    | count(name) | count(*) |
    +-------------+----------+
    | 14          | 15       |
    +-------------+----------+
    SELECT 1 row in set (... sec)

::

    cr> select max(name) from locations;
    +-------------------+
    | max(name)         |
    +-------------------+
    | Outer Eastern Rim |
    +-------------------+
    SELECT 1 row in set (... sec)

::

    cr> select min(date) from locations;
    +--------------+
    | min(date)    |
    +--------------+
    | 308534400000 |
    +--------------+
    SELECT 1 row in set (... sec)

::

    cr> select count(*), kind from locations
    ... group by kind order by kind asc;
    +----------+-------------+
    | count(*) | kind        |
    +----------+-------------+
    | 2        | City        |
    | 4        | Galaxy      |
    | 5        | Planet      |
    | 4        | Star System |
    +----------+-------------+
    SELECT 4 rows in set (... sec)

::

    cr> select max(position), kind from locations
    ... group by kind order by max(position) desc;
    +---------------+-------------+
    | max(position) | kind        |
    +---------------+-------------+
    | 15            | City        |
    | 6             | Galaxy      |
    | 5             | Planet      |
    | 4             | Star System |
    +---------------+-------------+
    SELECT 4 rows in set (... sec)

::

    cr> select min(name), kind from locations
    ... group by kind order by min(name) asc;
    +------------------------------------+-------------+
    | min(name)                          | kind        |
    +------------------------------------+-------------+
    |                                    | Planet      |
    | Aldebaran                          | Star System |
    | Berlin                             | City        |
    | Galactic Sector QQ7 Active J Gamma | Galaxy      |
    +------------------------------------+-------------+
    SELECT 4 rows in set (... sec)

::

    cr> select count(*), min(name), kind from locations
    ... group by kind order by kind;
    +----------+------------------------------------+-------------+
    | count(*) | min(name)                          | kind        |
    +----------+------------------------------------+-------------+
    | 2        | Berlin                             | City        |
    | 4        | Galactic Sector QQ7 Active J Gamma | Galaxy      |
    | 5        |                                    | Planet      |
    | 4        | Aldebaran                          | Star System |
    +----------+------------------------------------+-------------+
    SELECT 4 rows in set (... sec)

::

    cr> select sum(position) as sum_positions, kind from locations
    ... group by kind order by sum_positions;
    +---------------+-------------+
    | sum_positions | kind        |
    +---------------+-------------+
    | 10.0          | Star System |
    | 13.0          | Galaxy      |
    | 15.0          | Planet      |
    | 29.0          | City        |
    +---------------+-------------+
    SELECT 4 rows in set (... sec)


.. _sql_dql_group_by:

GROUP BY
--------

Crate supports the `group by` clause. This clause can be used to group the
resulting rows by the value(s) of one or more columns. That means that rows
that contain duplicate values will be merged together.

This is useful if used in conjunction with aggregation functions::

    cr> select count(*), kind from locations
    ... group by kind order by count(*) desc, kind asc;
    +----------+-------------+
    | count(*) | kind        |
    +----------+-------------+
    | 5        | Planet      |
    | 4        | Galaxy      |
    | 4        | Star System |
    | 2        | City        |
    +----------+-------------+
    SELECT 4 rows in set (... sec)

.. note::

    All columns that are used either as result column or in the order by clause
    have to be used within the group by clause. Otherwise the statement won't
    execute.

.. note::

    Grouping on multi-value fields doesn't work. If such a field is encountered
    during a group by operation an error is thrown.

.. note::

    Grouping can only be applied to columns with a plain index, which is the
    default for all columns.
    For more information, please refer to :ref:`sql_ddl_index_plain`.

.. _sql_dql_having:

HAVING
......

The having clause is the equivalent to the where clause for the
resulting rows of a group by clause.
A simple having clause example using an equality operator::

    cr> select count(*), kind from locations
    ... group by kind having count(*) = 4 order by kind;
    +----------+-------------+
    | count(*) | kind        |
    +----------+-------------+
    |        4 | Galaxy      |
    |        4 | Star System |
    +----------+-------------+
    SELECT 2 rows in set (... sec)

The condition of the having clause can refer to the resulting columns
of the group by clause.
It is also possible to use aggregates in the having clause just
like in the result columns::


    cr> select count(*), kind from locations
    ... group by kind having min(name) = 'Berlin';
    +----------+------+
    | count(*) | kind |
    +----------+------+
    |        2 | City |
    +----------+------+
    SELECT 1 row in set (... sec)

::

    cr> select count(*), kind from locations
    ... group by kind having count(*) = 4 and kind like 'Gal%';
    +----------+--------+
    | count(*) | kind   |
    +----------+--------+
    |        4 | Galaxy |
    +----------+--------+
    SELECT 1 row in set (... sec)


Comparison Operators
~~~~~~~~~~~~~~~~~~~~

The having clause supports the same operators as the :ref:`sql_dql_where_clause`:

    ================  =================================
    Operator          Description
    ================  =================================
    <                 less than
    >                 greater than
    <=                less than or equal to
    >=                greater than or equal to
    =                 equal
    <>                not equal
    !=                not equal - same as <>
    like              matches a part of the given value
    ~                 regular expression match
    !~                negated regular expression match
    ================  =================================

Predicates
~~~~~~~~~~

The having supports almost the same predicates as the :ref:`sql_dql_where_clause`
excpet the `match` predicate, which is not supported.
The following :ref:`predicates` are supported:

    ==========================  ===========================================================
    Predicate                   Description
    ==========================  ===========================================================
    :ref:`predicates_not_null`  value is not null and not missing
    :ref:`predicates_is_null`   value is null or missing
    ==========================  ===========================================================
