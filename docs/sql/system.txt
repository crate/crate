.. highlight:: psql

==================
System Information
==================

Crate Data provides some useful schemas which contains virtual tables.
Those tables are read-only and can be queried to get statistical
real-time information about the cluster, its nodes, and their shards.

Cluster
=======

Basic information about the Crate Data cluster can be retrieved from
the ``sys.cluster`` table:

+------------------+---------------------------------+-------------------+
| Name             | Description                     | Return Type       |
+==================+=================================+===================+
| ``id``           | A unique id                     | ``String``        |
|                  | generated by the system.        |                   |
+------------------+---------------------------------+-------------------+
| ``name``         | The cluster name.               | ``String``        |
+------------------+---------------------------------+-------------------+
| ``master_node``  | Node id of the node which       | ``String``        |
|                  | currently operates as master    |                   |
+------------------+---------------------------------+-------------------+
| ``settings``     | The cluster settings.           | ``Object``        |
+------------------+---------------------------------+-------------------+

.. Hidden: reset settings

    cr> reset GLOBAL PERSISTENT collect_stats, jobs_log_size, operations_log_size;
    RESET OK (... sec)

The result has at most 1 row::

  cr> select name from sys.cluster;
  +--------------+
  | name         |
  +--------------+
  | Testing44200 |
  +--------------+
  SELECT 1 row in set (... sec)


Cluster Settings
----------------

The ``sys.cluster.settings`` expression returns information about the
currently applied cluster settings.

::

    cr> select column_name, data_type from information_schema.columns
    ... where column_name like 'settings%'
    ... and table_name = 'cluster';
    +-----------------------------------------------+-----------+
    | column_name                                   | data_type |
    +-----------------------------------------------+-----------+
    | settings                                      | object    |
    | settings['jobs_log_size']                     | integer   |
    | settings['operations_log_size']               | integer   |
    | settings['collect_stats']                     | boolean   |
    | settings['graceful_stop']                     | object    |
    | settings['graceful_stop']['min_availability'] | string    |
    | settings['graceful_stop']['reallocate']       | boolean   |
    | settings['graceful_stop']['timeout']          | long      |
    | settings['graceful_stop']['force']            | boolean   |
    | settings['graceful_stop']['is_default']       | boolean   |
    +-----------------------------------------------+-----------+
    SELECT 10 rows in set (... sec)

For further details, see the :ref:`ref-set` reference.


Nodes
=====

To get information about the nodes simply query for `sys.nodes`.
This table can be queried for one, multiple or all nodes within a cluster.

The table schema is as follows:


id
---

+-------------+---------------------------------------------+-------------+
| Column Name |                 Description                 | Return Type |
+=============+=============================================+=============+
| ``id``      | A unique id within the cluster generated by | ``String``  |
|             | the system.                                 |             |
+-------------+---------------------------------------------+-------------+

name
----

+-------------+-------------------------------------------------+-------------+
| Column Name |                   Description                   | Return Type |
+=============+=================================================+=============+
| ``name``    | The node name within a cluster. The system will | ``String``  |
|             | choose a random name. You can specify the node  |             |
|             | name via your own custom `configuration`_.      |             |
+-------------+-------------------------------------------------+-------------+

hostname
--------

+--------------+-------------------------------------------------+-------------+
| Column Name  |                   Description                   | Return Type |
+==============+=================================================+=============+
| ``hostname`` | The specified host name of the machine the node | ``String``  |
|              | is running on.                                  |             |
+--------------+-------------------------------------------------+-------------+

port
----

+-----------------------+-------------------------------------------------+-------------+
|      Column Name      |                   Description                   | Return Type |
+=======================+=================================================+=============+
| ``port``              | The specified ports for both HTTP and binary    | ``Object``  |
|                       | transport interfaces. You can specify the ports |             |
|                       | via your own custom `configuration`_.           |             |
+-----------------------+-------------------------------------------------+-------------+
| ``port['http']``      | Crate's HTTP port.                              | ``Integer`` |
+-----------------------+-------------------------------------------------+-------------+
| ``port['transport']`` | Crate's binary transport port.                  | ``Integer`` |
+-----------------------+-------------------------------------------------+-------------+

load
----

+----------------+----------------------------------------+-------------+
|  Column Name   |              Description               | Return Type |
+================+========================================+=============+
| ``load``       | System load statistics                 | ``Object``  |
+----------------+----------------------------------------+-------------+
| ``load['1']``  | Average load over the last 1 minute.   | ``Double``  |
+----------------+----------------------------------------+-------------+
| ``load['5']``  | Average load over the last 5 minutes.  | ``Double``  |
+----------------+----------------------------------------+-------------+
| ``load['15']`` | Average load over the last 15 minutes. | ``Double``  |
+----------------+----------------------------------------+-------------+

mem
---

+-------------------------+-------------------------------------------------+-------------+
|       Column Name       |                   Description                   | Return Type |
+=========================+=================================================+=============+
| ``mem``                 | Memory utilization statistics of the host.      | ``Object``  |
+-------------------------+-------------------------------------------------+-------------+
| ``mem['used']``         | Currently used memory in bytes.                 | ``Long``    |
+-------------------------+-------------------------------------------------+-------------+
| ``mem['used_percent']`` | Currently used memory in percent of total.      | ``Short``   |
+-------------------------+-------------------------------------------------+-------------+
| ``mem['free']``         | Currently available memory in bytes.            | ``Long``    |
+-------------------------+-------------------------------------------------+-------------+
| ``mem['free_percent']`` | Currently available memory in percent of total. | ``Short``   |
+-------------------------+-------------------------------------------------+-------------+

heap
----

+------------------+------------------------------------------------+-------------+
|   Column Name    |                  Description                   | Return Type |
+==================+================================================+=============+
| ``heap``         | Heap memory utilization statistics.            | ``Object``  |
+------------------+------------------------------------------------+-------------+
| ``heap['used']`` | Currently used heap memory in bytes.           | ``Long``    |
+------------------+------------------------------------------------+-------------+
| ``heap['max']``  | Maximum available heap memory. You can specify | ``Long``    |
|                  | the max heap memory Crate should use in the    |             |
|                  | `configuration`_.                              |             |
+------------------+------------------------------------------------+-------------+
| ``heap['free']`` | Currently available heap memory in bytes.      | ``Long``    |
+------------------+------------------------------------------------+-------------+

version
-------

+-------------------------------+---------------------------------------------------+-------------+
|   Column Name                 |                  Description                      | Return Type |
+===============================+===================================================+=============+
| ``version``                   | Crate version information.                        | ``Object``  |
+-------------------------------+---------------------------------------------------+-------------+
| ``version['number']``         | Version string in format ``"major.minor.hotfix"`` | ``String``  |
+-------------------------------+---------------------------------------------------+-------------+
| ``version['build_hash']``     | SHA hash of the Github commit which               | ``String``  |
|                               | this build was built from.                        |             |
+-------------------------------+---------------------------------------------------+-------------+
| ``version['build_snapshot']`` | Indicates whether this build is a snapshot build. | ``Boolean`` |
+-------------------------------+---------------------------------------------------+-------------+

fs
---

+----------------------------------+------------------------------------------------+-------------+
|           Column Name            |                  Description                   | Return Type |
+==================================+================================================+=============+
| ``fs``                           | Utilization statistics about the file system.  | ``Object``  |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['total']``                  | Aggregated usage statistic of all disks on the | ``Object``  |
|                                  | host.                                          |             |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['total']['size']``          | Total size of all disks in bytes.              | ``Long``    |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['total']['used']``          | Total used space of all disks in bytes.        | ``Long``    |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['total']['available']``     | Total available space of all disks in bytes.   | ``Long``    |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['total']['reads']``         | Total number of reads on all disks.            | ``Long``    |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['total']['bytes_read']``    | Total size of reads on all disks in bytes.     | ``Long``    |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['total']['writes']``        | Total number of writes on all disks.           | ``Long``    |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['total']['bytes_written']`` | Total size of writes on all disks in bytes.    | ``Long``    |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['disks']``                  | Usage statistics of individual disks on the    | ``Array``   |
|                                  | host.                                          |             |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['disks']['dev']``           | Device name                                    | ``String``  |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['disks']['size']``          | Total size of the disk in bytes.               | ``Long``    |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['disks']['used']``          | Used space of the disk in bytes.               | ``Long``    |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['disks']['available']``     | Available space of the disk in bytes.          | ``Long``    |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['disks']['reads']``         | Number of reads on the disk.                   | ``Long``    |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['disks']['bytes_read']``    | Total size of reads on the disk in bytes.      | ``Long``    |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['disks']['writes']``        | Number of writes on the disk.                  | ``Long``    |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['disks']['bytes_written']`` | Total size of writes on the disk in bytes.     | ``Long``    |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['data']``                   | Information about data paths used by the node. | ``Array``   |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['data']['dev']``            | Device name                                    | ``String``  |
+----------------------------------+------------------------------------------------+-------------+
| ``fs['data']['path']``           | File path where the data of the node resides.  | ``String``  |
+----------------------------------+------------------------------------------------+-------------+

thread_pools
------------

+-------------------------------+------------------------------------------------+-------------+
|          Column Name          |                  Description                   | Return Type |
+===============================+================================================+=============+
| ``thread_pools``              | Usage statistics of Java thread pools.         | ``Array``   |
+-------------------------------+------------------------------------------------+-------------+
| ``thread_pools['name']``      | Name of the pool.                              | ``String``  |
+-------------------------------+------------------------------------------------+-------------+
| ``thread_pools['active']``    | Number of currently running thread in the      | ``Integer`` |
|                               | thread pool.                                   |             |
+-------------------------------+------------------------------------------------+-------------+
| ``thread_pools['rejected']``  | Total number of rejected threads in the thread | ``Long``    |
|                               | pool.                                          |             |
+-------------------------------+------------------------------------------------+-------------+
| ``thread_pools['largest']``   | Largest number of threads that have ever       | ``Integer`` |
|                               | simultaniously been in the pool.               |             |
+-------------------------------+------------------------------------------------+-------------+
| ``thread_pools['completed']`` | Total number of completed thread in teh thread | ``Long``    |
|                               | pool.                                          |             |
+-------------------------------+------------------------------------------------+-------------+
| ``thread_pools['threads']``   | Size of the thread pool.                       | ``Integer`` |
+-------------------------------+------------------------------------------------+-------------+
| ``thread_pools['queue']``     | Number of thread currently in the queue.       | ``Integer`` |
+-------------------------------+------------------------------------------------+-------------+

os
---

+-------------------------+----------------------------------------------+-------------+
|       Column Name       |                 Description                  | Return Type |
+=========================+==============================================+=============+
| ``os``                  | Operating system stats                       | ``Object``  |
+-------------------------+----------------------------------------------+-------------+
| ``os['uptime']``        | System uptime in milliseconds                | ``Long``    |
+-------------------------+----------------------------------------------+-------------+
| ``os['timestamp']``     | UNIX timestamp in millisecond resolution     | ``Long``    |
+-------------------------+----------------------------------------------+-------------+
| ``os['cpu']``           | Information about CPU utilization            | ``Object``  |
+-------------------------+----------------------------------------------+-------------+
| ``os['cpu']['system']`` | CPU time used by the system                  | ``Short``   |
+-------------------------+----------------------------------------------+-------------+
| ``os['cpu']['user']``   | CPU time used by applications                | ``Short``   |
+-------------------------+----------------------------------------------+-------------+
| ``os['cpu']['idle']``   | Idle CPU time                                | ``Short``   |
+-------------------------+----------------------------------------------+-------------+
| ``os['cpu']['used']``   | Used CPU (system + user)                     | ``Short``   |
+-------------------------+----------------------------------------------+-------------+
| ``os['cpu']['stolen']`` | The amount of CPU 'stolen' from this virtual | ``Short``   |
|                         | machine by the hypervisor for other tasks.   |             |
+-------------------------+----------------------------------------------+-------------+

network
-------

+--------------------------------------------------------+--------------------------------------------------------------------------------------------+-------------+
|                      Column Name                       |                                        Description                                         | Return Type |
+========================================================+============================================================================================+=============+
| ``network``                                            | Statistics about network activity on the host.                                             | ``Object``  |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+-------------+
| ``network['tcp']``                                     | TCP network activity on the host.                                                          | ``Object``  |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+-------------+
| ``network['tcp']['connections']``                      | Information about TCP network connections.                                                 | ``Object``  |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+-------------+
| ``network['tpc']['connections']['initiated']``         | Total number of initiated TCP connections.                                                 | ``Long``    |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+-------------+
| ``network['tpc']['connections']['accepted']``          | Total number of accepted TCP connections.                                                  | ``Long``    |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+-------------+
| ``network['tpc']['connections']['curr_established']``  | Total number of currently established TCP connections.                                     | ``Long``    |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+-------------+
| ``network['tcp']['connections']['dropped']``           | Total number of dropped TCP connections.                                                   | ``Long``    |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+-------------+
| ``network['tcp']['connections']['embryonic_dropped']`` | Total number of TCP connections that have been dropped before they were accepted.          | ``Long``    |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+-------------+
| ``network['tcp']['packets']``                          | Information about TCP packets.                                                             | ``Object``  |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+-------------+
| ``network['tpc']['packets']['sent']``                  | Total number of TCP packets sent.                                                          | ``Long``    |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+-------------+
| ``network['tcp']['packets']['received']``              | Total number of TCP packets received.                                                      | ``Long``    |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+-------------+
| ``network['tpc']['packets']['retransmitted']``         | Total number of TCP packets retransmitted due to an error.                                 | ``Long``    |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+-------------+
| ``network['tcp']['packets']['errors_received']``       | Total number of TCP packets that contained checksum errors, had a bad offset, were dropped | ``Long``    |
|                                                        | because of a lack of memory or were too short.                                             |             |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+-------------+
| ``network['tcp']]['packets']['rst_sent']``             | Total number of RST packets sent due to left unread                                        | ``Long``    |
|                                                        | data in queue when socket is closed.                                                       |             |
|                                                        | See `tools.ietf.org <https://tools.ietf.org/html/rfc2525#page-50>`_.                       |             |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+-------------+

process
-------

+------------------------------------------+------------------------------------------------+--------------+
| Column Name                              | Description                                    | Return Type  |
+==========================================+================================================+==============+
| ``process``                              | Statistics about the Crate process             | ``Object``   |
+------------------------------------------+------------------------------------------------+--------------+
| ``process['open_file_descriptors']``     | Number of currently open file descriptors used | ``Long``     |
|                                          | by the Crate process.                          |              |
+------------------------------------------+------------------------------------------------+--------------+
| ``process['max_open_file_descriptors']`` | The maximum number of open file descriptors    | ``Long``     |
|                                          | Crate can use.                                 |              |
+------------------------------------------+------------------------------------------------+--------------+




For example a query to get basic host data looks as follows::

    cr> select id, name, port['http'], port['transport'] from sys.nodes;
    +-...---+-------+--------------+-------------------+
    | id    | name  | port['http'] | port['transport'] |
    +-...---+-------+--------------+-------------------+
    | ...   | crate | 44200        | 44300             |
    +-...---+-------+--------------+-------------------+
    SELECT 1 row in set (... sec)

Shards
======

The table ``sys.shards`` contains real-time statistics for all
shards of all (non-system) tables.

The table schema is as follows:

+------------------+----------------------------------+-------------+
|       Name       |           Description            | Return Type |
+==================+==================================+=============+
| schema_name      | The schema name.                 | String      |
|                  | This will be "blob" for          |             |
|                  | shards of blob tables and "doc"  |             |
|                  | for shards of common tables.     |             |
+------------------+----------------------------------+-------------+
| table_name       | The table name.                  | String      |
+------------------+----------------------------------+-------------+
| partition_ident  | The partition ident of a         | String      |
|                  | partitioned table.               |             |
|                  | Empty string on non-partitioned  |             |
|                  | tables.                          |             |
+------------------+----------------------------------+-------------+
| id               | The shard id. This shard id is   | Integer     |
|                  | managed by the system ranging    |             |
|                  | from 0 and up to the specified   |             |
|                  | number of shards of a table      |             |
|                  | (by default the number of        |             |
|                  | shards is 5).                    |             |
+------------------+----------------------------------+-------------+
| num_docs         | The total amount of docs         | Long        |
|                  | within a shard.                  |             |
+------------------+----------------------------------+-------------+
| primary          | Describes if the shard is the    | Boolean     |
|                  | primary shard.                   |             |
+------------------+----------------------------------+-------------+
| relocating_node  | The node id which the shard is   | String      |
|                  | getting relocated to at the time |             |
+------------------+----------------------------------+-------------+
| size             | Current size in bytes.           | Long        |
+------------------+----------------------------------+-------------+
| state            | The current state of the shard.  | String      |
|                  | Possible states are:             |             |
|                  | CREATED,                         |             |
|                  | RECOVERING,                      |             |
|                  | POST_RECOVERY,                   |             |
|                  | STARTED,                         |             |
|                  | RELOCATED,                       |             |
|                  | CLOSED,                          |             |
|                  | INITIALIZING,                    |             |
|                  | UNASSIGNED                       |             |
+------------------+----------------------------------+-------------+
| orphan_partition | True if the partition has NO     | Boolean     |
|                  | table associated with. In rare   |             |
|                  | situations the table is          |             |
|                  | missing.                         |             |
|                  | False on non-partitioned         |             |
|                  | tables.                          |             |
+------------------+----------------------------------+-------------+

For example, you can query shards like this::

  cr> select schema_name as schema,
  ...   table_name as t,
  ...   id,
  ...   partition_ident as p_i,
  ...   num_docs as docs,
  ...   primary,
  ...   relocating_node as r_n,
  ...   state,
  ...   size,
  ...   orphan_partition as o_p
  ... from sys.shards where table_name = 'locations' and id = 1;
  +--------+-----------+----+-----+------+---------+------+---------+------+-------+
  | schema | t         | id | p_i | docs | primary | r_n  |  state  | size | o_p   |
  +--------+-----------+----+-----+------+---------+------+---------+------+-------+
  | doc    | locations |  1 |     |    6 | TRUE    | NULL | STARTED | ...  | FALSE |
  +--------+-----------+----+-----+------+---------+------+---------+------+-------+
  SELECT 1 row in set (... sec)


Jobs, Operations and Logs
=========================

In order to see what is happening in the cluster crate provides the
``sys.jobs`` and ``sys.operations`` tables and there corresponding "logs"
``sys.jobs_log`` and ``sys.operations_log``.

These tables are by *default always empty*. Jobs and operations aren't tracked
unless stats collection is activiated as tracking statistics adds a slight
performance overhead.

In order to activate stats tracking :ref:`ref-set` can be used::

    cr> set global collect_stats = true;
    SET OK (... sec)

Jobs
----

The ``sys.jobs`` table provides an overview over all jobs that are currently
being executed in the cluster::

    cr> select stmt, started from sys.jobs where stmt like 'sel% from %jobs%';
    +-----------------------------------------------------------------------+-...-----+
    | stmt                                                                  | started |
    +-----------------------------------------------------------------------+-...-----+
    | select stmt, started from sys.jobs where stmt like 'sel% from %jobs%' | ...     |
    +-----------------------------------------------------------------------+-...-----+
    SELECT 1 row in set (... sec)

Each request sent to crate that queries data or manipulates data is considered
a ``job`` if it passes the analysis step.

For example a request that fails because it attempts to query a table that
doesn't exist won't get listed.


Operations
----------

The ``sys.operations`` table lists all operations that are currently being
executed in the cluster.

A ``operation`` is part of a ``job`` but not all jobs list their operations. A
operation is listed on each node it is being executed on.

In order to see on which nodes the operations are being executed the
``sys.nodes.name`` expression can be used in the query::

    cr> select sys.nodes.name, job_id, name from sys.operations order by name limit 1;
    +----------------+--------...-+---------+
    | sys.nodes.name | job_id     | name    |
    +----------------+--------...-+---------+
    | crate          | ...        | collect |
    +----------------+--------...-+---------+
    SELECT 1 row in set (... sec)

Logs
----

Both ``sys.jobs`` and ``sys.operations`` have a corresponding ``_log`` table.

After a job or operation finishes the entries will be moved into the ``_log``
table. The ``_log`` tables are bound in size and once a table has reached its
limit old entries will be discarded as new entries are added::

    cr> select * from sys.jobs_log order by ended desc limit 2;
    +-...+------------------------------------...-+-...-----+-...---+-------+
    | id | stmt                                   | started | ended | error |
    +-...+------------------------------------...-+-...-----+-...---+-------+
    | ...| select sys.nodes.name, ...             | ...     | ...   |  NULL |
    | ...| select stmt, started from sys.jobs ... | ...     | ...   |  NULL |
    +-...+------------------------------------...-+-...-----+-...---+-------+
    SELECT 2 rows in set (... sec)

See :ref:`ref-set` on how to change the size of the tables.


As described above the stats tracking is by default deactivated and has to be
enabled using the ``SET`` statement. The same statement can also be used to
deactivate the stats tracking. This will also wipe all existing log entries::

    cr> set global collect_stats = false;
    SET OK (... sec)

::

    cr> select count(*) from sys.jobs_log;
    +----------+
    | count(*) |
    +----------+
    |        0 |
    +----------+
    SELECT 1 row in set (... sec)


.. note::

    Instead of ``SET`` the ``RESET`` statement could also have been used to
    reset the value of ``collect_stats`` to its default which is false.


Graceful Stop
=============

In order to change the shutdown behaviour of nodes of the cluster,
you can utilise the ``graceful_stop.*`` cluster settings.

Please refer to :ref:`ref-set` for a complete list of settings.

For example to set the timeout to 30 minutes::

    cr> SET GLOBAL TRANSIENT graceful_stop.timeout = 1800000;
    SET OK (... sec)

Crate supports string literals for time values the same way as the ``crate.yml`` does.
So you can write the previous statmement as::

    cr> SET GLOBAL TRANSIENT graceful_stop.timeout = '30m';
    SET OK (... sec)

Note, that querying a time setting will always return a ``string`` value::

    cr> select settings['graceful_stop']['timeout'] from sys.cluster;
    +--------------------------------------+
    | settings['graceful_stop']['timeout'] |
    +--------------------------------------+
    | 30m                                  |
    +--------------------------------------+
    SELECT 1 row in set (... sec)

::

    cr> SET GLOBAL TRANSIENT graceful_stop = {force=true};
    SET OK (... sec)

Non existent parameters are ignored when set as an object::

    cr> SET GLOBAL TRANSIENT graceful_stop = {not_a_setting='true'};
    SET OK (... sec)

::

    cr> select settings['graceful_stop'] from sys.cluster;
    +---------------------------------------...-------------------+
    | settings['graceful_stop']                                   |
    +---------------------------------------...-------------------+
    | {"force": false, "is_default": false, ... "timeout": "30m"} |
    +---------------------------------------...-------------------+
    SELECT 1 row in set (... sec)

::

    cr> select settings['graceful_stop']['not_a_setting'] from sys.cluster;
    SQLActionException[Can't handle Symbol sys.cluster.settings['graceful_stop']['not_a_setting']]

The default configuration in ``crate.yml`` looks like:

.. code-block:: yaml

  graceful_stop:
    min_availability: primaries
    reallocate: true
    timeout: 2h
    force: false
    is_default: false


.. _configuration: ../configuration.html
