.. highlight:: psql
.. _scalar:

================
Scalar Functions
================

Scalar functions return a single data value (not a table).

.. note::

    Scalar functions aren't available in all query clauses. For example if a
    regular (non-system table) is queried the WHERE clause may not contain any
    functions.

    In addition, the ORDER BY clause also may not contain any scalar functions
    unless GROUP BY is also present in the statement.

See below for a list of available scalar functions.

.. _scalar-date-trunc:

date_trunc('interval', ['timezone',] timestamp) returns timestamp
=================================================================

The ``date_trunc`` function truncates a timestamp to a given interval
for a specific timezone.

Valid intervals are:

* second

* minute

* hour

* day

* week

* month

* quarter

* year

Valid values for ``timezone`` are either the name of a time zone (for example
'Europe/Vienna') or the UTC offset of a time zone (for example '+01:00').
To get a complete overview of all possible values take a look at the
`available time zones`_ supported by `Joda-Time`_.

The following example shows how to use the date_trunc function to generate a
day based histogram in the ``Europe/Moscow`` timezone::

    cr> select
    ... date_trunc('day', 'Europe/Moscow', date) as day,
    ... count(*) as num_locations
    ... from locations
    ... group by date_trunc('day', 'Europe/Moscow', date)
    ... order by date_trunc('day', 'Europe/Moscow', date);
    +---------------+---------------+
    | day           | num_locations |
    +---------------+---------------+
    | 308523600000  | 4             |
    | 1367352000000 | 1             |
    | 1373918400000 | 8             |
    +---------------+---------------+
    SELECT 3 rows in set (... sec)

If the time zone is not specified, truncation is based on UTC time::

    cr> select date_trunc('day', date) as day, count(*) as num_locations
    ... from locations
    ... group by date_trunc('day', date)
    ... order by date_trunc('day', date);
    +---------------+---------------+
    | day           | num_locations |
    +---------------+---------------+
    | 308534400000  | 4             |
    | 1367366400000 | 1             |
    | 1373932800000 | 8             |
    +---------------+---------------+
    SELECT 3 rows in set (... sec)


.. _`available time zones`: http://www.joda.org/joda-time/timezones.html

.. _`Joda-Time`: http://www.joda.org/joda-time/

format('format_string', parameter, [ parameter , ... ]) returns string
======================================================================

The ``format`` function takes a format string and a variable number of
arguments and returns a formatted string::

    cr> select format('%s.%s', schema_name, table_name) from sys.shards
    ... where table_name = 'locations'
    ... limit 1;
    +------------------------------------------+
    | format('%s.%s', schema_name, table_name) |
    +------------------------------------------+
    | doc.locations                            |
    +------------------------------------------+
    SELECT 1 row in set (... sec)

::

    cr> select format('%tY', date) from locations group by format('%tY', date);
    +---------------------+
    | format('%tY', date) |
    +---------------------+
    | 2013                |
    | 1979                |
    +---------------------+
    SELECT 2 rows in set (... sec)

For details about the format string syntax see `formatter`_

.. _`formatter`: http://docs.oracle.com/javase/7/docs/api/java/util/Formatter.html


.. _scalar-cast:

cast(column as type) returns converted value
============================================

The ``cast`` functions is casting the given column value to the specified
data type if possible::

  cr> select cast(position as float) from locations order by position
  ... limit 1;
  +-------------------------+
  | CAST(position AS FLOAT) |
  +-------------------------+
  |                     1.0 |
  +-------------------------+
  SELECT 1 row in set (0.003 sec)

Valid types are:

* string

* integer

* long

* short

* double

* float

* timestamp

