.. highlight:: psql
.. _scalar:

================
Scalar Functions
================

Scalar functions return a single data value (not a table).

.. note::

    Scalar functions aren't available in all query clauses. For example if a
    regular (non-system table) is queried the WHERE clause may not contain any
    scalar functions unless otherwise described in a function description below.

    In addition, the ORDER BY clause also may not contain any scalar functions
    unless GROUP BY is also present in the statement.

See below for a list of available scalar functions.


Generic Functions
=================

format('format_string', parameter, [ parameter , ... ]) returns string
----------------------------------------------------------------------

The ``format`` function takes a format string and a variable number of
arguments and returns a formatted string::

    cr> select format('%s.%s', schema_name, table_name) from sys.shards
    ... where table_name = 'locations'
    ... limit 1;
    +------------------------------------------+
    | format('%s.%s', schema_name, table_name) |
    +------------------------------------------+
    | doc.locations                            |
    +------------------------------------------+
    SELECT 1 row in set (... sec)

::

    cr> select format('%tY', date) from locations
    ... group by format('%tY', date)
    ... order by 1;
    +---------------------+
    | format('%tY', date) |
    +---------------------+
    |                1979 |
    |                2013 |
    +---------------------+
    SELECT 2 rows in set (... sec)

For details about the format string syntax see `formatter`_

.. _`formatter`: http://docs.oracle.com/javase/7/docs/api/java/util/Formatter.html

substr('string', from, [ count ]) returns string
------------------------------------------------

The ``substr`` function extracts a substring from a given string
starting at character ``from``. It takes an optional argument ``count``
which defines the length of the substring::

    cr> select substr(name, 3, 2) from sys.nodes
    ... limit 1;
    +--------------------+
    | substr(name, 3, 2) |
    +--------------------+
    | at                 |
    +--------------------+
    SELECT 1 row in set (... sec)



Date/Time Functions
===================

.. _scalar-date-trunc:

date_trunc('interval', ['timezone',] timestamp) returns timestamp
-----------------------------------------------------------------

The ``date_trunc`` function truncates a timestamp to a given interval
for a specific timezone.

Valid intervals are:

* second

* minute

* hour

* day

* week

* month

* quarter

* year

Valid values for ``timezone`` are either the name of a time zone (for example
'Europe/Vienna') or the UTC offset of a time zone (for example '+01:00').
To get a complete overview of all possible values take a look at the
`available time zones`_ supported by `Joda-Time`_.

The following example shows how to use the date_trunc function to generate a
day based histogram in the ``Europe/Moscow`` timezone::

    cr> select
    ... date_trunc('day', 'Europe/Moscow', date) as day,
    ... count(*) as num_locations
    ... from locations
    ... group by date_trunc('day', 'Europe/Moscow', date)
    ... order by date_trunc('day', 'Europe/Moscow', date);
    +---------------+---------------+
    | day           | num_locations |
    +---------------+---------------+
    | 308523600000  | 4             |
    | 1367352000000 | 1             |
    | 1373918400000 | 8             |
    +---------------+---------------+
    SELECT 3 rows in set (... sec)

If the time zone is not specified, truncation is based on UTC time::

    cr> select date_trunc('day', date) as day, count(*) as num_locations
    ... from locations
    ... group by date_trunc('day', date)
    ... order by date_trunc('day', date);
    +---------------+---------------+
    | day           | num_locations |
    +---------------+---------------+
    | 308534400000  | 4             |
    | 1367366400000 | 1             |
    | 1373932800000 | 8             |
    +---------------+---------------+
    SELECT 3 rows in set (... sec)


.. _`available time zones`: http://www.joda.org/joda-time/timezones.html

.. _`Joda-Time`: http://www.joda.org/joda-time/

Geo Functions
=============

distance(geo_point1, geo_point2) returns double
-----------------------------------------------

The ``distance`` function can be used to calculate the distance between two
points on earth.

The return value is the distance in meters.

Below is an example of the distance function where both points are specified
using WKT. See :ref:`geo_point_data_type` for more information on the implicit
type casting of geo points::

    cr> select distance('POINT (10 20)', 'POINT (11 21)') from sys.cluster;
    +--------------------------------------------+
    | distance('POINT (10 20)', 'POINT (11 21)') |
    +--------------------------------------------+
    |                              152462.707549 |
    +--------------------------------------------+
    SELECT 1 row in set (... sec)

This scalar function can always be used in both the ``WHERE`` and ``ORDER BY``
clauses. With the limitation that one of the arguments must be a literal and
the other argument must be a column reference.

.. note::

    The algorithm of the calculation which is used when the distance function
    is used as part of the result column list has a different precision than
    what is stored inside the index which is utilized if the distance function
    is part of a WHERE clause.

    For example if `select distance(...)` returns 0.0 an equality check with
    `where distance(...) = 0` might not yield anything at all due to the
    precision difference.

within(shape1, shape2) returns boolean
--------------------------------------

The ``within`` function returns true if ``shape1`` is within ``shape2``. If
that is not the case false is returned.

``shape1`` can either be a ``geo_shape`` or a ``geo_point``. ``shape2`` must be
a ``geo_shape``.

Below is an example of the within function which makes use of the implicit type
casting from strings to geo point and geo shapes::

    cr> select within('POINT (10 10)', 'POLYGON ((5 5, 10 5, 10 10, 5 10, 5 5))') from sys.cluster;
    +--------------------------------------------------------------------+
    | within('POINT (10 10)', 'POLYGON ((5 5, 10 5, 10 10, 5 10, 5 5))') |
    +--------------------------------------------------------------------+
    | TRUE                                                               |
    +--------------------------------------------------------------------+
    SELECT 1 row in set (... sec)

This function can always be used within a ``WHERE`` clause.


Fulltext Search Functions
=========================

match(columnName, queryTerm) returns boolean
--------------------------------------------

The MATCH function performs a fulltext search on a column. In order to use fulltext
searches on a column, a :ref:`fulltext index with an analyzer <sql_ddl_index_fulltext>`
must be created on the related column. See :ref:`fulltext-indices` for details::

    cr> select name from locations where match(name_description_ft, 'time');
    +-----------+
    | name      |
    +-----------+
    | Altair    |
    | Bartledan |
    +-----------+
    SELECT 2 rows in set (... sec)

To get the match score of the fulltext search, an internal system column
:ref:`_score <sql_ddl_system_column_score>` can be selected.
The higher the score value, the more relevant is the row::

    cr> select name, \"_score\" from locations where match(name_description_ft, 'time');
    +-----------+------------+
    | name      |     _score |
    +-----------+------------+
    | Altair    | 0.56319076 |
    | Bartledan | 0.4590714  |
    +-----------+------------+
    SELECT 2 rows in set (... sec)

.. note::

    The `_score` is a relative and not an absolute value. It just sets a row
    in relation to the other ones. 

The string used for a fulltext search is analyzed the same way as the indexed
values and the resulting tokens are compared to the already indexed tokens.
The tokens used for search are combined using the ``OR`` operator, so only
one of the resulting tokens has to match to include a row.
The more terms the search string contains, usually the more results will be
returned::

    cr> select name from locations where match(name_description_ft, 'time quordlepleen');
    +-----------+
    | name      |
    +-----------+
    | Aldebaran |
    | Altair    |
    | Bartledan |
    +-----------+
    SELECT 3 rows in set (... sec)

For more information, please refer to :ref:`sql_dml_fulltext_search`.


Mathematical Functions
======================


round(number) returns long or integer
-------------------------------------

If the input is of type double or long the result is the closest long to the
argument, with ties rounding up.

If the input is of type float or integer the result is the closest integer to
the argument, with ties rounding up.

See below for an example::

    cr> select round(42.2) from sys.cluster;
    +-------------+
    | round(42.2) |
    +-------------+
    |          42 |
    +-------------+
    SELECT 1 row in set (... sec)


ceil(number) returns long or integer
------------------------------------

Returns the smallest integer or long value that is not less than the argument.

Return value will be of type integer if the input value is an integer or float.
If the input value is of type long or double the return value will be of type
long::

    cr> select ceil(29.9) from sys.cluster;
    +------------+
    | ceil(29.9) |
    +------------+
    |         30 |
    +------------+
    SELECT 1 row in set (... sec)

random() returns double
-----------------------

The ``random`` function returns a random value in the range 0.0 <= X < 1.0

..note::

    All random values within the same row will be equal.


floor(number) returns long or integer
-------------------------------------

Returns the largest integer or long value that is not greater than the argument.

Return value will be an integer if the input value is an integer or a float.
If the input value is of type long or double the return value will be of type long.

See below for an example::

    cr> select floor(29.9) from sys.cluster;
    +-------------+
    | floor(29.9) |
    +-------------+
    |          29 |
    +-------------+
    SELECT 1 row in set (... sec)

abs(number)
-----------

Returns the absolute value of the given number in the datatype of the given number::

    cr> select abs(214748.0998), abs(0), abs(-214748) from sys.cluster;
    +------------------+--------+--------------+
    | abs(214748.0998) | abs(0) | abs(-214748) |
    +------------------+--------+--------------+
    |      214748.0998 |      0 |       214748 |
    +------------------+--------+--------------+
    SELECT 1 row in set (... sec)

sqrt(number) returns double
---------------------------

Returns the square root of the argument.

See below for an example::

    cr> select sqrt(25.0) from sys.cluster;
    +------------+
    | sqrt(25.0) |
    +------------+
    |        5.0 |
    +------------+
    SELECT 1 row in set (... sec)

log(b : number, x : number) returns double
------------------------------------------

Returns the logarithm of given ``x`` to base ``b``.

See below for an example, which essentially is the same as above::

    cr> SELECT log(10, 100) FROM sys.cluster;
    +--------------+
    | log(10, 100) |
    +--------------+
    |          2.0 |
    +--------------+
    SELECT 1 row in set (... sec)

The first argument (``b``) is optional. If not present, base 10 is used::

    cr> SELECT log(100) FROM sys.cluster;
    +----------+
    | log(100) |
    +----------+
    |      2.0 |
    +----------+
    SELECT 1 row in set (... sec)

.. note::

    An error is returned for arguments which lead to undefined or illegal
    results. E.g. log(0) results in ``minus infinity``, and therefore, an
    error is returned.

    The same is true for arguments which lead to a ``division by zero``, as
    e.g. log(1, 10) does.

ln(number) returns double
------------------------------------------

Returns the natural logarithm of given ``number``.

See below for an example::

    cr> SELECT ln(1) FROM sys.cluster;
    +-------+
    | ln(1) |
    +-------+
    |   0.0 |
    +-------+
    SELECT 1 row in set (... sec)

.. note::

    An error is returned for arguments which lead to undefined or illegal
    results. E.g. ln(0) results in ``minus infinity``, and therefore, an
    error is returned.
