.. highlight:: psql
.. _scalar:

================
Scalar Functions
================

Scalar functions return a single data value (not a table).

.. note::

    Scalar functions aren't available in all query clauses. For example if a
    regular (non-system table) is queried the WHERE clause may not contain any
    scalar functions unless otherwise described in a function description below.
    While some scalar functions are supported within a WHERE clause, comparing
    two scalar functions is never supported.

See below for a list of available scalar functions.


Generic Functions
=================

format('format_string', parameter, [ parameter , ... ]) returns string
----------------------------------------------------------------------

The ``format`` function takes a format string and a variable number of
arguments and returns a formatted string::

    cr> select format('%s.%s', schema_name, table_name) from sys.shards
    ... where table_name = 'locations'
    ... limit 1;
    +------------------------------------------+
    | format('%s.%s', schema_name, table_name) |
    +------------------------------------------+
    | doc.locations                            |
    +------------------------------------------+
    SELECT 1 row in set (... sec)

::

    cr> select format('%tY', date) from locations
    ... group by format('%tY', date)
    ... order by 1;
    +---------------------+
    | format('%tY', date) |
    +---------------------+
    |                1979 |
    |                2013 |
    +---------------------+
    SELECT 2 rows in set (... sec)

For details about the format string syntax see `formatter`_

.. _`formatter`: http://docs.oracle.com/javase/7/docs/api/java/util/Formatter.html

substr('string', from, [ count ]) returns string
------------------------------------------------

The ``substr`` function extracts a substring from a given string
starting at character ``from``. It takes an optional argument ``count``
which defines the length of the substring::

    cr> select substr(name, 3, 2) from sys.nodes
    ... limit 1;
    +--------------------+
    | substr(name, 3, 2) |
    +--------------------+
    | at                 |
    +--------------------+
    SELECT 1 row in set (... sec)



Date/Time Functions
===================

.. _scalar-date-trunc:

date_trunc('interval', ['timezone',] timestamp) returns timestamp
-----------------------------------------------------------------

The ``date_trunc`` function truncates a timestamp to a given interval
for a specific timezone.

Valid intervals are:

* second

* minute

* hour

* day

* week

* month

* quarter

* year

Valid values for ``timezone`` are either the name of a time zone (for example
'Europe/Vienna') or the UTC offset of a time zone (for example '+01:00').
To get a complete overview of all possible values take a look at the
`available time zones`_ supported by `Joda-Time`_.

The following example shows how to use the date_trunc function to generate a
day based histogram in the ``Europe/Moscow`` timezone::

    cr> select
    ... date_trunc('day', 'Europe/Moscow', date) as day,
    ... count(*) as num_locations
    ... from locations
    ... group by date_trunc('day', 'Europe/Moscow', date)
    ... order by date_trunc('day', 'Europe/Moscow', date);
    +---------------+---------------+
    | day           | num_locations |
    +---------------+---------------+
    | 308523600000  | 4             |
    | 1367352000000 | 1             |
    | 1373918400000 | 8             |
    +---------------+---------------+
    SELECT 3 rows in set (... sec)

If the time zone is not specified, truncation is based on UTC time::

    cr> select date_trunc('day', date) as day, count(*) as num_locations
    ... from locations
    ... group by date_trunc('day', date)
    ... order by date_trunc('day', date);
    +---------------+---------------+
    | day           | num_locations |
    +---------------+---------------+
    | 308534400000  | 4             |
    | 1367366400000 | 1             |
    | 1373932800000 | 8             |
    +---------------+---------------+
    SELECT 3 rows in set (... sec)


.. _`available time zones`: http://www.joda.org/joda-time/timezones.html

.. _`Joda-Time`: http://www.joda.org/joda-time/

Geo Functions
=============

distance(geo_point1, geo_point2) returns double
-----------------------------------------------

The ``distance`` function can be used to calculate the distance between two
points on earth.

The return value is the distance in meters.

Below is an example of the distance function where both points are specified
using WKT. See :ref:`geo_point_data_type` for more information on the implicit
type casting of geo points::

    cr> select distance('POINT (10 20)', 'POINT (11 21)') from sys.cluster;
    +--------------------------------------------+
    | distance('POINT (10 20)', 'POINT (11 21)') |
    +--------------------------------------------+
    |                              152462.707549 |
    +--------------------------------------------+
    SELECT 1 row in set (... sec)

This scalar function can always be used in both the ``WHERE`` and ``ORDER BY``
clauses. With the limitation that one of the arguments must be a literal and
the other argument must be a column reference.

.. note::

    The algorithm of the calculation which is used when the distance function
    is used as part of the result column list has a different precision than
    what is stored inside the index which is utilized if the distance function
    is part of a WHERE clause.

    For example if `select distance(...)` returns 0.0 an equality check with
    `where distance(...) = 0` might not yield anything at all due to the
    precision difference.

within(shape1, shape2) returns boolean
--------------------------------------

The ``within`` function returns true if ``shape1`` is within ``shape2``. If
that is not the case false is returned.

``shape1`` can either be a ``geo_shape`` or a ``geo_point``. ``shape2`` must be
a ``geo_shape``.

Below is an example of the within function which makes use of the implicit type
casting from strings to geo point and geo shapes::

    cr> select within(
    ...   'POINT (10 10)',
    ...   'POLYGON ((5 5, 10 5, 10 10, 5 10, 5 5))'
    ... ) from sys.cluster;
    +--------------------------------------------------------------------+
    | within('POINT (10 10)', 'POLYGON ((5 5, 10 5, 10 10, 5 10, 5 5))') |
    +--------------------------------------------------------------------+
    | TRUE                                                               |
    +--------------------------------------------------------------------+
    SELECT 1 row in set (... sec)

This function can always be used within a ``WHERE`` clause.


Mathematical Functions
======================

All mathematical functions can be used within ``WHERE`` and
``ORDER BY`` clauses.

abs(number)
-----------

Returns the absolute value of the given number in the datatype of the given number::

    cr> select abs(214748.0998), abs(0), abs(-214748) from sys.cluster;
    +------------------+--------+--------------+
    | abs(214748.0998) | abs(0) | abs(-214748) |
    +------------------+--------+--------------+
    |      214748.0998 |      0 |       214748 |
    +------------------+--------+--------------+
    SELECT 1 row in set (... sec)


ceil(number) returns long or integer
------------------------------------

Returns the smallest integer or long value that is not less than the argument.

Return value will be of type integer if the input value is an integer or float.
If the input value is of type long or double the return value will be of type
long::

    cr> select ceil(29.9) from sys.cluster;
    +------------+
    | ceil(29.9) |
    +------------+
    |         30 |
    +------------+
    SELECT 1 row in set (... sec)



floor(number) returns long or integer
-------------------------------------

Returns the largest integer or long value that is not greater than the argument.

Return value will be an integer if the input value is an integer or a float.
If the input value is of type long or double the return value will be of type long.

See below for an example::

    cr> select floor(29.9) from sys.cluster;
    +-------------+
    | floor(29.9) |
    +-------------+
    |          29 |
    +-------------+
    SELECT 1 row in set (... sec)


ln(number) returns double
-------------------------

Returns the natural logarithm of given ``number``.

See below for an example::

    cr> SELECT ln(1) FROM sys.cluster;
    +-------+
    | ln(1) |
    +-------+
    |   0.0 |
    +-------+
    SELECT 1 row in set (... sec)

.. note::

    An error is returned for arguments which lead to undefined or illegal
    results. E.g. ln(0) results in ``minus infinity``, and therefore, an
    error is returned.


log(x : number, b : number) returns double
------------------------------------------

Returns the logarithm of given ``x`` to base ``b``.

See below for an example, which essentially is the same as above::

    cr> SELECT log(100, 10) FROM sys.cluster;
    +--------------+
    | log(100, 10) |
    +--------------+
    |          2.0 |
    +--------------+
    SELECT 1 row in set (... sec)

The second argument (``b``) is optional. If not present, base 10 is used::

    cr> SELECT log(100) FROM sys.cluster;
    +----------+
    | log(100) |
    +----------+
    |      2.0 |
    +----------+
    SELECT 1 row in set (... sec)

.. note::

    An error is returned for arguments which lead to undefined or illegal
    results. E.g. log(0) results in ``minus infinity``, and therefore, an
    error is returned.

    The same is true for arguments which lead to a ``division by zero``, as
    e.g. log(10, 1) does.


random() returns double
-----------------------

The ``random`` function returns a random value in the range 0.0 <= X < 1.0.

.. note::

    Every call to ``random`` will yield a new random number.


round(number) returns long or integer
-------------------------------------

If the input is of type double or long the result is the closest long to the
argument, with ties rounding up.

If the input is of type float or integer the result is the closest integer to
the argument, with ties rounding up.

See below for an example::

    cr> select round(42.2) from sys.cluster;
    +-------------+
    | round(42.2) |
    +-------------+
    |          42 |
    +-------------+
    SELECT 1 row in set (... sec)


sqrt(number) returns double
---------------------------

Returns the square root of the argument.

See below for an example::

    cr> select sqrt(25.0) from sys.cluster;
    +------------+
    | sqrt(25.0) |
    +------------+
    |        5.0 |
    +------------+
    SELECT 1 row in set (... sec)


.. _scalar-regex:

Regular Expression Functions
============================

.. _scalar-regex-matches:

regex_matches(source, pattern [, flags]) returns string_array
-------------------------------------------------------------

This function uses the regular expression pattern in ``pattern``,
to find a matching subsequence of the ``source`` string.

If any subsequence of ``source`` matches, it returns an array of the matched
regular expression groups. If no subsequence matches, not even the
whole string, it returns ``NULL``.

A regular expression group is formed by a subexpression that is surrounded by parentheses.
The position of a group is determined by the position of its opening brackets.
For example when matching the pattern ``\b([A-Z]).*`` a match for the
subexpression ``([A-Z])`` would create group No. 1.

If the regular expression in given ``pattern`` does not contain any groups,
the subsequence of ``source`` matching the whole pattern will be returned
as single array element. This subsequence if also known as group No. 0.
If you want to group stuff with parentheses, but no group shall be created,
use ``(?...)``.

For example matching the regular expression ``^([Aa](.+)z)$ against ``alcatraz``, results in these groups:

 * group 0: ``alcatraz`` (the whole string, if it matched)
 * group 1: ``alcatraz`` (from first to last bracket)
 * group 2: ``lcatra`` (beginning at second brace)

The ``regex_matches`` function will only return groups 1 and 2::

    cr> select regex_matches('alcatraz', '^(a(.+)z)$') as match from sys.cluster;
    +------------------------+
    | match                  |
    +------------------------+
    | ['alcatraz', 'lcatra'] |
    +------------------------+
    SELECT 1 row in set (... sec)

.. note::

   ``regex_matches`` supports `Java Regular Expressions`_. See the api documentation
   for more details.

.. _scalar-regex-matches-flags:

Flags
.....

This function takes a number of flags as optional third parameter.
These flags are given as a string of any the characters listed below.
Order does not matter.

+-------+---------------------------------------------------------------------+
| Flag  | Description                                                         |
+=======+=====================================================================+
| i     | enable case insensitive matching                                    |
+-------+---------------------------------------------------------------------+
| u     | enable unicode case folding when used together with ``i``           |
+-------+---------------------------------------------------------------------+
| U     | enable unicode support for character classes like \W                |
+-------+---------------------------------------------------------------------+
| s     | make ``.`` match line terminators, too                              |
+-------+---------------------------------------------------------------------+
| m , n | make ``^`` and ``$`` match on the beginning or end of a line        |
|       | too.                                                                |
+-------+---------------------------------------------------------------------+
| x     | permit whitespace and line comments starting with ``#``             |
+-------+---------------------------------------------------------------------+
| d     | only ``\n`` is considered a line-terminator when using ``^``, ``$`` |
|       | and ``.``                                                           |
+-------+---------------------------------------------------------------------+


Examples
........

::

    cr> select regex_matches('foobar', '^(a(.+)z)$') as match from sys.cluster;
    +-------+
    | match |
    +-------+
    | NULL  |
    +-------+
    SELECT 1 row in set (... sec)

::

    cr> select regex_matches('99 bottles of beer on the wall', '(?\b[A-Z](?\w+))', 'i') as match from sys.cluster;
    +-------------+
    | match       |
    +-------------+
    | ['bottles'] |
    +-------------+
    SELECT 1 row in set (... sec)

regex_replace(source, pattern, replacement [, flags]) returns string
--------------------------------------------------------------------

``regex_replace`` can be used to replace every (or only the first) occurence of
a subsequence matching ``pattern`` in the ``source`` string with the ``replacement``
string. If no subsequence in ``source`` matches the regular expression ``pattern``,
``source`` is returned unchanged.

``pattern`` is a java regular expression. For details on the regexp syntac,
see `Java Regular Expressions`_.

The ``replacement`` string may contain expressions like ``\n``
where ``n`` is a digit between 1 and 9. It references the nth matched group of
``pattern`` and the matching subsequence of that group will be inserted
in the returned string. The expression ``\$`` will insert the whole matching
subsequence for ``pattern`` a.k.a. group No. 0.

Per default, only the first occurrence of a subsequence matching ``pattern``
will be replaced. If all occurrences shall be replaced use the ``g`` flag.

Flags
.....

``regex_replace`` supports the same flags than ``regex_matches``,
see `scalar-regex-matches-flags`_ and additionally the ``g`` flag:

+-------+---------------------------------------------------------------------+
| Flag  | Description                                                         |
+=======+=====================================================================+
| g     | replace all occurrences of a subsequence matching ``pattern``,      |
|       | not only the first                                                  |
+-------+---------------------------------------------------------------------+

Examples
........

::

   cr> select regex_replace(name, '(\w+)\b\w+', '\1') as replaced from locations
   ... order by name limit 5;

::

   cr> select regex_replace('alcatraz', '(foo)(bar)+', '\1baz') as replaced
   ... from sys.cluster;


.. _Java Regular Expressions: http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html