.. highlight:: psql
.. _sql_lexical:

=================
Lexical Structure
=================

An SQL input consists of a sequence of commands each of which
is a sequence of tokens, terminated by a semicolon (``;``).

The syntax of a command defines its set of valid tokens.
A token can be a key word, an identifier, a quoted identifier,
a literal (or constant), or a special character symbol.

.. _sql_lexical_keywords_identifiers:

Key Words and Identifiers
=========================

Tokens such as ``CREATE``, ``SELECT``, ``UPDATE``, or ``DELETE`` are **key words**,
specific words with a fixed meaning.

Tokens such as ``my_table``, ``id``, ``name``, or ``data`` in the example above
are **identifiers**, which identify names of tables, columns, and other database objects.

Example::

    CREATE TABLE my_table (
      id INTEGER,
      name STRING,
      data OBJECT
    ) WITH (number_of_replicas = 0);

.. note::

  Key words and unquoted identifiers are case insensitive.


This means that::

  select foo from t;

is equivalent to::

  select Foo from t;

or::

  select FOO from t;

A widely used convention is to write key words in uppercase and identifiers in
lowercase, such as

::

  ALTER TABLE foo ADD COLUMN new_column INTEGER;

::

  INSERT INTO foo (id, name) VALUES (1, 'bar');

Quoted identifiers can contain an arbitrary sequence of charactes enclosed
by double quotes (``"``). Quoted identifiers are never keywords, so you can
use ``"update"`` as a table or column name.

.. note::

  If you want to use any key words as identifiers you **have to**
  quote the identifiers!

.. note::

  It is even possible to create column names that look like subscript notation,
  e.g. ``"column['looks_like_nested']"``. When querying the information schema,
  the colum name would look identical as a nested object column!


.. _sql_lexical_special_chars:

Special Characters
==================

Some non-alphanumeric characters do have a special meaning. For their usage
please refer to the sections where the respective syntax elements are described.

:Semicolon:
    The semicolon (``;``) terminates an SQL statement. It cannot appear anywhere
    else within the command, except within a string or quoted identifier.

:Comma:
    The comma (``,``) is used in various syntactical elements to separate
    elements of a list.

:Brackets:
    Square brackets (``[]``) are used to select elements of arrays and objects,
    e.g. ``arr[1]`` or ``obj['key']``.

:Asterisk:
    The asterisk (``*``) is used in some contexts to denote all columns of
    a table. As an argument in global aggregate functions it has the meaning
    of *any field*, e.g. ``COUNT(*)``.

:Period:
    The period (``.``) is used for numeric values and to separate schema
    and table names, e.g. ``blob.my_blob_table``.


.. _sql_lexical_subscript:

Subscript Syntax
================

Crate uses the **subscript syntax** to describe paths of object columns.
The subscript syntax consists of subscribed object (identifier) and a
single quoted (``'``) key enclosed in square brackets (``[]``).

.. note::

  Keys of a subscript are strings and not identifiers and therefore
  case sensitive.

Example::

  object_column['key']

Subscripts can be arbitrarily deeply nested.


.. _sql_lexical_comments:

Comments
========

An SQL input can contain comments. Comments are not implemented on the
server side, but the `crash`_ command line interface ignores single line comments.
Single line comments start with a double dash (``--``) and end at the end of
that line.

Example::

  SELECT *
    FROM information_schema.tables
    WHERE schema_name = 'doc'; -- query information schema for doc tables


.. _`crash`: https://github.com/crate/crash/

