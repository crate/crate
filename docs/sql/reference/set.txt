.. highlight:: psql
.. _ref-set:

===========
SET / RESET
===========

Alter and restore global cluster setting values at runtime.

Synopsis
========

::

    SET GLOBAL [ PERSISTENT | TRANSIENT ] setting_ident = value [ , ... ]

    RESET GLOBAL [ PERSISTENT | TRANSIENT ] setting_ident [ , ... ]

Description
===========

Using the ``SET`` and ``RESET`` statements it is possible to configure the
crate cluster at runtime.

``SET`` can be used to change a configuration setting ident to a different value.
Using ``RESET`` will reset the setting  to its default value.

Parameters
==========

:setting_ident: The full qualified setting ident of the setting to set / reset.

:value: The value to set for the configuration setting.


Supported Configuration Parameters
==================================

.. _ref_collecting_stats:

Collecting Stats
----------------

:stats.enabled:
    A boolean indicating whether or not to collect statistical information
    about the cluster.

:stats.jobs_log_size:
   The number of jobs kept in the ``sys.jobs_log`` table on each node for performance analytics.
   Older entries will be deleted when the ``jobs_log_size`` is reached.
   A single SQL statement results in a job to be executed on the cluster.
   A higher number results in more expressive results but also in more
   occupied RAM. Setting it to ``0`` disables collecting job information.

:stats.operations_log_size:
    The number of operations to keep in the ``sys.operations_log`` table
    on each node for performance analytics.
    Older entries will be deleted when the ``operations_log_size`` is reached.
    A job consists of one or many operations.
    A higher number results in more expressive results but also in more
    occupied RAM.
    Setting it to ``0`` disables collecting operation information.

.. _ref_set_graceful_stop:

Graceful Stop
-------------

:cluster.graceful_stop.min_availability:
    Options are: ``none | primaries | full``

    ``none``: No minimum data availability is required. The node may shut down
    even if records are missing after shutdown.

    ``primaries``: At least all primary shards need to be availabe after the
    node has shut down. Replicas may be missing.

    ``full``: All records and all replicas need to be available after the
    node has shut down. Data availability is full.

    .. note::

      This option is ignored if there is only 1 node in a cluster!

:cluster.graceful_stop.reallocate:
    Options are: ``true | false``

    ``true``: The ``graceful stop`` command allows shards to be reallocated before
    shutting down the node in order to ensure minimum data availability set
    with ``min_availability``.

    ``false``: The ``graceful stop`` command will fail if the cluster would
    need to reallocate shards in order to ensure the minimum data availability
    set with ``min_availability``.

    .. note::

      Make sure you have enough nodes and enough disk space for the reallocation.

:cluster.graceful_stop.timeout:
    Defines the maximum waiting time in milliseconds
    for the reallocation process to finish.
    The ``force`` setting will define the behaviour when the shutdown process
    runs into this timeout.

    The timeout expects a time value either as a long or double
    or alternatively as a string literal with a time suffix
    (``ms``, ``s``, ``m``, ``h``, ``d``, ``w``)

:cluster.graceful_stop.force:
    Options are: ``true | false``

    Defines whether ``graceful stop`` should force stopping of the node if it
    runs into the timeout which is specified with the ``timeout`` setting.

:cluster.graceful_stop.is_default:
    ``true | false``
    This options defines whether the ``stop`` command of the ``crate`` executable
    uses the graceful-stop option by default.


.. _ref_routing:

Routing
-------

:cluster.routing.allocation.enable:
    Options are: ``all | new_primaries``

    ``all`` allows all shard allocations. The default value ``all`` specifies
    that the cluster can allocate all kinds of shards.

    ``new_primaries`` allows allocations for new primary shards only. This means
    that for example a newly added node will not allocate any replicas. However
    it is still possible to allocate new primary shards for new indices.
    Whenever you want to perform a zero downtime upgrade of your cluster
    you need to set ``cluster.routing.allocation.enable`` to this value before gracefully
    stopping the first node and reset it to ``all`` after starting the last
    updated node.


Persistence
===========

The default is ``TRANSIENT``. Settings that are changed using the ``TRANSIENT``
keyword will be lost if the cluster is stopped or restarted.

Using the ``PERSISTENT`` keyword will persist the changes to disk so that the
change will survive cluster restarts.
