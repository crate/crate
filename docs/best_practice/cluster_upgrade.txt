.. highlight:: sh
.. _cluster_upgrade:

=====================
Zero Downtime Upgrade
=====================

Crate Data provides an easy way to perform a cluster upgrade with zero downtime.

To perform a rolling upgrade of a Crate cluster without downtime you need to
utilise the ``graceful stop`` procedure. This will ensure
a certain data availability during upgrade while one or more nodes of the
cluster are not available.

If you keep the following 6 simple steps in mind you will be able to upgrade your
cluster without downtime.


Step 1: Disable Re-Allocations
==============================

First, you have to prevent the cluster from re-distributing shards and replicas
while certain nodes are not available. You can do that by disabling
re-allocations and only allowing new primary allocations.

Use the :ref:`ref-set` command to do so:

.. code-block:: psql

  cr> SET GLOBAL TRANSIENT routing.allocation.enable = 'new_primaries';
  SET OK (... sec)

.. note::

  This step may be omited if you set the ``graceful_stop.min_availability``
  setting to ``full``.

.. seealso::

  - :ref:`conf_routing`


Step 2: Graceful Stop
=====================

The ``crate`` process supports multiple signals (see :ref:`cli_signals`) that invoke different
shutdown procedures. To stop a Crate process gracefully you need to
send the ``USR2`` signal::

  sh$ kill -USR2 `cat /path/to/crate.pid`

Depending on your installation you can make use of the init script.

E.g. like that::

  sh$ service crate graceful-stop

Using the default settings the node would shut down by moving all primary shards
off the node first. This will ensure that no data is lost. However, the cluster
health will go most likely to yellow, because replicas that lived on that node
will be missing.

If you want to ensure green health, you'd need to change the
``gradeful_stop.min_availability`` setting to ``full``. This will move
all shards off the node before shutting down.

Keep in mind that reallocating shards might take some time depending
on the amount of shards and the amount and size of records (and/or blob data).
For that reason you should set the ``timeout`` setting to a reasonable
time. By default the shutdown process aborts and the cluster will start
distributing shards evenly again. If you want to force a shutdown after
the timeout, even if the reallocating is not finished, you can set the
``force`` setting to ``true``.

.. warning::

  A forced stop does not ensure the minimum data availability
  defined in the settings and may result in temporary or even permanent
  loss of data!

.. note::

  If there are not enough nodes in the cluster, to move shards the graceful
  shutdown procedure will fail!
  For example, if there are 4 nodes and 3 configured replicas there will not be
  enough nodes to to fulfill the required replicas.

.. note::

  Also, if there is not enough disk space on other nodes to move the shards to
  the graceful stop procedure will fail.

You can also set the ``reallocate`` setting to ``false`` if you want to ensure
that a node cannot be stopped if the cluster would need to move shard off the
node. This can prevent long waiting times until the shutdown process runs
into timeout during reallocation.

By default, only the ``graceful stop`` command considers the cluster settings
described below. To make the regular ``stop`` command consider these settings
as well, you can change ``is_default`` to ``true``.


Step 3: Upgrade Crate
=====================

After the node is stopped you can safely upgrade your Crate installation.
Depending on your installation and operating system you can do it by downloading
the latest tarball or just use the package manager.

Example for RHEL/YUM::

  $sh yum update -y crate

If you are in doubt how to upgrade an installed package,
please refer to the man pages of your operating system / package manager.


Step 4: Start Crate
===================

Once the upgrade process is completed you can start the Crate process again
by either invoking the bin/crate executable from the tarball directly::

  sh$ /path/to/bin/crate

or using the service manager of your operating system.

Example for RHEL/YUM::

  sh$ service crate start


Step 5: Repeat
==============

Repeat step 2, 3 and 4 for all other nodes.


Step 6: Enable Reallocations
============================

Last but not least when all nodes are updated you can re-enable
allocations again that have been disabled in the first step:

.. code-block:: psql

  cr> SET GLOBAL TRANSIENT routing.allocation.enable = 'all';
  SET OK (... sec)


.. warning::

  Even the safest upgrade process might go wrong at some point.
  So make sure you have your data backed up!

