apply from: "$rootDir/gradle/javaModule.gradle"

archivesBaseName = 'crate-sql-parser'

ext.antlr = [
        source : "src/main/antlr",
        output : "src/main/java/io/crate/sql/parser/antlr/v4",
        package: 'io.crate.sql.parser.antlr.v4'
]

configurations {
    antlr4
}

dependencies {
    antlr4 "org.antlr:antlr4:${versions.antlr}"
    implementation "org.antlr:antlr4-runtime:${versions.antlr}"

    implementation project(':shared')
    implementation "com.google.code.findbugs:jsr305:${versions.jsr305}"

    testImplementation "org.hamcrest:hamcrest:${versions.hamcrest}"
    testImplementation "org.junit.jupiter:junit-jupiter:${versions.junit5}"
    testImplementation "junit:junit:${versions.junit}"
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine") {
        because 'allows JUnit 3 and JUnit 4 tests to run'
    }
}

task antlrOutputDir {
    doLast {
        mkdir(antlr.output)
    }
}

task generateGrammarSource(dependsOn: antlrOutputDir, type: JavaExec) {
    inputs.files(fileTree(antlr.source))
    outputs.dir file(antlr.output)

    def grammars = fileTree(antlr.source).include('**/*.g4')

    main = 'org.antlr.v4.Tool'
    classpath = configurations.antlr4
    args = ["-o", "${antlr.output}", "-visitor", "-package", antlr.package, grammars.files].flatten()
}

test {
    jacoco {
        excludes = [
                "*Test*",
                "TreeAssertions*",
                "TreePrinter*"
        ]
    }
}

tasks.withType(JavaCompile) {
    it.dependsOn('generateGrammarSource')
}

clean {
    delete antlr.output
}
