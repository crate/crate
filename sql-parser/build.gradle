apply plugin: 'java'
apply plugin: 'maven'

archivesBaseName = 'crate-sql-parser'

repositories {
    mavenCentral()
}

configurations {
    antlr3
}

dependencies {
    compile 'com.google.code.findbugs:jsr305:1.3.9'
    compile 'joda-time:joda-time:2.8.2'
    compile 'com.google.guava:guava:18.0'
    compile 'org.antlr:antlr-runtime:3.5'

    antlr3 'org.antlr:antlr:3.4'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile ('junit:junit:4.11') {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
}

task generateWithANTLR3(type:Exec) {
    String outputPath = 'src/main/java/io/crate/sql/parser';
    ext.parserOutputFiles = files(
            'src/main/java/io/crate/sql/parser/StatementLexer.java',
            'src/main/java/io/crate/sql/parser/StatementParser.java',
            'src/main/java/io/crate/sql/parser/StatementBuilder.java',
            'src/main/java/io/crate/sql/parser/Statement.tokens',
            'src/main/java/io/crate/sql/parser/StatementBuilder.tokens'
    )
    ext.parserInputFiles = files(
            'src/main/java/io/crate/sql/parser/Statement.g',
            'src/main/java/io/crate/sql/parser/StatementBuilder.g'
    )

    inputs.files(ext.parserInputFiles)
    outputs.files(ext.parserOutputFiles)

    commandLine = ['java', '-cp',  configurations.antlr3.getAsPath(), 'org.antlr.Tool', '-o', outputPath] + ext.parserInputFiles
}

tasks.withType(JavaCompile) {
    it.dependsOn generateWithANTLR3
}


test {
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'

    jacoco {
        excludes = [
                "*Test*",
                "TreeAssertions*",
                "TreePrinter*"
                ]
    }
}

clean {
    doLast {
        generateWithANTLR3.ext.parserOutputFiles.each {
            it.delete()
        }
        file('Statement.tokens').delete()
        file('StatementBuilder.tokens').delete()
    }
}
