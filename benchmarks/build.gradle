// generate uberjar with all benchmarks
apply plugin: 'application'
// mainClassName must come after application but before shadow plugin application
// to avoid a warning. See https://github.com/johnrengelman/shadow/issues/336
mainClassName = 'org.openjdk.jmh.Main'
apply from: "$rootDir/gradle/javaModule.gradle"

archivesBaseName = 'crate-benchmarks'

test.enabled = false

dependencies {
    compile project(':server')
    compile project(path: ':server', configuration: 'testOutput')
    compile project(path: ':libs:dex', configuration: 'testOutput')
    compile project(path: ':enterprise:functions', configuration: 'testOutput')
    implementation project(':libs:sql-parser')

    compile 'org.openjdk.jmh:jmh-core:1.21'
    implementation 'org.openjdk.jmh:jmh-generator-annprocess:1.21'
    annotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.21'

    // Dependencies of JMH
    runtime 'net.sf.jopt-simple:jopt-simple:4.6'
    runtime 'org.apache.commons:commons-math3:3.2'
}

compileTestJava {
    options.annotationProcessorPath = configurations.default
}

tasks.shadowJar.configure {
  classifier = "all"
}

shadowJar {
    append 'META-INF/services/org.apache.lucene.codecs.DocValuesFormat'
    append 'META-INF/services/org.apache.lucene.codecs.Codec'
    append 'META-INF/services/org.apache.lucene.codecs.PostingsFormat'
    exclude('com/carrotsearch/randomizedtesting/**')

    // We keep the benchmarks in the test sources instead of main, because
    // IntelliJ doesn't pick up the `:server / testOutput` dependencies otherwise
    // So test.output contains the benchmarks which we want to have in the jar
    from sourceSets.test.output
}

task jmhJar (
    dependsOn: shadowJar,
    description: 'Generates an uberjar with the microbenchmarks and all dependencies',
    group: 'Benchmark'
)
