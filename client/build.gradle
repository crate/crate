apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

archivesBaseName = "crate-client"

evaluationDependsOn(':core')
evaluationDependsOn(':sql')
evaluationDependsOn(':app')

configurations {
    all*.exclude group: 'org.elasticsearch'
}

dependencies {
    compile (project(':es')) {
        exclude group: 'org.apache.lucene'
    }
    // needed by ES Version class
    compile 'org.apache.lucene:lucene-core:4.7.1'
    compile 'org.apache.lucene:lucene-analyzers-common:4.7.1'

    compile files(project(':core').sourceSets.shared.output.classesDir)
    compile files(project(':sql').sourceSets.shared.output.classesDir)

    testCompile project(':testing')
    testCompile project(':core')
    testCompile project(':sql')
}

processResources.dependsOn([':core:compileSharedJava', ':sql:compileSharedJava'])
compileJava.dependsOn([':core:compileSharedJava', ':sql:compileSharedJava'])

test {
    testLogging {
        // show standard out and standard error of the test JVM(s) on the console
        showStandardStreams = true
        // Show that tests are run in the command-line output
        events 'started', 'passed'
    }
    // force run, see: http://gradle.1045684.n5.nabble.com/how-does-gradle-decide-when-to-run-tests-td3314172.html
    outputs.upToDateWhen { false }

    // allow to set the number of test forks from the CLI
    if (project.hasProperty('testForks')) {
        maxParallelForks = project.testForks as int
    }
}

jar {
    baseName 'crate-client'
    duplicatesStrategy 'exclude'

    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it).matching{
        exclude 'META-INF/**'
    }}

    doLast {
        manifest {
            attributes("Implementation-Title": "Crate Data Java Client")
            version project.version
        }
    }
}

task buildJar(dependsOn: [':app:getVersion', ':core:compileSharedJava', ':sql:compileSharedJava', 'classes']) {
    doLast {
        ext.version = project(':app').getVersion.version
        project.version = ext.version
        tasks.jar.execute()
    }
}

task myJavadocs(type: Javadoc, dependsOn: processResources) {
    classpath = configurations.compile
    source = sourceSets.main.allJava + project(':core').sourceSets.shared.allJava + project(':sql').sourceSets.shared.allJava
}
task javadocJar (type: Jar, dependsOn: [myJavadocs]) {
    classifier = 'javadoc'
    from myJavadocs.destinationDir
    manifest {
        attributes("Implementation-Title": "Crate Data Java Client")
    }
}

task buildJavadocJar (dependsOn: [':app:getVersion', myJavadocs] ) << {
    ext.version = project(':app').getVersion.version
    project.version = ext.version
    tasks.javadocJar.execute()
}

task sourceJar (type : Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource + project(':core').sourceSets.shared.allSource + project(':sql').sourceSets.shared.allSource
    manifest {
        attributes("Implementation-Title": "Crate Data Java Client")
    }
}

task buildSourceJar (dependsOn: [':app:getVersion'] ) << {
    ext.version = project(':app').getVersion.version
    project.version = ext.version
    tasks.sourceJar.execute()
}

artifacts {
    archives jar
    archives javadocJar
    archives sourceJar
}

task signJars (type : Sign, dependsOn: [buildJar, buildJavadocJar, buildSourceJar]) {
    sign configurations.archives
}


install.dependsOn([buildJar, buildJavadocJar, buildSourceJar])
install {
    repositories {
        mavenInstaller {
            pom.whenConfigured {
                it.dependencies.clear()
            }
        }
    }
}

project.ext.bintrayUsername = project.hasProperty('bintrayUsername') ? bintrayUsername : ""
project.ext.bintrayPassword = project.hasProperty('bintrayPassword') ? bintrayPassword : ""

uploadArchives.dependsOn([':core:compileSharedJava', ':sql:compileSharedJava', buildJar, buildJavadocJar, buildSourceJar, signJars])
uploadArchives {
    repositories{
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
                if (project.ext.bintrayUsername.length() == 0 || project.ext.bintrayPassword.length() == 0) {
                    throw new StopExecutionException("uploadArchives cannot be called without bintray username and password")
                }
            }
            pom.whenConfigured {
                it.dependencies.clear()
            }
            pom.project {
                artifactId 'crate-client'
                name 'crate-client'
                description 'Crate Data Java Client'
                url 'https://crate.io'
                scm {
                    url 'https://github.com/crate/crate'
                    connection 'scm:git:git://github.com/crate/crate.git'
                    developerConnection 'scm:git:ssh:git@github.com:crate/crate.git'
                }
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/license/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id 'crate'
                        name 'Crate Developers'
                        email 'office@crate.io'
                    }
                }
            }
            repository(id: 'crate-client', url: 'https://api.bintray.com/maven/crate/crate/crate-client') {
                authentication(userName: project.ext.bintrayUsername, password: project.ext.bintrayPassword)
            }
        }
    }
}
