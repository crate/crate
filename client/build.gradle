plugins {
    id 'java'
    id 'maven'
    id 'signing'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}

archivesBaseName = "crate-client"

evaluationDependsOn(':core')
evaluationDependsOn(':sql')

configurations {
    all*.exclude group: 'org.elasticsearch'
}

dependencies {
    compile (project(':es')) {
        exclude group: 'org.apache.lucene'
        exclude group: 'org.codehaus.groovy'
        exclude group: 'com.github.spullara.mustache.java'
        exclude group: 'org.antlr'
        exclude group: 'net.java.dev.jna'
        exclude group: 'com.tdunning'
        exclude group: 'commons-cli'
        exclude group: 'org.slf4j'
    }
    // needed by ES Version class - keep up to date with es dependencies
    compile 'org.apache.lucene:lucene-analyzers-common:5.3.1'
    compile 'org.apache.lucene:lucene-core:5.3.1'

    compile 'com.google.code.findbugs:jsr305:1.3.9'
    compile files(project(':core').sourceSets.shared.output.classesDir)
    compile files(project(':sql').sourceSets.shared.output.classesDir)

    testCompile project(':testing')
    testCompile project(':core')
    testCompile project(':sql')
}

processResources.dependsOn([':core:compileSharedJava', ':sql:compileSharedJava'])
compileJava.dependsOn([':core:compileSharedJava', ':sql:compileSharedJava'])


test {
    testLogging.exceptionFormat = 'full'

    jacoco {
        excludes = [ "*Test*" ]
    }
}

shadowJar {

    baseName 'crate-client'
    classifier ''
    duplicatesStrategy 'exclude'

    exclude 'org/hyperic/**' // exclude sigar stuff
    exclude 'META-INF/**'

    // remember to update mapping in CrateClientClassLoader when changing this
    relocate 'org.elasticsearch',     'io.crate.shade.org.elasticsearch'
    relocate 'org.apache.lucene',     'io.crate.shade.org.apache.lucene'
    relocate 'org.joda',              'io.crate.shade.org.joda'
    relocate 'org.tartarus.snowball', 'io.crate.shade.org.tartarus.snowball'
    relocate 'com.carrotsearch.hppc', 'io.crate.shade.com.carrotsearch.hppc'
    relocate 'com.fasterxml.jackson', 'io.crate.shade.com.fasterxml.jackson'
    relocate 'com.google',            'io.crate.shade.com.google'
    relocate 'com.ning.compress',     'io.crate.shade.com.ning.compress'
    relocate 'org.jboss.netty',       'io.crate.shade.org.jboss.netty'
    relocate 'org.apache.commons',    'io.crate.shade.org.apache.commons'
    relocate 'jsr166e',               'io.crate.shade.jsr166e'
    relocate 'com.spatial4j',         'io.crate.shade.com.spatial4j'
    relocate 'com.vividsolutions',    'io.crate.shade.com.vividsolutions'

    doLast {
        manifest {
            attributes("Implementation-Title": "Crate.IO Java Client")
            version project.version
        }
    }
}

task buildJar(dependsOn: [':core:getVersion', ':core:compileSharedJava', ':sql:compileSharedJava', 'classes']) {
    doLast {
        ext.version = project(':core').getVersion.version
        project.version = ext.version
        tasks.shadowJar.execute()
    }
}
tasks.buildJar.mustRunAfter jar // otherwise jar task would override shadowJar artifact

task myJavadocs(type: Javadoc, dependsOn: processResources) {
    classpath = configurations.compile
    source = sourceSets.main.allJava + project(':core').sourceSets.shared.allJava + project(':sql').sourceSets.shared.allJava
}
task javadocJar (type: Jar, dependsOn: [myJavadocs]) {
    classifier = 'javadoc'
    from myJavadocs.destinationDir
    manifest {
        attributes("Implementation-Title": "Crate.IO Java Client")
    }
}

task buildJavadocJar (dependsOn: [':core:getVersion', myJavadocs] ) << {
    ext.version = project(':core').getVersion.version
    project.version = ext.version
    tasks.javadocJar.execute()
}

task sourceJar (type : Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource + project(':core').sourceSets.shared.allSource + project(':sql').sourceSets.shared.allSource
    manifest {
        attributes("Implementation-Title": "Crate.IO Java Client")
    }
}

task buildSourceJar (dependsOn: [':core:getVersion'] ) << {
    ext.version = project(':core').getVersion.version
    project.version = ext.version
    tasks.sourceJar.execute()
}

artifacts {
    archives shadowJar
    archives javadocJar
    archives sourceJar
}

task signJars (type : Sign, dependsOn: [buildJar, buildJavadocJar, buildSourceJar]) {
    sign configurations.archives
}


install.dependsOn([buildJar, buildJavadocJar, buildSourceJar])
install {
    repositories {
        mavenInstaller {
            pom.whenConfigured {
                pom -> pom.dependencies.clear()
            }
        }
    }
}

project.ext.bintrayUsername = project.hasProperty('bintrayUsername') ? bintrayUsername : ""
project.ext.bintrayPassword = project.hasProperty('bintrayPassword') ? bintrayPassword : ""

uploadArchives.dependsOn([':core:compileSharedJava', ':sql:compileSharedJava', buildJavadocJar, buildSourceJar, buildJar, signJars])
uploadArchives {
    repositories{
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
                if (project.ext.bintrayUsername.length() == 0 || project.ext.bintrayPassword.length() == 0) {
                    throw new StopExecutionException("uploadArchives cannot be called without bintray username and password")
                }
            }
            pom.whenConfigured {
                pom -> pom.dependencies.clear()
            }
            pom.project {
                artifactId 'crate-client'
                name 'crate-client'
                description 'Crate.IO Java Client'
                url 'https://crate.io'
                scm {
                    url 'https://github.com/crate/crate'
                    connection 'scm:git:git://github.com/crate/crate.git'
                    developerConnection 'scm:git:ssh:git@github.com:crate/crate.git'
                }
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/license/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id 'crate'
                        name 'Crate Developers'
                        email 'office@crate.io'
                    }
                }
            }
            repository(id: 'crate-client', url: 'https://api.bintray.com/maven/crate/crate/crate-client') {
                authentication(userName: project.ext.bintrayUsername, password: project.ext.bintrayPassword)
            }
        }
    }
}
