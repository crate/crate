plugins {
    id 'java'
    id 'maven'
    id 'signing'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}

repositories {
    jcenter()
}

archivesBaseName = "crate-client"

evaluationDependsOn(':app')


def coreIncludes = ['io/crate/Streamer*',
                    "io/crate/TimestampFormat*",
                    "io/crate/core/collections/MapComparator*",
                    "io/crate/core/collections/ForEach*",
                    "io/crate/core/StringUtils*",
                    "io/crate/geo/GeoJSONUtils*",
                    "io/crate/types/**"]

def sqlIncludes = ["io/crate/action/sql/SQL*"]

task depClasses(type: Copy, dependsOn: [':core:compileJava', ':sql:compileJava']) {
    duplicatesStrategy 'fail'
    from(project(':core').sourceSets.main.output) {
        include coreIncludes
    }
    from(project(':sql').sourceSets.main.output) {
        include sqlIncludes
    }
    into file('build/deps/')
}

dependencies {
    compile(project(':es')) {
        exclude group: 'org.apache.lucene'
        exclude group: 'org.codehaus.groovy'
        exclude group: 'com.github.spullara.mustache.java'
        exclude group: 'org.antlr'
        exclude group: 'net.java.dev.jna'
        exclude group: 'com.tdunning'
        exclude group: 'commons-cli'
        exclude group: 'org.slf4j'
    }
    // required by ES and Lucene Version classes - keep up to date with es dependencies
    // The version module is required by the DiscoveryNode module
    compile 'org.apache.lucene:lucene-core:5.5.0'
    compile 'org.apache.lucene:lucene-analyzers-common:5.5.0'
    compile 'org.apache.lucene:lucene-suggest:5.5.0'

    compile files(depClasses)
    testCompile 'io.crate:crate-testing:0.4.1'
    testCompile 'org.hamcrest:hamcrest-all:1.3'

}

compileTestJava {
    dependsOn ':app:distTar'
}

test {
    systemProperty 'project_root', rootProject.projectDir
    systemProperty 'project_build_dir', rootProject.buildDir
    dependsOn ':app:distTar'
    testLogging.exceptionFormat = 'full'
    jacoco {
        excludes = [ "*Test*" ]
    }
}

shadowJar {

    baseName 'crate-client'
    classifier ''
    duplicatesStrategy 'fail'

    exclude 'org/hyperic/**' // exclude sigar stuff

    // exclude all but META-INF/services
    // if the client is used with assertions enabled it will try to load the 
    // Lucene PostingFormats and without the service files those can't be found
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/maven/**'
    exclude 'META-INF/license/**'
    exclude 'META-INF/LICENSE*'
    exclude 'META-INF/NOTICE*'
    mergeServiceFiles()


    // remember to update mapping in CrateClientClassLoader when changing this
    relocate 'org.elasticsearch', 'io.crate.shade.org.elasticsearch'
    relocate 'org.apache.lucene', 'io.crate.shade.org.apache.lucene'
    relocate 'org.joda', 'io.crate.shade.org.joda'
    relocate 'org.tartarus.snowball', 'io.crate.shade.org.tartarus.snowball'
    relocate 'com.carrotsearch.hppc', 'io.crate.shade.com.carrotsearch.hppc'
    relocate 'com.fasterxml.jackson', 'io.crate.shade.com.fasterxml.jackson'
    relocate 'com.google', 'io.crate.shade.com.google'
    relocate 'com.ning.compress', 'io.crate.shade.com.ning.compress'
    relocate 'org.jboss.netty', 'io.crate.shade.org.jboss.netty'
    relocate 'org.apache.commons', 'io.crate.shade.org.apache.commons'
    relocate 'jsr166e', 'io.crate.shade.jsr166e'
    relocate 'com.spatial4j', 'io.crate.shade.com.spatial4j'
    relocate 'com.vividsolutions', 'io.crate.shade.com.vividsolutions'

    doLast {
        manifest {
            attributes("Implementation-Title": "Crate.IO Java Client")
            version project.version
        }
    }
}


task buildJar(dependsOn: [':core:getVersion', 'classes']) {
    doLast {
        ext.version = project(':core').getVersion.version
        project.version = ext.version
        tasks.shadowJar.execute()
    }
}
tasks.buildJar.mustRunAfter jar // otherwise jar task would override shadowJar artifact

task sourceJar (type : Jar) {
    classifier = 'sources'
    from sourceSets.main.java
    manifest {
        attributes("Implementation-Title": "Crate.IO Java Client")
    }
}

task myJavadocs(type: Javadoc, dependsOn: processResources) {
    classpath = configurations.compile
    source = sourceSets.main.java //compileJava.source
}
task javadocJar (type: Jar, dependsOn: [myJavadocs]) {
    classifier = 'javadoc'
    from myJavadocs.destinationDir
    manifest {
        attributes("Implementation-Title": "Crate.IO Java Client")
    }
}

task buildJavadocJar (dependsOn: [':core:getVersion', myJavadocs] ) << {
    ext.version = project(':core').getVersion.version
    project.version = ext.version
    tasks.javadocJar.execute()
}


task buildSourceJar (dependsOn: [':core:getVersion'] ) << {
    ext.version = project(':core').getVersion.version
    project.version = ext.version
    tasks.sourceJar.execute()
}

artifacts {
    archives shadowJar
    archives javadocJar
    archives sourceJar
}

task signJars (type : Sign, dependsOn: [buildJar, buildJavadocJar, buildSourceJar]) {
    sign configurations.archives
}


install.dependsOn([buildJar, buildJavadocJar, buildSourceJar])
install {
    repositories {
        mavenInstaller {
            pom.whenConfigured {
                pom -> pom.dependencies.clear()
            }
        }
    }
}

project.ext.bintrayUsername = project.hasProperty('bintrayUsername') ? bintrayUsername : ""
project.ext.bintrayPassword = project.hasProperty('bintrayPassword') ? bintrayPassword : ""

uploadArchives.dependsOn([install, signJars])
uploadArchives {
    repositories{
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
                if (project.ext.bintrayUsername.length() == 0 || project.ext.bintrayPassword.length() == 0) {
                    throw new StopExecutionException("uploadArchives cannot be called without bintray username and password")
                }
            }
            pom.whenConfigured {
                pom -> pom.dependencies.clear()
            }
            pom.project {
                artifactId 'crate-client'
                name 'crate-client'
                description 'Crate.IO Java Client'
                url 'https://crate.io'
                scm {
                    url 'https://github.com/crate/crate'
                    connection 'scm:git:git://github.com/crate/crate.git'
                    developerConnection 'scm:git:ssh:git@github.com:crate/crate.git'
                }
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/license/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id 'crate'
                        name 'Crate Developers'
                        email 'office@crate.io'
                    }
                }
            }
            repository(id: 'crate-client', url: 'https://api.bintray.com/maven/crate/crate/crate-client') {
                authentication(userName: project.ext.bintrayUsername, password: project.ext.bintrayPassword)
            }
        }
    }
}
