/*
 * Licensed to Crate.io GmbH ("Crate") under one or more contributor
 * license agreements.  See the NOTICE file distributed with this work for
 * additional information regarding copyright ownership.  Crate licenses
 * this file to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.  You may
 * obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * However, if you have executed another commercial license agreement
 * with Crate these terms will supersede the license and you may use the
 * software solely pursuant to the terms of the relevant commercial agreement.
 */

apply from: "$rootDir/gradle/javaModule.gradle"

archivesBaseName = 'crate-pgwire'

ext.antlr = [
    source : "src/main/antlr",
    output : "src/main/java/io/crate/protocols/postgres/antlr/v4",
    package: 'io.crate.protocols.postgres.antlr.v4'
]

configurations {
    antlr4
}

dependencies {
    antlr4 "org.antlr:antlr4:${versions.antlr}"

    implementation "org.antlr:antlr4-runtime:${versions.antlr}"
    implementation "com.carrotsearch:hppc:${versions.carrotsearch_hppc}"

    testImplementation "org.hamcrest:hamcrest:${versions.hamcrest}"
    testImplementation "org.junit.jupiter:junit-jupiter:${versions.junit5}"
    testImplementation "junit:junit:${versions.junit}"
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine") {
        because 'allows JUnit 3 and JUnit 4 tests to run'
    }
    testImplementation "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}"
}

task antlrOutputDir {
    doLast {
        mkdir(antlr.output)
    }
}

task generateGrammarSource(dependsOn: antlrOutputDir, type: JavaExec) {
    inputs.files(fileTree(antlr.source))
    outputs.dir file(antlr.output)

    def grammars = fileTree(antlr.source).include('**/*.g4')

    main = 'org.antlr.v4.Tool'
    classpath = configurations.antlr4
    args = [
        "-o", "${antlr.output}",
        "-visitor", "-no-listener",
        "-package", antlr.package,
        grammars.files
    ].flatten()
}

tasks.withType(JavaCompile) {
    it.dependsOn('generateGrammarSource')
}

clean {
    delete antlr.output
}
