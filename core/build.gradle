apply plugin: 'java'
apply plugin: 'maven'

archivesBaseName = 'crate-core'

configurations {
    all*.exclude group: 'org.elasticsearch'
    sharedCompile.extendsFrom compile
}

dependencies {
    compile project(':es')
    compile 'commons-codec:commons-codec:1.9'
    compile 'org.apache.xbean:xbean-finder:4.2'
    testCompile project(':testing')
}

test {

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'

    jacoco {
        excludes = [
                "*Test*"
                ]
    }

}

task getVersion (dependsOn: 'classes') << {
    def stdout = new ByteArrayOutputStream()
    javaexec {
        classpath = sourceSets.main.runtimeClasspath
        main = 'io.crate.Version'
        standardOutput = stdout
    }
    ext.gitTag = "git describe".execute().in.text.trim()
    ext.version = stdout.toString().trim().split(" ")[1].replace(',','').trim()

    if (gradle.taskGraph.hasTask(':app:release')) {
        assert gitTag == version, "Version mismatch gitTag: " + gitTag + " does not match crate version: " + version
    } else if (gradle.taskGraph.hasTask(':app:nightly')) {
        def date = new Date().format('yyyyMMddHHmm')
        def shortHash = "git rev-parse --short HEAD".execute().in.text.trim()
        ext.version = version.replace('-SNAPSHOT','') + "-" + date + "-" + shortHash
    } else if (!gradle.taskGraph.hasTask(':client:uploadArchives') && !gradle.taskGraph.hasTask(':app:uploadArchives')) {
        def shortHash = "git rev-parse --short HEAD".execute().in.text.trim()
        ext.version = version + "-" + shortHash
    }

    logger.quiet("gitTag: " + gitTag)
    logger.quiet("version: " + version)
}


sourceSets {
    test {
        resources {
            srcDir 'src/test/java'
        }
    }
    shared {
        java {
            srcDir "src/main/java/"
            include "io/crate/Streamer*"
            include "io/crate/TimestampFormat*"
            include "io/crate/core/collections/MapComparator*"
            include "io/crate/core/StringUtils*"
            include "io/crate/types/**"
        }
    }
}

task writeBuildInfo << {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'log', '-n', '1', '--pretty=format:%H'
        standardOutput stdout
    }
    def hash = stdout.toString().trim()

    def file = new File(project.projectDir.path + "/src/main/resources/crate-build.properties");
    if(!file.isFile()) {
        def parentDir = new File(file.parent);
        if (!parentDir.isDirectory()) {
            parentDir.mkdirs();
        }
        file.createNewFile();
    }

    ant.propertyfile(file:file.path, comment:'Build Properties') {
        ant.entry(key:'hash',value:hash)
        ant.entry(key:'timestamp', value:System.currentTimeMillis())
    }
}

tasks.withType(Jar) {
    doFirst {
        if (gradle.taskGraph.hasTask(':app:distTar')) {
            tasks.writeBuildInfo.execute()
        }
    }
}