===========
DEVELOPMENT
===========

Submodules
==========

Init/Update
-----------

In order to build the project the first time it is necessary to
initialize and update all submodules. Which is done via the
following command from within the crate repository::

 $ git submodule update --init

Build
=====

This project uses Gradle_ as build tool. It can be invoked by
executing ``./gradlew``. The first time this command is executed it is
bootstrapped automatically, therefore there is no need to install
gradle on the system.

In order to build the documentation and run integration tests a
Python_ executable needs to be in the $PATH. The documentation is
generated by Sphinx_. Also ``make`` needs to be installed since this
is required to generate the HTML-Documentation.

In order to do a version bump, set the version in ``build.gradle``
file.

Building a tarball and a zip is done by gradle with the command::

 $ ./gradlew dist

The resulting tarball and zip will reside in the folder
``./app/build/distributions``.

It is also possible to install the distribution locally by running::

 $ ./gradlew installDist

The root of the installation can then be found under
``./app/build/install/crate``. Start the server with::

 $ ./app/build/install/crate/bin/crate -f

IntelliJ
========

To use this project in intellij do not use the built-in JetGradle
Plugin. Instead use gradle directly by running::

 ./gradlew idea

This will create the project files.

Debugging
=========

To run the app locally for debugging use::

 ./gradlew runDebug

It will then listen for a remot debugger on port 5005.

Testing
=======

Unit tests can be run like this::

  $ ./gradlew test

Writing Documentation
=====================

The documentation is maintained under the ``docs`` directory and
written in ReStructuredText_ and processed with Sphinx_.

Normally the documentation is built upon the ``dist`` task. However if
you work on the documentation it might be faster to run sphinx
directly, which can be done by just running ``make`` in the ``docs``
directory. The output can then be found in the ``out/html`` and
``out/text`` directories.

The documentation is also tested when running the ``itest`` task or
running ``make test`` in the ``docs`` directory. Also the ``itest``
task is run as a dependency of the ``dist`` task.

.. _Python: http://www.python.org/

.. _Sphinx: http://sphinx-doc.org/

.. _ReStructuredText: http://docutils.sourceforge.net/rst.html

.. _Gradle: http://www.gradle.org/

