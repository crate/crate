==================
Unreleased Changes
==================

This file collects *unreleased* changes only.

For release notes, see:

  https://crate.io/docs/reference/en/latest/release_notes/index.html

For developers: changes should be recorded here (using RST syntax) as you are
developing CrateDB. When a new release is being cut, changes will be moved to
the appropriate section of the docs.

Breaking Changes
================

 - The default value of the setting ``auth.host_based.enabled`` (``false``) is
   overwritten with ``true`` in the ``crate.yml`` that is shipped with the
   tarball and Linux distributions of CrateDB and also contains a sane default
   configuration for ``auth.host_based.config``.
   This is done in order to provide a better default installation for new users
   without breaking exising HBA configurations.
   An implication of these settings is that whenever Enterprise is enabled
   (default behaviour) connections from remote hosts *always* require
   password authentication. Note, that when running CrateDB in Docker, the host
   of the Docker container is also considered a remote host.

 - Columns aren't implicitly cast to a type anymore. Whenever columns are
   compared to Literals (e.g. 'string', 1, 1.2), these literals will be
   converted to the column type but not vice-versa. The column can still be
   manually cast to a type by using a cast function.

 - Table ``information_schema.table_constraints`` is now returning
   ``constraint_name`` as type string instead of type array. Constraint type
   ``PRIMARY_KEY`` has been changed to ``PRIMARY KEY``. Also PRIMARY KEY
   constraint is not returned when not explicitly defined.

Changes
=======

- Added support for scalar subqueries in DELETE statements.

- Added new "password" authentication method which is available for connections
  via the Postgres Protocol. This method allowes clients to authenticate using
  a valid database user and its password.

- Added ``WITH`` clause to ``CREATE USER`` statement to specify user properties
  upon creation. The single property available right now is the ``password``
  property which can be used for "password" authentication. User passwords are
  never stored in clear-text inside CrateDB.

- The "address" field of the ``auth.host_based.config`` setting allows the
  special ``_local_`` identifier additionally to IP and CIDR notation.
  ``_local_`` matches both IPv4 and IPv6 connections from localhost.

- Clients using the postgres wire protocol will now receive an additional
  ``crate_version`` ``ParameterStatus`` message during the connection
  establishment. This can be used to identify the server as ``CrateDB``.

- Added support to manually retry the allocation of shards that failed to
  allocate using ``ALTER CLUSTER REROUTE RETRY FAILED``.

- Hadoop2 dependencies for HDFS repository plugin has been upgraded to 2.8.1.

- Added new cluster setting ``routing.rebalance.enable`` that allows to
  enable or disable shard rebalancing on the cluster.

- Table ``information_schema.key_column_usage`` now gets populated with primary
  key information of user tables.

- Table ``information_schema.table_constraints`` is now returning ``NOT_NULL``

- Fixed an issue that caused an error ``Primary key value must not be NULL``
  to be thrown when trying to insert rows in a table that has a generated
  column which is used both in ``PARTITION_BY`` and ``PRIMARY KEY``.

- Added support to manually control the allocation of shards using
  ``ALTER TABLE REROUTE``.
  Supported reroute-options: MOVE, ALLOCATE REPLICA, CANCEL

- Added new system table ``sys.allocations`` which lists shards and their
  allocation state including the reasoning why they are in a certain state.

- Upgraded Elasticsearch to v5.6.3

- Added new table setting ``allocation.max_retries`` that defines the number of
  attempts to allocate a shard before giving up and leaving it unallocated.

- Function arguments are now linked to each other, where possible. This enables
  type inference between arguments such that arguments can be converted to match
  a function's signature. For example, ``coalesce(integer, long)`` would have
  resulted in an "unknown function" message. We now convert this call into
  ``coalesce(long, long)``. The conversion is possible through a type precedence
  list and convertibility checks on the data types.

- Functions which accept regular expression flags now throw an error when
  invalid flags are provided.

- Added the ``pg_backend_pid()`` function for enhanced PostgreSQL compatibility.

- Added support for the PSQL ParameterDescription message which allows to get
  the parameter types in prepared statements up front without specifying the
  actual arguments first. This fixes compatibility issues with some drivers.
  This works for the most common use cases except for DDL statements.

Fixes
=====

- Handle MultiPolygon shapes in ``WITHIN`` queries correctly instead of
  throwing an exception.

- Fixed an exception which occurred when using _id system column in IN or ANY
  queries.

- The target table name used in ``ALTER TABLE ... RENAME TO`` is now correctly
  validated.

- Fixed a regression that caused ``DELETE`` statements with a filter on
  ``PRIMARY KEY`` columns that don't match to fail instead of returning with a
  row count of 0.
