######################### Crate Configuration Example #########################

# The default configuration offers the ability to use Crate right away.
# The purpose of this file is to give operators an overview of the various
# different configuration settings. To read the full documentation go to
# <https://docs.crate.io/>

# As mentioned before, you can use Crate right away. For fine-tuning consider
# to configure Crate as you need or want it to behave.
# Use this file to fine-tune your Crate cluster. If you have any questions
# you are very welcome to conact us on our IRC channel #crate
# (irc.freenode.net).

# Any element in the configuration can be replaced with environment variables
# by placing them in ${...} notation. For example:
#
# node.rack: ${RACK_ENV_VAR}


################################### Cluster ###################################

# Cluster name identifies your cluster for auto-discovery. If you're running
# multiple clusters on the same network, make sure you're using unique names.
#
# cluster.name: crate

# The graceful_stop namespace defines settings for a graceful stop
# procedure of nodes within the cluster.
#
# The minimum data availability the cluster needs to ensure when a certain node
# is shut down. By default the cluster ensures availability of primary shards
# but not replicas. Other options are "all" and "none".
#
# cluster.graceful_stop.min_availability: primaries
#
# The cluster may reallocate shards to ensure minimum data availabillity before
# a certain node shuts down.
#
# cluster.graceful_stop.reallocate: true
#
# The time to wait for the reallocation process to be finished.
#
# cluster.graceful_stop.timeout: 2h
#
# The force setting allows you to force a shutdown of a node when the graceful
# shutdown process runs into the cluster.graceful_stop.timeout.
#
# cluster.graceful_stop.force: false
#
# By default the regular stop procedure does not consider the graceful_stop
# settings, but only sending the USR2 signal to the process does.
#
# cluster.graceful_stop.is_default: false
#
# You may want to set the is_default to true if you need to run the graceful
# stop process whenever you stop a node regularly.
# cluster.graceful_stop.is_default: true

# In most cases you want to allow all kinds of shards allocations.
# cluster.routing.allocation.enable = all
#
# However, you can limit shard allocations to certain kinds of shards,
# for example if you perform a rolling cluster upgrade.
# cluster.routing.allocation.enable = new_primaries

#################################### Node #####################################

# Node names are generated dynamically on startup, so you're relieved
# from configuring them manually. You can tie this node to a specific name:
#
# node.name: "Franz Kafka"

# Every node can be configured to allow or deny being eligible as the master,
# and to allow or deny to store the data.
#
# Allow this node to be eligible as a master node (enabled by default):
#
# node.master: true
#
# Allow this node to store data (enabled by default):
#
# node.data: true

# You can exploit these settings to design advanced cluster topologies.
#
# 1. You want this node to never become a master node, only to hold data.
#    This will be the "workhorse" of your cluster.
#
# node.master: false
# node.data: true
#
# 2. You want this node to only serve as a master: to not store any data and
#    to have free resources. This will be the "coordinator" of your cluster.
#
# node.master: true
# node.data: false
#
# 3. You want this node to be neither master nor data node, but
#    to act as a "search load balancer" (fetching data from nodes,
#    aggregating results, etc.)
#
# node.master: false
# node.data: false

# Inspect the cluster state via GUI tools
# such as Crate Admin [http://localhost:4200/admin/].

# A node can have generic attributes associated with it, which can later be
# used for customized shard allocation filtering, or allocation awareness.
# An attribute is a simple key value pair, similar to node.key: value, here is
# an example:
#
# node.rack: rack314

# By default, multiple nodes are allowed to start from the same installation
# location to disable it, set the following:
# node.max_local_storage_nodes: 1


#################################### Table ####################################

# You can set a number of options (such as shard/replica options, mapping
# or analyzer definitions, translog settings, ...) for tables globally,
# in this file.
#
# Note, that it makes more sense to configure table settings specifically for
# a certain table when creating it.

# Set the number of shards (splits) of a table (5 by default):
#
# index.number_of_shards: 5

# Set the number of replicas (additional copies) of a table (1 by default):
#
# index.number_of_replicas: 1

# Note, that for development on a local machine, with small tables, it usually
# makes sense to "disable" the distributed features:
#
# index.number_of_shards: 1
# index.number_of_replicas: 0

# These settings directly affect the performance of table and search operations
# in your cluster. Assuming you have enough machines to hold shards and
# replicas, the rule of thumb is:
#
# 1. Having more *shards* enhances the _indexing_ performance and allows to
#    _distribute_ a big table across machines.
# 2. Having more *replicas* enhances the _search_ performance and improves the
#    cluster _availability_.
#
# The "number_of_shards" is a one-time setting for a table.
#
# Crate takes care about load balancing, relocating, gathering the
# results from nodes, etc. Experiment with different settings to fine-tune
# your setup.

# Use the Table Status API (<http://localhost:4200/A/_status>) to inspect
# the table status.


#################################### Paths ####################################

# Path to directory containing configuration (this file and logging.yml):
#
# path.conf: /path/to/conf

# Path to directory where to store table data allocated for this node.
#
# path.data: /path/to/data
#
# Can optionally include more than one location, causing data to be striped across
# the locations (a la RAID 0) on a file level, favouring locations with most free
# space on creation. For example:
#
# path.data: /path/to/data1,/path/to/data2

# Path to temporary files:
#
# path.work: /path/to/work

# Path to log files:
#
# path.logs: /path/to/logs

# Path to where plugins are installed:
#
# path.plugins: /path/to/plugins

# path:
#     logs: /var/log/crate
#     data: /var/lib/crate

#################################### Plugin ###################################

# If a plugin listed here is not installed for current node, the node will not start.
#
# plugin.mandatory: mapper-attachments,lang-groovy


################################### Memory ####################################

# Crate performs poorly when JVM starts swapping: you should ensure that
# it _never_ swaps.
#
# Set this property to true to lock the memory:
#
# bootstrap.mlockall: true

# Make sure that the machine has enough memory to allocate for Crate, leaving
# enough memory for the operating system itself.
# You can allocate memory for Crate as follows:
#  - Set CRATE_MIN_MEM and CRATE_MAX_MEM environment variables
#    (We recommend to set MIN and MAX to the same value).
#  - Set CRATE_HEAP_SIZE environment varaible. This sets MIN and MAX to the
#    same value for you.
#
# You should also make sure that the Crate process is allowed to lock
# the memory, eg. by using `ulimit -l unlimited`.


############################## Network And HTTP ###############################

# Crate, by default, binds itself to the 0.0.0.0 address, and listens
# on port [4200-4300] for HTTP traffic and on port [4300-4400] for node-to-node
# communication. (the range means that if the port is busy, it will automatically
# try the next port).

# Set the bind address specifically (IPv4 or IPv6):
#
# network.bind_host: 192.168.0.1

# Set the address other nodes will use to communicate with this node. If not
# set, it is automatically derived. It must point to an actual IP address.
#
# network.publish_host: 192.168.0.1

# Set both 'bind_host' and 'publish_host':
#
# network.host: 192.168.0.1

# Set a custom port for the node to node communication (4300 by default):
#
# transport.tcp.port: 4300

# Enable compression for all communication between nodes (disabled by default):
#
# transport.tcp.compress: true

# Set a custom port to listen for HTTP traffic:
#
# http.port: 4200

# Set a custom allowed content length:
#
# http.max_content_length: 100mb

# Disable HTTP completely:
#
# http.enabled: false


############################# Recovery Throttling #############################

# These settings allow to control the process of shards allocation between
# nodes during initial recovery, replica allocation, rebalancing,
# or when adding and removing nodes.

# Set the number of concurrent recoveries happening on a node:
#
# 1. During the initial recovery
#
# cluster.routing.allocation.node_initial_primaries_recoveries: 4
#
# 2. During adding/removing nodes, rebalancing, etc
#
# cluster.routing.allocation.node_concurrent_recoveries: 2

# Set to throttle throughput when recovering (eg. 100mb, by default unlimited):
#
# indices.recovery.max_size_per_sec: 20mb

# Set to limit the number of open concurrent streams when
# recovering a shard from a peer:
#
# indices.recovery.concurrent_streams: 5

# Specifies the chunk size used to copy the shard data from the
# source shard.
#
# indices.recovery.file_chunk_size: 512kb

# Specifies how many transaction log lines should be transfered
# between shards in a single request during the recovery process.
# Ignored if indices.recovery.translog_size is reached first.
#
# indices.recovery.translog_ops: 1000

# Specifies how much data of the transaction log should be
# transfered between shards in a single request during the recovery
# process.
#
# indices.recovery.translog_size: 512kb

# Define if transferred data should be compressed during the
# recovery process.
#
# indices.recovery.compress: true

# Specifies the maximum number of bytes that can be transferred
# during shard recovery per seconds. Limiting
# can be disabled by setting it to `0`. Higher values
# may result in higher network utilization, but also faster recovery process.
#
# indices.recovery.max_bytes_per_sec: 20mb

############################ Store Level Throttling ###########################

# Allows to throttle `merge` (or `all`) process of the store
# module. Options are: `all | merge | none`
#
# indices.store.throttle.type: merge

# If throttling is enabled by indices.store.throttle.type, this
# setting specifies the maximum bytes per second a store module
# process can operate with.
#
# indices.store.throttle.max_bytes_per_sec: 20mb


################################## Discovery ##################################

# Discovery infrastructure ensures nodes can be found within a cluster
# and master node is elected. Multicast discovery is the default.

# Set to ensure a node sees M other master eligible nodes to be considered
# operational within the cluster. Its recommended to set it to a higher value
# than 1 when running more than 2 nodes in the cluster.
#
# We highly recommend to set the minimum master nodes as follows:
#   minimum_master_nodes: (N / 2) + 1 where N is the cluster size
# That will ensure a full recovery of the cluster state.
#
# discovery.zen.minimum_master_nodes: 1

# Set the time to wait for ping responses from other nodes when discovering.
# Set this option to a higher value on a slow or congested network
# to minimize discovery failures:
#
# discovery.zen.ping.timeout: 3s
#

# Time a node is waiting for responses from other nodes to a published
# cluster state.
#
# discovery.zen.publish_timeout: 30s

# Unicast discovery allows to explicitly control which nodes will be used
# to discover the cluster. It can be used when multicast is not present,
# or to restrict the cluster communication-wise.
# For example, Amazon Web Services doesn't support multicast discovery.
# Therefore, you need to specify the instances you want to connect to a
# cluster as described in the following steps:
#
# 1. Disable multicast discovery (enabled by default):
#
# discovery.zen.ping.multicast.enabled: false
#
# 2. Configure an initial list of master nodes in the cluster
#    to perform discovery when new nodes (master or data) are started:
#
# If you want to debug the discovery process, you can set a logger in
# 'config/logging.yml' to help you doing so.
#
# discovery.zen.ping.unicast.hosts: ["host1", "host2:port"]

# Ping configuration
#
# discovery.zen.fd.ping_timeout: 30s
# discovery.zen.fd.ping_retries: 3
# discovery.zen.fd.ping_interval: 1s
#
############################# Routing Allocation #############################

# Allows to control shard allocation.
# Options are: `all | new_primaries`
#
# `all` allows all shard allocations, the cluster can allocate all kinds of
# shards.
#
# `new_primaries` allows allocations for new primary shards only. This means
# that for example a newly added node will not allocate any replicas. However
# it is still possible to allocate new primary shards for new indices.
# Whenever you want to perform a zero downtime upgrade of your cluster
# you need to set this value before gracefully stopping the first
# node and reset it to `all` after starting the last updated node.
#
# cluster.routing.allocation.enable: all

# Allow to control when rebalancing will happen based on the total
# state of all the indices shards in the cluster. Defaulting to
# `indices_all_active` to reduce chatter during initial recovery.
# Options are: `always | indices_primary_active | indices_all_active`
#
# cluster.routing.allocation.allow_rebalance: indices_all_active

# Define how many concurrent rebalancing tasks are allowed cluster
# wide.
#
# cluster.routing.allocation.cluster_concurrent_rebalance: 2

# Define the number of initial recoveries of primaries that are
# allowed per node. Since most times local gateway is used, those
# should be fast and we can handle more of those per node without
# creating load.
#
# cluster.routing.allocation.node_initial_primaries_recoveries: 4

# How many concurrent recoveries are allowed to happen on a node.
#
# cluster.routing.allocation.node_concurrent_recoveries: 2

################################## Awareness #################################

# Cluster allocation awareness allows to configure shard and replicas
# allocation across generic attributes associated with nodes.

# Define node attributes which will be used to do awareness based
# on the allocation of a shard and its replicas.
# Shards will relocate to even the number of shards across
# the nodes, but a shard and its replica will not be allocated in
# the same rack_id value.
# The awareness attributes can hold several values
#
# cluster.routing.allocation.awareness.attributes:

# Node attributes on which shard allocation will be forced.
# If you know in advance the number of values an awareness attribute
# can have and you would like to never have more replicas then
# needed allocated on a specific group of nodes with the same awareness
# attribute value. For that, we can force awareness on specific attributes.
#
# cluster.routing.allocation.awareness.force.zone.values:


############################### Balanced Shards ##############################

# Defines the weight factor for shards allocated on a node
# (float).
#
# cluster.routing.allocation.balance.shard: 0.45f

# Defines a factor to the number of shards per index allocated on a
# specific node (float).
#
# cluster.routing.allocation.balance.index: 0.5f

# Defines a weight factor for the number of primaries of a specific
# index allocated on a node (float).
#
# cluster.routing.allocation.balance.primary: 0.05f

# Minimal optimization value of operations that should be performed
# (non negative float).
#
# cluster.routing.allocation.balance.threshold: 1.0f


########################## Disk-based Shard Allocation #######################

# Prevent shard allocation on nodes depending on the disk
# usage.
#
# cluster.routing.allocation.disk.threshold_enabled: true

# Defines the lower disk threshold limit for shard allocations.
# New shards will not be allocated on nodes with
# disk usage greater than this value. It can also be set to an
# absolute bytes value (like e.g. `500mb`)
#
# cluster.routing.allocation.disk.watermark.low: 85%

# Defines the higher disk threshold limit for shard allocations.
# The cluster will attempt to relocate existing
# shards to another node if the disk usage on a node rises above this
# value. It can also be set to an absolute bytes value (like e.g. `500mb`)
#
# cluster.routing.allocation.disk.watermark.high: 90%


########################## Field Data Circuit Breaker #########################

# The field data circuit breaker allows estimation of needed memory
# required for loading field data into memory.

# Specifies the limit for the fielddata breaker.
#
# indices.fielddata.breaker.limit: 60%

# A constant that all field data estimations are multiplied with to
# determine a final estimation.
#
# indices.fielddata.breaker.overhead: 1.0.3


################################## Metadata ##################################

# Defines how often the cluster collection metadata information
# (e.g. disk usages etc.) if no concrete  event is triggered.
#
# cluster.info.update.interval: 30s


################################## Slow Log ##################################

# Shard level query and fetch threshold logging.

#index.search.slowlog.threshold.query.warn: 10s
#index.search.slowlog.threshold.query.info: 5s
#index.search.slowlog.threshold.query.debug: 2s
#index.search.slowlog.threshold.query.trace: 500ms

#index.search.slowlog.threshold.fetch.warn: 1s
#index.search.slowlog.threshold.fetch.info: 800ms
#index.search.slowlog.threshold.fetch.debug: 500ms
#index.search.slowlog.threshold.fetch.trace: 200ms

#index.indexing.slowlog.threshold.index.warn: 10s
#index.indexing.slowlog.threshold.index.info: 5s
#index.indexing.slowlog.threshold.index.debug: 2s
#index.indexing.slowlog.threshold.index.trace: 500ms

################################## GC Logging ################################

#monitor.jvm.gc.ParNew.warn: 1000ms
#monitor.jvm.gc.ParNew.info: 700ms
#monitor.jvm.gc.ParNew.debug: 400ms

#monitor.jvm.gc.ConcurrentMarkSweep.warn: 10s
#monitor.jvm.gc.ConcurrentMarkSweep.info: 5s
#monitor.jvm.gc.ConcurrentMarkSweep.debug: 2s


###################################### SQL ####################################

# If disabled, queries filtering for a primary key will be broadcast to all available shards
# instead of hitting just the related single shard.
#
#crate.planner.optimize_pk_queries: true


# An insert from subquery can take an enormous amount of time and ressources of
# your cluster. To execute such queries more failsafe even with slower hardware
# increase this timeout
#insert_by_query.request_timeout: 1m

################################### UDC ###################################

# Usage Data Collection
#
# If enabled crate will send usage data to the url stored in setting udc.url.
# The sent usage data does not contain any confidential information.

# enable/disable usage data collection at all
#udc.enabled: true

# The delay for first ping after start-up.
#udc.initial_delay: 10m

# The interval a ping is sent.
#udc.interval: 24h

# The url the ping is sent to.
#udc.url: https://udc.crate.io/


############################ ELASTICSEARCH HTTP REST API ############################

# by default the elasticsearch HTTP REST API is disabled

# WARNING: if you index data via elasticsearch and not
# insert it via SQL you might get inconsistent data when querying

# enable/disable elasticsearch HTTP REST API
# es.api.enabled: false

###################################### Blob ####################################

# Path to directory where to store blob data allocated for this node.
# By default blobs will be stored under the same path as normal data.
# A relative path value is relative to CRATE_HOME.
#
# blobs.path: /path/to/blobs
