#!/usr/bin/env bash
set -o errexit -o pipefail

# Licensed to Crate.io GmbH ("Crate") under one or more contributor
# license agreements.  See the NOTICE file distributed with this work for
# additional information regarding copyright ownership.  Crate licenses
# this file to you under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.  You may
# obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.
#
# However, if you have executed another commercial license agreement
# with Crate these terms will supersede the license and you may use the
# software solely pursuant to the terms of the relevant commercial agreement.


# OPTIONS:
#   -v, --verbose   : print crate version to stdout
#   -h, --help      : print usage information
#   -D              : set a java system property value
#   -C              : set a Crate property value
#   -X              : set a nonstandard java option

# CONTROLLING STARTUP:
#
# This script relies on few environment variables to determine startup
# behavior, those variables are:
#
#   CRATE_JAVA_OPTS -- External Java Opts on top of the defaults set
#
# Optionally, exact memory values can be set using the following values, note,
# they can still be set using the `CRATE_JAVA_OPTS`. Sample format include "512m", and "10g".
#
#   CRATE_HEAP_SIZE -- Sets both the minimum and maximum memory to allocate (recommended)
#


# Meta      ################################################################################################################


printVersion() {
    "$JAVA" -cp "$CRATE_CLASSPATH" org.elasticsearch.Version
    exit 0
}

printHelp() {
    cat <<-EOF

    	CrateDB is a shared nothing, fully searchable document oriented cluster datastore.

    	  Usage: crate [OPTION]...
    	         starts a new CrateDB instance

    	Options:
    	    -h | --help     print usage information
    	    -v | --version  print version information
    	    -C<option>      set a CrateDB setting
    	    -D<option>      set a java system property value
    	    -X<option>      set a nonstandard java option

	EOF
    exit 0
}


#   Bash flags
verbose='/dev/null'     #   echo test > $verbose        Discarded unless user types --verbose
quiet='/dev/stdout'     #   echo test > $quiet          Discarded if the user types --quiet
breakScript='0'         #   Set to 1 to end the script

declare -a JAVA_OPTS_ARRAY=()
declare -a CRATE_OPTS_ARRAY=()

for flag in "$@"; do
	case $flag in

#<      Bash
		--verbose)
			verbose=/dev/stdout
		;;

		--quiet)
			quiet=/dev/null
		;;

		-h|--help)
            printHelp
			exit 0
		;;

		-v|--version)
            :   #   Called at the end of the file, since the location of java
                #   is determined by body logic. Retained for error detection
		;;


#<      Java
        -D*)
            JAVA_OPTS_ARRAY+=("$flag")
            ;;

        -X*)
            JAVA_OPTS_ARRAY+=("$flag")
            ;;

        -C*)
            CRATE_OPTS_ARRAY+=("$flag")
            ;;

#<      Meta
        --)
            break
        ;;

        -*)
            echo "Unrecognized option: $flag"
            exit 1
        ;;
		
	esac
done


# Logic     ################################################################################################################


CDPATH=""
SCRIPT="$0"
declare JAVA_OPTS


# SCRIPT may be an arbitrarily deep series of symlinks. Loop until we have the concrete path.
while [ -h "$SCRIPT" ] ; do
  ls=$(ls -ld "$SCRIPT")
  # Drop everything prior to ->
  link=$(expr "$ls" : '.*-> \(.*\)$')
  if expr "$link" : '/.*' > /dev/null; then
    SCRIPT="$link"
  else
    SCRIPT=$(dirname "$SCRIPT")/"$link"
  fi
done

# determine crate home
CRATE_HOME=$(dirname "$SCRIPT")/..

# make CRATE_HOME absolute
CRATE_HOME=$(cd "$CRATE_HOME"; pwd)
echo "CRATE_HOME = $CRATE_HOME" > $verbose


#   Define CREATE_CLASSPATH as the library locations, fail if paths could not be determined
if [ -n "$CRATE_CLASSPATH" ]; then

    cat >&2 <<- EOF
		Error: Don't modify the classpath with CRATE_CLASSPATH.
		Add plugins and their dependencies into the plugins/ folder instead.
	EOF
    exit 1

else

    for libname in "$CRATE_HOME"/lib/*.jar; do
        if [ -n "$CRATE_CLASSPATH" ]; then
            CRATE_CLASSPATH="$CRATE_CLASSPATH:$libname"
        else
            CRATE_CLASSPATH="$libname"
    fi

    if [ -z "$CRATE_CLASSPATH" ]; then
        echo "ERROR: CRATE_CLASSPATH for library \"$libname\" is not defined or empty" >&2
        breakScript="1"
    fi

    done
    [[ $breakScript == '1' ]] && exit 1

    if [[ "$(uname)" == CYGWIN* ]]; then
        if [[ -z $(command -v cygpath) ]]; then
            echo "Cygwin detected but command 'cygpath' not found on the system, which is required to determine paths"
        fi

        CRATE_CLASSPATH=$(cygpath -p -w "$CRATE_CLASSPATH")
        CRATE_HOME=$(cygpath -p -w "$CRATE_HOME")

    fi

fi

                                                             
# java opts #################################################

JAVA="$CRATE_HOME/jdk/bin/java"
echo $JAVA > $verbose
for flag in "$@"; do case $flag in -v|--version) printVersion;; esac; done


# # Lucene uses native access and vector module
# JAVA_OPTS+="--enable-native-access=ALL-UNNAMED --add-modules jdk.incubator.vector "

# set to headless, just in case
JAVA_OPTS+="-Djava.awt.headless=true "

## GC configuration
JAVA_OPTS+="-XX:+UseG1GC -XX:G1ReservePercent=25 -XX:InitiatingHeapOccupancyPercent=30 "

# Disables explicit GC
JAVA_OPTS+="-XX:+DisableExplicitGC "

# Prevent denial of service attacks via SSL renegotiation
JAVA_OPTS+="-Djdk.tls.rejectClientInitiatedRenegotiation=true "

# Ensure UTF-8 encoding by default (e.g. filenames)
JAVA_OPTS+="-Dfile.encoding=UTF-8 "

# Use our provided JNA always versus the system one
JAVA_OPTS+="-Djna.nosys=true "

# log4j options
JAVA_OPTS+="-Dlog4j.shutdownHookEnabled=false -Dlog4j2.disable.jmx=true -Dlog4j.skipJansi=true "

# Disable netty recycler
JAVA_OPTS+="-Dio.netty.recycler.maxCapacityPerThread=0 "

# Dump heap on OOM
JAVA_OPTS+="-XX:+HeapDumpOnOutOfMemoryError "
[ -n "$CRATE_HEAP_DUMP_PATH" ] && JAVA_OPTS+="-XX:HeapDumpPath=$CRATE_HEAP_DUMP_PATH "

# min and max heap sizes should be set to the same value to avoid
# stop-the-world GC pauses during resize, and so that we can lock the
# heap in memory on startup to prevent any of it from being swapped
# out.
[ "$CRATE_MIN_MEM" = "" ] && CRATE_MIN_MEM=256m

if [ -n "$CRATE_HEAP_SIZE" ]; then      #   set min and max equal to size
    CRATE_MIN_MEM=$CRATE_HEAP_SIZE
    CRATE_MAX_MEM=$CRATE_HEAP_SIZE
fi
CRATE_MAX_MEM=$CRATE_MIN_MEM
echo "Crate heap size = $CRATE_HEAP_SIZE"   > $verbose
echo "Crate min size =$CRATE_MIN_MEM"       > $verbose
echo "Crate max size =$CRATE_MAX_MEM"       > $verbose

JAVA_OPTS+="-Xms${CRATE_MIN_MEM} "
[ -n "$CRATE_MAX_MEM" ] && JAVA_OPTS+="-Xmx${CRATE_MAX_MEM} "
[ -n "$CRATE_HEAP_NEWSIZE" ] && JAVA_OPTS+="-Xmn${CRATE_HEAP_NEWSIZE} "                     #   new generation
[ -n "$CRATE_DIRECT_SIZE" ] && JAVA_OPTS+="-XX:MaxDirectMemorySize=${CRATE_DIRECT_SIZE} "   #   max direct memory

# Force the JVM to use IPv4 stack
[ -n "$CRATE_USE_IPV4" ] && JAVA_OPTS+="-Djava.net.preferIPv4Stack=true"


# GC logging options
# Set CRATE_DISABLE_GC_LOGGING=1 to disable GC logging
if [ "$CRATE_DISABLE_GC_LOGGING" = "" ]; then
    # GC log directory needs to be set explicitly by packages
    # GC logging requires 16x64mb = 1g of free disk space
    GC_LOG_DIR=${CRATE_GC_LOG_DIR:-"$CRATE_HOME/logs"};
    GC_LOG_SIZE=${CRATE_GC_LOG_SIZE:-"64m"}
    GC_LOG_FILES=${CRATE_GC_LOG_FILES:-"16"}

    # Ensure that the directory for the log file exists: the JVM will not create it.
    if ! test -d "$GC_LOG_DIR" || ! test -x "$GC_LOG_DIR"; then

        cat >&2 <<-EOF
			ERROR: Garbage collection log directory '$GC_LOG_DIR' does not exist or is not accessible.
		EOF
    	exit 1

    fi
    LOGGC="$GC_LOG_DIR/gc.log"

    #   Fully redundant if java is vendored, retained here for reference only
    # if [ -x "$JAVA_HOME/bin/java" ]; then
    #     JAVA="$JAVA_HOME/bin/java"
    # else
    #     JAVA=java
    # fi

    # export JAVA
    JAVA_OPTS+="-Xlog:gc*,gc+age=trace,safepoint:file=\"${LOGGC}\":utctime,pid,tags:filecount=${GC_LOG_FILES},filesize=${GC_LOG_SIZE} "
fi


# Launch    #################################################


declare -a JVM_FLAGS=("${JAVA_OPTS_ARRAY[@]}")


main()
{

    #   Accumulate arguments and prepend -Cpath.home if not user specified
    [[ ! " ${CRATE_OPTS_ARRAY[*]} " =~ " -Cpath.home=" ]] && CRATE_OPTS_ARRAY=("-Cpath.home=$CRATE_HOME" "${CRATE_OPTS_ARRAY[@]}")
    local -a JVM_ARGS=("--enable-native-access=ALL-UNNAMED" "--add-modules" "jdk.incubator.vector" $JAVA_OPTS)  #   <<  unquoted strings trim spaces, resulting in separate arguments being passed

    #   Run the final command
    exec "$JAVA" "${JVM_ARGS[@]}" "${JAVA_OPTS_ARRAY[@]}" $CRATE_JAVA_OPTS -cp "$CRATE_CLASSPATH" io.crate.bootstrap.CrateDB "${CRATE_OPTS_ARRAY[@]}"

    return $?
    echo test
}

echo -e "\nOptions = $JAVA_OPTS\n" > $verbose
main
exit $?
