/*
 * Licensed to Crate.io GmbH ("Crate") under one or more contributor
 * license agreements.  See the NOTICE file distributed with this work for
 * additional information regarding copyright ownership.  Crate licenses
 * this file to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.  You may
 * obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * However, if you have executed another commercial license agreement
 * with Crate these terms will supersede the license and you may use the
 * software solely pursuant to the terms of the relevant commercial agreement.
 */

import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'distribution'
apply from: "$rootDir/gradle/javaModule.gradle"

archivesBaseName = 'crate-app'
group = "io.crate"


// Runtime dependencies, added into `/plugins`
// Make sure these have plugin-descriptor files so they are discovered and loaded
def plugins = [
    project(':extensions:functions'),
    project(':extensions:lang-js'),
    project(':extensions:jmx-monitoring'),
    project(':plugins:es-analysis-common'),
    project(':plugins:es-analysis-phonetic'),
    project(':plugins:es-repository-azure'),
    project(':plugins:cr8-copy-s3')
]


configurations {
    impl {
        transitive = true
    }
    compileClasspath.extendsFrom(impl)
    runtimeClasspath.extendsFrom(impl)
    testImplementation.extendsFrom(impl)
}

dependencies {
    impl project(':server')

    // `CrateNode` currently references these
    // We should eventually change that and make these plugin dependencies
    impl project(':plugins:dns-discovery')
    impl project(':plugins:es-discovery-ec2')
    impl project(':plugins:es-repository-url')
    impl project(':plugins:es-repository-s3')

    // We need to ensure that all graal languages are loaded with the root class-loader
    // that runs the CrateNode.
    // The graal Engine only looks for languages in the classloader in which the `Engine` itself
    // is being loaded. It cannot load languages that are loaded with a isolated plugin classloader
    impl "org.graalvm.js:js:${versions.graalvm}"
    impl "org.graalvm.sdk:graal-sdk:${versions.graalvm}"
    impl "org.graalvm.truffle:truffle-api:${versions.graalvm}"

    impl("org.apache.xbean:xbean-finder:${versions.xbeanfinder}") {
        exclude group: 'org.apache.xbean', module: 'xbean-asm-util'
    }
    impl "org.jetbrains:annotations:${versions.annotations}"

    plugins.each { pluginProject ->
        runtimeOnly pluginProject
    }

    testImplementation(testFixtures(project(':server')))
    testImplementation(testFixtures(project(':libs:dex')))
    testImplementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${versions.jackson}"
    testImplementation "junit:junit:${versions.junit}"
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine") {
        because 'allows JUnit 3 and JUnit 4 tests to run'
    }
}

task release(dependsOn: 'distTar') {
    doLast {
        logger.info("released version: " + project(':server').getVersion.version)
    }
}

task releaseZip(dependsOn: 'distZip') {
    doLast {
        logger.info("released version: " + project(':server').getVersion.version)
    }
}

task nightly(dependsOn: 'distTar') {
    doLast {
        logger.info("nightly version: " + project(':server').getVersion.version)
    }
}

task writeBuildInfo(dependsOn: [':server:getVersion']) {
    doLast {
        def hash = "git rev-parse HEAD".execute().in.text.trim()

        def file = new File(project.projectDir.path + "/src/main/resources/crate-build.properties")
        if (!file.isFile()) {
            def parentDir = new File(file.parent)
            if (!parentDir.isDirectory()) {
                parentDir.mkdirs()
            }
            file.createNewFile()
        }

        copy {
            into('src/main/dist/bin')
            from('src/bin') {
                filter(ReplaceTokens, tokens: [version: project(':server').getVersion.version])
            }
        }

        ant.propertyfile(file: file.path, comment: 'Build Properties') {
            ant.entry(key: 'hash', value: hash)
            ant.entry(key: 'timestamp', value: System.currentTimeMillis())
        }
    }
}

processResources.dependsOn('writeBuildInfo')

task dist {
    dependsOn ':blackbox:itest', distTar, distZip
}

ext {
    downloadDir = new File(buildDir, 'downloads')
}

def rootDir = project.parent.projectDir

// For releases choose the file under the release_notes structure
// and for all other builds choose CHANGES.txt which contains the unreleased changes
task chooseReleaseNotes(dependsOn: [':server:getVersion']) {
    doLast {
        def version = project(':server').getVersion.version
        def releaseNotesDir = "$rootDir/blackbox/docs/appendices/release-notes"
        def releaseNotesFile = version.replaceAll('-.*', '') + '.rst'
        def file = new File(releaseNotesDir + "/" + releaseNotesFile)
        if (file.exists()) {
            copy {
                from("$releaseNotesDir") {
                    include "$releaseNotesFile"
                }
                into project.buildDir.path + "/releaseNotes"
                rename releaseNotesFile, 'CHANGES.txt'
            }
        } else {
            throw new FileNotFoundException("Release notes file: " + file.getAbsolutePath() + " not found!")
        }
    }
}

tasks.withType(Tar) {
    dependsOn ':server:getVersion'
    dependsOn 'chooseReleaseNotes'
    dependsOn 'createCrateNodeScripts'
    compression = Compression.GZIP
    archiveExtension = 'tar.gz'
}

tasks.withType(Zip) {
    dependsOn ':server:getVersion'
    dependsOn 'chooseReleaseNotes'
    dependsOn 'createCrateNodeScripts'
}

installDist.dependsOn(chooseReleaseNotes)

def jdkCopySpec = copySpec {
    from project.jdks.runtime
    exclude "demo/**"
    eachFile { details ->
        if (details.name == 'src.zip') {
            details.exclude()
        }
        details.mode = 0755
    }
}

distributions {
    main {
        distributionBaseName = 'crate'
        contents {
            into("") {
                from("$rootDir") {
                    include 'LICENSE'
                    include 'NOTICE'
                    include 'README.rst'
                }
                from(project.buildDir.path + "/releaseNotes") {
                    include 'CHANGES.txt'
                }
                File.createTempDir().with {
                    def tmpLogs = new File(absolutePath, 'logs')
                    tmpLogs.mkdirs()
                    from(absolutePath) {
                        includeEmptyDirs = true
                    }
                }
            }
            into("bin") {
                from(project.buildDir.path + "/bin")
            }
            into("lib") {
                from jar
            }
            into("lib") {
                from configurations.impl
            }
            plugins.each { plugin ->
                into("plugins/$plugin.name") {
                    from(plugin.buildDir.path + '/libs')
                    from(plugin.buildDir.path + '/tmp/plugin-descriptor.properties')
                }
            }
            into('lib/site') {
                from('adminui/_site')
            }
            into('jdk') {
                with jdkCopySpec
            }
        }
    }
}

jar {
    dependsOn ':server:getVersion'

    doFirst {
        manifest.attributes 'Implementation-Version': project(':server').getVersion.version
        // Needed by ES which validates those manifest attributes in Build class
        manifest.attributes 'Build-Date': project(':server').getVersion.buildDate
        manifest.attributes 'Change': project(':server').getVersion.buildShortHash
        project.version = project(':server').getVersion.version
        def serviceDir = file("$buildDir/META-INF/services")
        serviceDir.deleteDir()
        serviceDir.mkdirs()
    }

    archiveFileName = 'crate-app.jar'

    // include service files from the buildDir
    from fileTree(buildDir).matching { include 'META-INF/services/*' }
}

task downloadPlugins(
    dependsOn: ['downloadAdminUI']) {
    doLast {
        copy {
            from("${buildDir}/crate-admin/")
            into 'adminui'
        }
    }
}

downloadPlugins.outputs.dir('plugins')


task downloadAdminUI {
    doLast {
        def dest
        if (gradle.taskGraph.hasTask(':app:nightly')) {
            dest = download(
                downloadDir,
                "https://cdn.crate.io/downloads/releases/nightly/crate-admin-latest.tar.gz",
                "crate-admin-latest.tar.gz"
            )
        } else {
            dest = download(
                downloadDir,
                "https://cdn.crate.io/downloads/releases/crate-admin-${versions.crate_admin_ui}.tar.gz",
                "crate-admin-${versions.crate_admin_ui}.tar.gz"
            )
        }
        extractTopfolder(dest, "${buildDir}/crate-admin/_site")
    }
}


processResources.dependsOn(downloadPlugins)

task(runDebug, dependsOn: 'classes', type: JavaExec) {
    mainClass = 'io.crate.bootstrap.CrateDB'
    debug = true
    enableAssertions = true
    classpath = sourceSets.main.runtimeClasspath
    args = ["-Cpath.home=${rootDir}/sandbox/crate"]
}

task(run, dependsOn: 'classes', type: JavaExec) {
    mainClass = 'io.crate.bootstrap.CrateDB'
    debug = false
    enableAssertions = true
    classpath = sourceSets.main.runtimeClasspath
    args = ["-Cpath.home=${rootDir}/sandbox/crate"]
}

task createCrateNodeScripts(type: CreateStartScripts) {
    outputDir = file('build/bin')
    mainClass = 'org.elasticsearch.cluster.coordination.NodeToolCli'
    applicationName = 'crate-node'
    classpath = sourceSets.main.runtimeClasspath + files('lib/crate-app.jar')


    // Helper functions for manipulating start script contents.
    ext.insertBefore = { String originalString, String needleString, String insertString ->
        StringBuilder builder = new StringBuilder(originalString);
        Integer position = builder.indexOf(needleString);
        builder.insert(position, insertString);
        return builder.toString();
    }

    ext.insertAfter = { String originalString, String needleString, String insertString ->
        StringBuilder builder = new StringBuilder(originalString);
        Integer position = builder.indexOf(needleString) + needleString.length();
        builder.insert(position, insertString);
        return builder.toString();
    }

    doLast {
        // Unix: Prevent using the system-wide Java installation & use the bundled Java runtime.
        unixScript.text = insertBefore(unixScript.text, '# Determine the Java command to use to start the JVM.',
            'unset JAVA_HOME\n' +
            'if \${darwin}; then\n' +
            '    JAVA_HOME="${APP_HOME}/jdk/Contents/Home"\n' +
            'else\n' +
            '    JAVA_HOME="${APP_HOME}/jdk"\n' +
            'fi\n\n');
        unixScript.text = unixScript.text.replace('which java', 'which ${JAVACMD}')

        // Unix: Use default path.home and path.conf variables
        unixScript.text = unixScript.text.replace('exec "$JAVACMD" "$@"',
            'test_substring() {\n' +
            '    case $1 in\n' +
            '        *$2*)\n' +
            '    return 1\n' +
            '    ;;\n' +
            '    *)\n' +
            '    return 0\n' +
            '    ;;\n' +
            '    esac\n' +
            '}\n\n' +
            'CMDARGS=${@}\n' +
            'if test -z ${4}; then\n' +
            '    :\n' +
            'else\n' +
            '    CMDARGS_NOSPACES=$(echo ${CMDARGS} | tr -d \' \')\n' +
            '    if test_substring ${CMDARGS_NOSPACES} "-Cpath.home="; then\n' +
            '        CMDARGS="${CMDARGS} -Cpath.home=${APP_HOME}"\n' +
            '    fi\n' +
            '    if test_substring ${CMDARGS_NOSPACES} "-Cpath.conf="; then\n' +
            '        CMDARGS="${CMDARGS} -Cpath.conf=${APP_HOME}/config"\n' +
            '    fi\n' +
            'fi\n\n' +
            'exec ${JAVACMD} ${CMDARGS}')

        // Windows: Prevent using the system-wide Java installation.
        windowsScript.text = insertBefore(windowsScript.text, 'if defined JAVA_HOME', 'set JAVA_HOME=\n')

        // Windows: Use the bundled Java runtime.
        windowsScript.text = windowsScript.text.replace('set JAVA_EXE=java.exe', 'set JAVA_EXE=%APP_HOME%/jdk/bin/java.exe')

        // Windows: Use default path.home and path.conf variables
        windowsScript.text = insertBefore(windowsScript.text, '@rem Execute crate-node',
            'set CMDARGS=%*\r\n' +
            'echo %CMDARGS%|find "-Cpath.home=" >nul\r\n' +
            'if errorlevel 1 (set CMDARGS=%CMDARGS% -Cpath.home=%APP_HOME%)\r\n' +
            'echo %CMDARGS%|find "-Cpath.conf=" >nul\r\n' +
            'if errorlevel 1 (set CMDARGS=%CMDARGS% -Cpath.conf=%APP_HOME%\\config)\r\n'+
            '\r\n')
        windowsScript.text = windowsScript.text.replace(
            '"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %CRATE_NODE_OPTS%  -classpath "%CLASSPATH%" org.elasticsearch.cluster.coordination.NodeToolCli %*',
            '"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %CRATE_NODE_OPTS%  -classpath "%CLASSPATH%" org.elasticsearch.cluster.coordination.NodeToolCli %CMDARGS%'
        )
    }
}

test {
    jacoco {
        excludes = ["*Test*"]
    }
}


clean.dependsOn(['cleanDownloadPlugins'])


def extractTopfolder(File src, String trg) {
    copy {
        includeEmptyDirs = false
        FileTree ft
        if (src.name.endsWith('.tar.gz')) {
            ft = tarTree(src)
        }
        from(ft) {
            eachFile {
                details -> details.path = details.path.substring(details.relativePath.segments[0].length())
            }
        }
        into trg
    }
}
