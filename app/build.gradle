import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'eu.appsatori:gradle-fatjar-plugin:0.3'
    }
}

apply plugin: 'distribution'
apply plugin: 'java'
apply plugin: 'eu.appsatori.fatjar'
apply plugin: 'signing'
apply plugin: 'maven'

archivesBaseName = 'crate-app'
group = "io.crate"


configurations {
    all*.exclude group: 'org.elasticsearch'
    compileNotTransitive {
        transitive = false
    }
}

evaluationDependsOn(':core')
evaluationDependsOn(':es')
evaluationDependsOn(':sql')
evaluationDependsOn(':sql-parser')
evaluationDependsOn(':blob')
evaluationDependsOn(':udc')
evaluationDependsOn(':dns-discovery')
evaluationDependsOn(':aws')

dependencies {
    compile project(':core')
    compile project(':es')
    compile project(':sql')
    compile project(':admin-ui')
    compile project(':blob')
    compile project(':udc')
    compile project(':dns-discovery')

    testCompile ('com.carrotsearch.randomizedtesting:randomizedtesting-runner:2.1.16') {
        exclude group: 'junit', module: 'junit'
    }
    testCompile 'junit:junit:4.11'


    compileNotTransitive project(':core')
    compileNotTransitive project(':es')
    compileNotTransitive project(':sql')
    compileNotTransitive project(':sql-parser')
    compileNotTransitive project(':admin-ui')
    compileNotTransitive project(':blob')
    compileNotTransitive project(':udc')
    compileNotTransitive project(':dns-discovery')
}

task release(dependsOn: 'distTar') << {
    logger.info("released version: " + project(':core').getVersion.version);
}

task nightly(dependsOn: 'distTar') << {
    logger.info("nightly version: " + project(':core').getVersion.version);
}


fatJar {
    dependsOn ':core:getVersion'
    doFirst {
        manifest.attributes 'Implementation-Version': project(':core').getVersion.version
    }
    manifest {
        attributes 'Main-Class': 'io.crate.bootstrap.CrateF',
        'Implementation-Title': 'Crate',
        'Built-Date': new Date(),
        'Built-JDK': System.getProperty('java.version'),
        'Built-Gradle': gradle.gradleVersion
    }
}


task writeBuildInfo (dependsOn: [':core:getVersion']) << {
    def hash = "git rev-parse HEAD".execute().in.text.trim()

    def file = new File(project.projectDir.path + "/src/main/resources/crate-build.properties");
    if(!file.isFile()) {
        def parentDir = new File(file.parent);
        if (!parentDir.isDirectory()) {
            parentDir.mkdirs();
        }
        file.createNewFile();
    }

    copy {
        into('src/main/dist/bin')
        from('src/bin') {
            filter(ReplaceTokens,tokens: [version: project(':core').getVersion.version])
        }
    }

    ant.propertyfile(file:file.path, comment:'Build Properties') {
        ant.entry(key:'hash',value:hash)
        ant.entry(key:'timestamp', value:System.currentTimeMillis())
    }
}


processResources.dependsOn writeBuildInfo

task dist {
    dependsOn ':docs:itest', distTar, distZip
}

task myJavadocs(type: Javadoc, dependsOn: processResources) {
    classpath = configurations.compile
    source = sourceSets.main.allJava +
            project(':core').sourceSets.main.allJava +
            project(':sql').sourceSets.main.allJava +
            project(':sql-parser').sourceSets.main.allJava +
            project(':blob').sourceSets.main.allJava +
            project(':udc').sourceSets.main.allJava
}

task javadocJar (type: Jar, dependsOn: [myJavadocs]) {
    classifier = 'javadoc'
    from myJavadocs.destinationDir
    manifest {
        attributes("Implementation-Title": "Crate.IO")
    }
}

task buildJavadocJar (dependsOn: [':core:getVersion', myJavadocs] ) << {
    ext.version = project(':core').getVersion.version
    project.version = ext.version
    tasks.javadocJar.execute()
}

task sourceJar (type : Jar) {
    classifier = 'sources'
    from (sourceSets.main.allSource +
            project(':core').sourceSets.main.allJava +
            project(':sql').sourceSets.main.allJava +
            project(':sql-parser').sourceSets.main.allJava +
            project(':blob').sourceSets.main.allJava +
            project(':udc').sourceSets.main.allJava)
    manifest {
        attributes("Implementation-Title": "Crate.IO")
    }
}

task buildSourceJar (dependsOn: [':core:getVersion'] ) << {
    ext.version = project(':core').getVersion.version
    project.version = ext.version
    tasks.sourceJar.execute()
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

task signJars (type : Sign, dependsOn: [jar, buildSourceJar, buildJavadocJar]) {
    sign configurations.archives
}

install.dependsOn([jar, ':core:getVersion', buildSourceJar, buildJavadocJar])
install {
    repositories {
        mavenInstaller {
            pom.whenConfigured {
                pom -> pom.dependencies.clear()
                project.parent.subprojects.findAll{ it.name != 'app' && it.name != 'aws' }.each {
                    if (it.hasProperty('install')) {
                        pom.dependencies.addAll(it.install.repositories.mavenInstaller.pom.getEffectivePom().dependencies.findAll { it.groupId != 'io.crate'})
                    }
                }
            }
            pom.project {
                artifactId 'crate'
                name 'crate'
                description 'Crate.IO'
                url 'https://crate.io'
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/license/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id 'crate'
                        name 'Crate Developers'
                        email 'office@crate.io'
                    }
                }
            }
        }
    }
}

project.ext.bintrayUsername = project.hasProperty('bintrayUsername') ? bintrayUsername : ""
project.ext.bintrayPassword = project.hasProperty('bintrayPassword') ? bintrayPassword : ""

uploadArchives.dependsOn([jar, ':core:getVersion', buildSourceJar, buildJavadocJar, signJars])
uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
                if (project.ext.bintrayUsername.length() == 0 || project.ext.bintrayPassword.length() == 0) {
                    throw new StopExecutionException("uploadArchives cannot be called without bintray username and password")
                }
            }
            pom.whenConfigured {
                pom -> pom.dependencies.clear()
                project.parent.subprojects.findAll{ it.name != 'app' && it.name != 'aws' && it.name != 'sigar' }.each {
                    if (it.hasProperty('install')) {
                        pom.dependencies.addAll(it.install.repositories.mavenInstaller.pom.getEffectivePom().dependencies.findAll { it.groupId != 'io.crate'})
                    }
                }
            }
            pom.project {
                artifactId 'crate'
                name 'crate'
                description 'Crate.IO'
                url 'https://crate.io'
                scm {
                    url 'https://github.com/crate/crate'
                    connection 'scm:git:git://github.com/crate/crate.git'
                    developerConnection 'scm:git:ssh:git@github.com:crate/crate.git'
                }
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/license/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id 'crate'
                        name 'Crate Developers'
                        email 'office@crate.io'
                    }
                }
            }
            pom {
                artifactId = 'crate'
            }
            repository(id: 'crate', url: 'https://api.bintray.com/maven/crate/crate/crate') {
                authentication(userName: project.ext.bintrayUsername, password: project.ext.bintrayPassword)
            }
        }
    }
}

distTar {
    dependsOn ':core:getVersion'
    compression = Compression.GZIP
    baseName = 'crate'
    extension = 'tar.gz'
    doFirst {
        version = project(':core').getVersion.version
    }
}

distZip {
    dependsOn ':core:getVersion'
    baseName = 'crate'
    doFirst {
        version = project(':core').getVersion.version
    }
}

ext {
    downloadDir = new File(buildDir, 'downloads')
    plugin_repository_hdfs_version = '2.1.1-1'
    crash_version = '0.15.0'
}

def rootDir = project.parent.projectDir

def libs = project.configurations.runtime + project(':aws').configurations.runtime

distributions {
    main {
        baseName = 'crate'
        contents {
            into("") {
                from "$rootDir"
                include 'LICENSE.txt'
                include 'NOTICE'
                include 'README.rst'
                include 'CHANGES.txt'
            }
            into("lib") {
                from libs
                exclude 'sigar-*.jar'
                exclude 'crate-*.jar'
                exclude 'es.jar'
            }
            into("lib") {
                from jar
            }
            into('plugins') {
                from ('plugins') {
                    includeEmptyDirs = true
                }
            }
            into('bin') {
                from ("${downloadDir}/crash_standalone") {
                    fileMode = 0755
                }
            }
        }
    }
}

jar {
    dependsOn ':core:getVersion'

    doFirst {
        manifest.attributes 'Implementation-Version': project(':core').getVersion.version
        project.version = project(':core').getVersion.version
        def serviceDir = file("$buildDir/META-INF/services")
        serviceDir.deleteDir()
        serviceDir.mkdirs()

        // copy all service files from deps to buildDir
        for(file in configurations.compileNotTransitive) {
            zipTree(file).matching{ include 'META-INF/services/*' }.each { f ->
                new File(serviceDir, f.name) << f.getText("UTF-8") << "\n"
            }
        }
    }

    from(configurations.compileNotTransitive.collect { it.isDirectory() ? it : zipTree(it) }){
        exclude 'META-INF/**' // Don't let Gradle merge service files
    }

    // include service files from the buildDir
    from fileTree(buildDir).matching{ include 'META-INF/services/*' }
}

task downloadPlugins (dependsOn: [':admin-ui:downloadPlugin']) << {
    def dest = download(
            downloadDir,
            "https://bintray.com/artifact/download/crate/crate/io/crate/crate-repository-hdfs/${plugin_repository_hdfs_version}/crate-repository-hdfs-${plugin_repository_hdfs_version}.jar",
            "crate-repository-hdfs-${plugin_repository_hdfs_version}.jar"
    )
    def hdfsLib = new File(project.projectDir, 'plugins/hdfs/lib')
    hdfsLib.mkdirs()
    copy {
        from dest
        into 'plugins/hdfs'
    }

    copy {
        from (project(':admin-ui').projectDir.path + '/build/crate-admin')
        into 'plugins/crate-admin'
    }

    // copy aws jar
    copy {
        from(project(':aws').tasks.jar.archivePath)
        into 'plugins/aws'
    }
    copy {
        from(project(':aws').projectDir.path + "/build/plugin-descriptor.properties")
        into 'plugins/aws'
    }

    // copy sigar jar
    copy {
        from(project(':sigar').tasks.jar.archivePath)
        into 'plugins/sigar'
    }
    copy {
        from(project(':sigar').projectDir.path + "/lib")
        into 'plugins/sigar/lib'
    }
}

downloadPlugins.outputs.dir files(
    "$projectDir/plugins/crate-admin",
    "$projectDir/plugins/hdfs",
    "$projectDir/plugins/aws",
    "$projectDir/plugins/sigar"
)
downloadPlugins.dependsOn(':aws:jar', ':sigar:jar')

task downloadCrash << {
    def dest = download(
        downloadDir,
        "https://cdn.crate.io/downloads/releases/crash_standalone_${crash_version}",
        "crash_standalone"
    )
}

processResources.dependsOn(downloadPlugins, downloadCrash)

task(runDebug, dependsOn: 'classes', type: JavaExec) {
    main = 'io.crate.bootstrap.CrateF'
    debug = true
    enableAssertions = true
    classpath = sourceSets.main.runtimeClasspath
    maxHeapSize = '512m'
}

task(run, dependsOn: 'classes', type: JavaExec) {
    main = 'io.crate.bootstrap.CrateF'
    debug = false
    enableAssertions = true
    classpath = sourceSets.main.runtimeClasspath
    maxHeapSize = '512m'
    systemProperties System.getProperties()
}

test {
    testLogging {
        exceptionFormat = 'full'
    }

    jacoco {
        excludes = [ "*Test*" ]
    }
}

sourceSets {
    test {
        resources {
            srcDir 'src/test/java'
        }
    }
}

clean.dependsOn(cleanDownloadPlugins)
