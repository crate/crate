import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        jcenter()
    }
}

apply plugin: 'distribution'
apply from: "$rootDir/gradle/javaModule.gradle"
apply plugin: 'signing'

archivesBaseName = 'crate-app'
group = "io.crate"


configurations {
    compileNotTransitive {
        transitive = false
    }
}

evaluationDependsOn(':es')
evaluationDependsOn(':core')
evaluationDependsOn(':sql')
evaluationDependsOn(':sql-parser')
evaluationDependsOn(':dex')
evaluationDependsOn(':shared')
evaluationDependsOn(':blob')
evaluationDependsOn(':udc')
evaluationDependsOn(':dns-discovery')

dependencies {
    compile project(':sql')
    compile project(':blob')
    compile project(':udc')
    compile project(':azure-discovery')
    compile project(':dns-discovery')
    compile project(':es:es-discovery-ec2')
    compile project(':es:es-repository-s3')
    compile project(':es:es-transport')
    compile('org.apache.xbean:xbean-finder:4.5') {
        exclude group: 'org.apache.xbean', module: 'xbean-asm-util'
    }

    testCompile project(':integration-testing')

    compileNotTransitive project(':core')
    compileNotTransitive project(':es:es-core')
    compileNotTransitive project(':sql')
    compileNotTransitive project(':sql-parser')
    compileNotTransitive project(':dex')
    compileNotTransitive project(':shared')
    compileNotTransitive project(':blob')
    compileNotTransitive project(':udc')
    compileNotTransitive project(':dns-discovery')
    compileNotTransitive project(':es:es-discovery-ec2')
    compileNotTransitive project(':es:es-repository-s3')
    compileNotTransitive project(':es:es-transport')
}

task release(dependsOn: 'distTar') {
    doLast {
        logger.info("released version: " + project(':core').getVersion.version)
    }
}

task nightly(dependsOn: 'distTar') {
    doLast {
        logger.info("nightly version: " + project(':core').getVersion.version)
    }
}

task writeBuildInfo(dependsOn: [':core:getVersion']) {
    doLast {
        def hash = "git rev-parse HEAD".execute().in.text.trim()

        def file = new File(project.projectDir.path + "/src/main/resources/crate-build.properties")
        if (!file.isFile()) {
            def parentDir = new File(file.parent)
            if (!parentDir.isDirectory()) {
                parentDir.mkdirs()
            }
            file.createNewFile()
        }

        copy {
            into('src/main/dist/bin')
            from('src/bin') {
                filter(ReplaceTokens, tokens: [version: project(':core').getVersion.version])
            }
        }

        ant.propertyfile(file: file.path, comment: 'Build Properties') {
            ant.entry(key: 'hash', value: hash)
            ant.entry(key: 'timestamp', value: System.currentTimeMillis())
        }
    }
}


processResources.dependsOn('writeBuildInfo')

task dist {
    dependsOn ':blackbox:itest', distTar, distZip
}

task myJavadocs(type: Javadoc, dependsOn: processResources) {
    classpath = configurations.compile
    source = sourceSets.main.allJava +
            project(':core').sourceSets.main.allJava +
            project(':sql').sourceSets.main.allJava +
            project(':sql-parser').sourceSets.main.allJava +
            project(':dex').sourceSets.main.allJava +
            project(':shared').sourceSets.main.allJava +
            project(':blob').sourceSets.main.allJava +
            project(':udc').sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: [myJavadocs]) {
    classifier = 'javadoc'
    from myJavadocs.destinationDir
    manifest {
        attributes("Implementation-Title": "Crate.IO")
    }
}

task buildJavadocJar(dependsOn: [':core:getVersion', myJavadocs]) {
    doLast {
        ext.version = project(':core').getVersion.version
        project.version = ext.version
        tasks.javadocJar.execute()
    }
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from(sourceSets.main.allSource +
            project(':core').sourceSets.main.allJava +
            project(':sql').sourceSets.main.allJava +
            project(':sql-parser').sourceSets.main.allJava +
            project(':dex').sourceSets.main.allJava +
            project(':shared').sourceSets.main.allJava +
            project(':blob').sourceSets.main.allJava +
            project(':udc').sourceSets.main.allJava)
    manifest {
        attributes("Implementation-Title": "Crate.IO")
    }
}

task buildSourceJar(dependsOn: [':core:getVersion']) {
    doLast {
        ext.version = project(':core').getVersion.version
        project.version = ext.version
        tasks.sourceJar.execute()
    }
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

task signJars(type: Sign, dependsOn: [jar, buildSourceJar, buildJavadocJar]) {
    sign configurations.archives
}

install.dependsOn([jar, ':core:getVersion', buildSourceJar, buildJavadocJar])
install {
    repositories {
        mavenInstaller {
            pom.whenConfigured {
                pom ->
                    pom.dependencies.clear()
                    project.parent.subprojects.findAll { it.name != 'app' }.each {
                        if (it.hasProperty('install')) {
                            pom.dependencies.addAll(it.install.repositories.mavenInstaller.pom.getEffectivePom().dependencies.findAll {
                                it.groupId != 'io.crate'
                            })
                        }
                    }
            }
            pom.project {
                artifactId 'crate'
                name 'crate'
                description 'Crate.IO'
                url 'https://crate.io'
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/license/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id 'crate'
                        name 'Crate Developers'
                        email 'office@crate.io'
                    }
                }
            }
        }
    }
}

project.ext.bintrayUsername = project.hasProperty('bintrayUsername') ? bintrayUsername : ""
project.ext.bintrayPassword = project.hasProperty('bintrayPassword') ? bintrayPassword : ""

uploadArchives.dependsOn([jar, ':core:getVersion', buildSourceJar, buildJavadocJar, signJars])
uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment ->
                    signing.signPom(deployment)
                    if (project.ext.bintrayUsername.length() == 0 || project.ext.bintrayPassword.length() == 0) {
                        throw new StopExecutionException("uploadArchives cannot be called without bintray username and password")
                    }
            }
            pom.whenConfigured {
                pom ->
                    pom.dependencies.clear()
                    project.parent.subprojects.findAll { it.name != 'app' && it.name != 'sigar' }.each {
                        if (it.hasProperty('install')) {
                            pom.dependencies.addAll(it.install.repositories.mavenInstaller.pom.getEffectivePom().dependencies.findAll {
                                it.groupId != 'io.crate'
                            })
                        }
                    }
            }
            pom.project {
                artifactId 'crate'
                name 'crate'
                description 'Crate.IO'
                url 'https://crate.io'
                scm {
                    url 'https://github.com/crate/crate'
                    connection 'scm:git:git://github.com/crate/crate.git'
                    developerConnection 'scm:git:ssh:git@github.com:crate/crate.git'
                }
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/license/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id 'crate'
                        name 'Crate Developers'
                        email 'office@crate.io'
                    }
                }
            }
            pom {
                artifactId = 'crate'
            }
            repository(id: 'crate', url: 'https://api.bintray.com/maven/crate/crate/crate') {
                authentication(userName: project.ext.bintrayUsername, password: project.ext.bintrayPassword)
            }
        }
    }
}

distTar {
    dependsOn ':core:getVersion'
    compression = Compression.GZIP
    baseName = 'crate'
    extension = 'tar.gz'
    doFirst {
        version = project(':core').getVersion.version
    }
}

distZip {
    dependsOn ':core:getVersion'
    baseName = 'crate'
    doFirst {
        version = project(':core').getVersion.version
    }
}

ext {
    downloadDir = new File(buildDir, 'downloads')
    crash_version = '0.20.0'
}

def rootDir = project.parent.projectDir

def libs = project.configurations.runtime

distributions {
    main {
        baseName = 'crate'
        contents {
            into("") {
                from "$rootDir"
                include 'LICENSE.txt'
                include 'NOTICE'
                include 'README.rst'
                include 'CHANGES.txt'
            }
            into("lib") {
                from libs
                exclude 'sigar-*.jar'
                exclude 'jmx-*.jar'
                exclude 'crate-*.jar'
                exclude 'es.jar'
                exclude 'es-*.jar'
            }
            into("lib") {
                from jar
            }
            into('plugins') {
                from('plugins') {
                    includeEmptyDirs = true
                }
            }
            into('bin') {
                from("${downloadDir}/crash_standalone") {
                    fileMode = 0755
                }
            }
        }
    }
}

jar {
    dependsOn ':core:getVersion'

    doFirst {
        manifest.attributes 'Implementation-Version': project(':core').getVersion.version
        project.version = project(':core').getVersion.version
        def serviceDir = file("$buildDir/META-INF/services")
        serviceDir.deleteDir()
        serviceDir.mkdirs()

        // copy all service files from deps to buildDir
        for (file in configurations.compileNotTransitive) {
            zipTree(file).matching { include 'META-INF/services/*' }.each { f ->
                new File(serviceDir, f.name) << f.getText("UTF-8") << "\n"
            }
        }
    }

    from(configurations.compileNotTransitive.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude 'META-INF/**' // Don't let Gradle merge service files
    }

    // include service files from the buildDir
    from fileTree(buildDir).matching { include 'META-INF/services/*' }
}

task downloadPlugins(
        dependsOn: [':admin-ui:downloadPlugin', ':sigar:jar', ':es:es-repository-hdfs:jar', ':azure-discovery:jar', ':jmx-monitoring:jar']) {
    doLast {
        // copy es-repository-hdfs plugin
        copy {
            from(project(':es:es-repository-hdfs').buildDir.path + '/libs')
            into 'plugins/es-repository-hdfs'
        }
        copy {
            from(project(':es:es-repository-hdfs').buildDir.path + '/plugin-descriptor.properties')
            into 'plugins/es-repository-hdfs'
        }

        copy {
            // jar file
            from(project(':azure-discovery').tasks.jar.archivePath)
            // generated plugin-descriptor.properties
            from(project(':azure-discovery').buildDir.path + '/tmp/plugin-descriptor.properties')
            into 'plugins/crate-azure-discovery'
        }

        // copy crate-admin plugin
        copy {
            from(project(':admin-ui').buildDir.path + '/crate-admin')
            from(project(':admin-ui').buildDir.path + '/libs')
            into 'plugins/crate-admin'
        }

        copy {
            from(project(':jmx-monitoring').tasks.jar.archivePath)
            into 'plugins/jmx-monitoring'
        }

        // copy crate-sigar plugin
        copy {
            from(project(':sigar').tasks.jar.archivePath)
            from(project(':sigar').projectDir.path + "/lib")
            into 'plugins/crate-sigar'
        }
    }
}

downloadPlugins.outputs.file ('plugins')



task downloadCrash {
    doLast {
        download(
                downloadDir,
                "https://cdn.crate.io/downloads/releases/crash_standalone_${crash_version}",
                "crash_standalone")
    }
}

processResources.dependsOn(downloadPlugins, downloadCrash)

task(runDebug, dependsOn: 'classes', type: JavaExec) {
    main = 'io.crate.bootstrap.CrateDB'
    debug = true
    enableAssertions = true
    classpath = sourceSets.main.runtimeClasspath
    systemProperties += ['es.path.home': "${project.buildDir}/$name"]
}

task(run, dependsOn: 'classes', type: JavaExec) {
    main = 'io.crate.bootstrap.CrateDB'
    debug = false
    enableAssertions = true
    classpath = sourceSets.main.runtimeClasspath
    systemProperties += ['es.path.home': "${project.buildDir}/$name"]
    systemProperties System.getProperties()
}

test {
    testLogging {
        exceptionFormat = 'full'
    }

    jacoco {
        excludes = ["*Test*"]
    }
}

sourceSets {
    test {
        output.resourcesDir = 'build/resources'
    }
}

clean.dependsOn('cleanDownloadPlugins')
