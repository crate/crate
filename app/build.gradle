buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'eu.appsatori:gradle-fatjar-plugin:0.3'
    }
}

apply plugin:'distribution'
apply plugin: 'java'
apply plugin: 'eu.appsatori.fatjar'

archivesBaseName = 'crate-app'

configurations {
    all*.exclude group: 'org.elasticsearch'
}



task release(dependsOn: 'distTar') << {
    logger.info("released version: " + getVersion.version);
}

task nightly(dependsOn: 'distTar') << {
    logger.info("nightly version: " + getVersion.version);
}


task getVersion (dependsOn: 'classes') << {
    def stdout = new ByteArrayOutputStream()
    javaexec {
        classpath = sourceSets.main.runtimeClasspath
        main = 'io.crate.Version'
        standardOutput = stdout
    }
    ext.gitTag = "git describe".execute().in.text.trim()
    ext.version = stdout.toString().trim().split(" ")[1].replace(',','').trim()

    if (gradle.taskGraph.hasTask(release)) {
        assert gitTag == version, "Version mismatch gitTag: " + gitTag + " does not match crate version: " + version
    } else if (gradle.taskGraph.hasTask(nightly)) {
        def date = new Date().format('yyyyMMddHHmm')
        def shortHash = "git rev-parse --short HEAD".execute().in.text.trim()
        ext.version = version.replace('-SNAPSHOT','') + "-" + date + "-" + shortHash
    } else if (!gradle.taskGraph.hasTask(':client:uploadArchives')) {
        def shortHash = "git rev-parse --short HEAD".execute().in.text.trim()
        ext.version = version + "-" + shortHash
    }

    logger.quiet("gitTag: " + gitTag)
    logger.quiet("version: " + version)
}

fatJar {
    dependsOn getVersion
    doFirst {
        manifest.attributes 'Implementation-Version': getVersion.version
    }
    manifest {
        attributes 'Main-Class': 'io.crate.bootstrap.CrateF',
        'Implementation-Title': 'Crate',
        'Built-Date': new Date(),
        'Built-JDK': System.getProperty('java.version'),
        'Built-Gradle': gradle.gradleVersion
    }
}

task dist {
    dependsOn ':docs:itest', distTar, distZip
}

task install {
    dependsOn installDist
}

distTar {
    dependsOn getVersion
    compression = Compression.GZIP
    baseName = 'crate'
    extension = 'tar.gz'
    doFirst {
        version = getVersion.version
    }
}

distZip {
    dependsOn getVersion
    baseName = 'crate'
    doFirst {
        version = getVersion.version
    }
}

ext {
    downloadDir = new File(buildDir, 'downloads')
    plugin_crateadmin_version = '0.11.3'
    crash_version = '0.11.2'
}

evaluationDependsOn(':es')

dependencies {
    compile project(':core')
    compile project(':es')
    compile project(':sql')
    compile project(':admin-ui')
    compile project(':blob')
    compile project(':udc')

    testCompile ('com.carrotsearch.randomizedtesting:randomizedtesting-runner:2.1.10') {
        exclude group: 'junit', module: 'junit'
    }
    testCompile 'junit:junit:4.11'
}

def rootDir = project.parent.projectDir

distributions {
    main {
        baseName = 'crate'
        contents {
            into("") {
                from "$rootDir"
                include 'LICENSE.txt'
                include 'NOTICE'
                include 'README.rst'
                include 'CHANGES.txt'
            }
            into("lib") {
                from project.configurations.runtime
                // sigar gets included from the checked in runtime dependency in :es:
                exclude 'sigar-*.jar'
            }
            into("lib") {
                from jar
            }
            into('plugins') {
                from 'plugins'
            }
            into('bin') {
                from ("${downloadDir}/crash_standalone") {
                    fileMode = 0755
                }
            }
        }
    }
}


def download (String url, String name){
    downloadDir.mkdirs()
    def dest = new File(downloadDir, name)
    ant.get(
            src: url,
            verbose: true,
            usetimestamp: true,
            skipexisting: true,
            dest: dest
    )
    return dest;
}

def extractTopfolder(File src, String trg){
    copy {
        includeEmptyDirs = false
        FileTree ft
        if(src.name.endsWith('.zip')) {
            ft = zipTree(src)
        }
        if(src.name.endsWith('.tar.gz')) {
            ft = tarTree(src)
        }
        from(ft) {
            eachFile { details ->
                details.path =
                    details.path.substring(details.relativePath.segments[0].length())
            }
        }
        into trg
    }
}

task downloadPlugins << {
    def dest = download(
            "https://cdn.crate.io/downloads/releases/crate-admin-${plugin_crateadmin_version}.tar.gz",
            "crate-admin-${plugin_crateadmin_version}.tar.gz"
    )
    extractTopfolder(dest, 'plugins/crate-admin/_site')
}

task downloadCrash << {
    def dest = download(
         "https://cdn.crate.io/downloads/releases/crash_standalone_${crash_version}",
         "crash_standalone"
    )
}

processResources.dependsOn(downloadPlugins, downloadCrash)

task(runDebug, dependsOn: 'classes', type: JavaExec) {
    main = 'io.crate.bootstrap.CrateF'
    debug = true
    classpath = sourceSets.main.runtimeClasspath
    maxHeapSize = '512m'
}

task(run, dependsOn: 'classes', type: JavaExec) {
    main = 'io.crate.bootstrap.CrateF'
    debug = false
    classpath = sourceSets.main.runtimeClasspath
    maxHeapSize = '512m'
    systemProperties System.getProperties()
}

test {

    testLogging {
        exceptionFormat = 'full'
    }

    jacoco {
        excludes = [ "*Test*" ]
    }
}

sourceSets {
    test {
        resources {
            srcDir 'src/test/java'
        }
    }
}
